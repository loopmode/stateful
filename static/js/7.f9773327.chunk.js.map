{"version":3,"sources":["examples/bootstrap/button-inline-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","ButtonInlineExample","successCallback","a","Math","random","errorCallback","Error","busyDelay","className","onClick","content","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href","children"],"mappings":"0OAQMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAE7D,SAASI,IACtB,IAAMC,EAAe,uCAAG,sBAAAC,EAAA,sEAChBP,EAAqB,IAAhBQ,KAAKC,UADM,2CAAH,qDAGfC,EAAa,uCAAG,sBAAAH,EAAA,sEACdP,EAAqB,IAAhBQ,KAAKC,UADI,gCAEb,IAAIE,MAAM,SAFG,2CAAH,qDAKnB,OACE,qCACE,gCACE,cAAC,WAAD,CAAUC,UAAW,IAArB,SACE,wBAAQC,UAAU,uBAAuBC,QAASR,EAAlD,4BAKF,cAAC,WAAD,UACE,wBAAQO,UAAU,eAAeC,QAASJ,EAA1C,4BAKJ,cAAC,IAAD,CAAkBK,QAAO,8hC,6GC/BxB,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgCG,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIR,QAAS,kBAAMO,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBM,SAAUR","file":"static/js/7.f9773327.chunk.js","sourcesContent":["import { Stateful } from \"@loopmode/stateful\";\nimport raw from \"raw.macro\";\nimport React from \"react\";\n\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\n\n// You can wrap any JSX children in Stateful wrappers.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nexport default function ButtonInlineExample() {\n  const successCallback = async () => {\n    await wait(Math.random() * 2000);\n  };\n  const errorCallback = async () => {\n    await wait(Math.random() * 2000);\n    return new Error(\"Nope\");\n  };\n\n  return (\n    <>\n      <div>\n        <Stateful busyDelay={500}>\n          <button className=\"btn btn-primary mr-1\" onClick={successCallback}>\n            Will succeed\n          </button>\n        </Stateful>\n\n        <Stateful>\n          <button className=\"btn btn-info\" onClick={errorCallback}>\n            Will fail\n          </button>\n        </Stateful>\n      </div>\n      <ToggleCodeViewer content={raw(\"./button-inline-example.tsx\")} />\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}