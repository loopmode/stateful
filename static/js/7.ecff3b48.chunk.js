(this["webpackJsonp@stateful/examples"]=this["webpackJsonp@stateful/examples"]||[]).push([[7],{299:function(n,t,e){"use strict";e.r(t),e.d(t,"default",(function(){return l}));var r=e(56),a=e.n(r),c=e(57),o=e(14),i=(e(0),e(55)),u=e(1),s=function(n){return new Promise((function(t){return setTimeout(t,n)}))};function l(){var n=function(){var n=Object(c.a)(a.a.mark((function n(){return a.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,s(2e3*Math.random());case 2:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}(),t=function(){var n=Object(c.a)(a.a.mark((function n(){return a.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,s(2e3*Math.random());case 2:return n.abrupt("return",new Error("Nope"));case 3:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}();return Object(u.jsxs)(u.Fragment,{children:[Object(u.jsxs)("div",{children:[Object(u.jsx)(o.Stateful,{busyDelay:500,children:Object(u.jsx)("button",{className:"btn btn-primary mr-1",onClick:n,children:"Will succeed"})}),Object(u.jsx)(o.Stateful,{children:Object(u.jsx)("button",{className:"btn btn-info",onClick:t,children:"Will fail"})})]}),Object(u.jsx)(i.a,{content:'import { Stateful } from "@loopmode/stateful";\nimport raw from "raw.macro";\nimport React from "react";\n\nimport { ToggleCodeViewer } from "../../ToggleCodeViewer";\n\n// You can wrap any JSX children in Stateful wrappers.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nexport default function ButtonInlineExample() {\n  const successCallback = async () => {\n    await wait(Math.random() * 2000);\n  };\n  const errorCallback = async () => {\n    await wait(Math.random() * 2000);\n    return new Error("Nope");\n  };\n\n  return (\n    <>\n      <div>\n        <Stateful busyDelay={500}>\n          <button className="btn btn-primary mr-1" onClick={successCallback}>\n            Will succeed\n          </button>\n        </Stateful>\n\n        <Stateful>\n          <button className="btn btn-info" onClick={errorCallback}>\n            Will fail\n          </button>\n        </Stateful>\n      </div>\n      <ToggleCodeViewer content={raw("./button-inline-example.tsx")} />\n    </>\n  );\n}\n'})]})}},55:function(n,t,e){"use strict";e.d(t,"a",(function(){return u}));var r=e(10),a=e(58),c=e(0),o=e.n(c),i=e(1);function u(n){var t=n.language,e=void 0===t?"jsx":t,c=n.content,u=o.a.useState(!1),s=Object(r.a)(u,2),l=s[0],f=s[1];return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("hr",{}),Object(i.jsxs)("a",{href:"#",onClick:function(){return f(!l)},children:[l?"Hide":"Show"," code"]}),l&&Object(i.jsx)(a.a,{language:e,children:c})]})}}}]);
//# sourceMappingURL=7.ecff3b48.chunk.js.map