{"version":3,"sources":["App.js","serviceWorker.js","index.js","App.scss"],"names":["AppHeader","React","lazy","Promise","all","__webpack_require__","e","then","bind","AppMenu","AppContent","App","_React$useState","useState","_React$useState2","Object","slicedToArray","menuVisible","setMenuVisible","react_default","a","createElement","Suspense","fallback","style","padding","HashRouter","basename","process","className","cx","css","onShowMenu","onHideMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","placeholder","querySelector","parentNode","removeChild","module","exports"],"mappings":"sPAMMA,EAAYC,IAAMC,KAAK,kBACzBC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAEEC,EAAUR,IAAMC,KAAK,kBACvBC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAEEE,EAAaT,IAAMC,KAAK,kBAC1BG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aA6BWG,EA1BH,WAAM,IAAAC,EAEwBX,IAAMY,UAAS,GAFvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEPK,EAFOH,EAAA,GAEMI,EAFNJ,EAAA,GAMd,OACIK,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CACIC,SAAUJ,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,QAAS,KAAvB,eAEVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,SAAUC,KACdT,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAG,MAAOC,IAAIpB,MAC1BQ,EAAAC,EAAAC,cAACrB,EAAD,CAAWgC,WATV,kBAAMd,GAAe,MAUtBC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACXV,EAAAC,EAAAC,cAACZ,EAAD,CACIwB,WAXP,kBAAMf,GAAe,IAYdD,YAAaA,IAEjBE,EAAAC,EAAAC,cAACX,EAAD,WCtBJwB,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GAC/BA,EAAaC,eCvHzB,IAAMC,EAAcP,SAASQ,cAAc,wBACvCD,GACAA,EAAYE,WAAWC,YAAYH,sBCdvCI,EAAAC,QAAA,CAAkB3C,IAAA","file":"static/js/main.eaeb2184.chunk.js","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport css from './App.scss';\n\nconst AppHeader = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppHeader' */ 'components/AppHeader')\n);\nconst AppMenu = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppMenu' */ 'components/AppMenu')\n);\nconst AppContent = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppContent' */ 'components/AppContent')\n);\n\nconst App = () => {\n    // the menu is hidden on mobile via CSS, and we force-open it when menu icon is clicked\n    const [menuVisible, setMenuVisible] = React.useState(false);\n    const showMenu = () => setMenuVisible(true);\n    const hideMenu = () => setMenuVisible(false);\n\n    return (\n        <React.Suspense\n            fallback={<div style={{ padding: 10 }}>Loading...</div>}\n        >\n            <Router basename={process.env.REACT_APP_BASENAME}>\n                <div className={cx('App', css.App)}>\n                    <AppHeader onShowMenu={showMenu} />\n                    <div className=\"App--body\">\n                        <AppMenu\n                            onHideMenu={hideMenu}\n                            menuVisible={menuVisible}\n                        />\n                        <AppContent />\n                    </div>\n                </div>\n            </Router>\n        </React.Suspense>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst placeholder = document.querySelector('.content-placeholder');\nif (placeholder) {\n    placeholder.parentNode.removeChild(placeholder);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_3jQ0wgPc3Hj0LizMGGPFst\"};"],"sourceRoot":""}