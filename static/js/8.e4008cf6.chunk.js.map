{"version":3,"sources":["examples/bulma/button-component-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","Button","stateful","props","busyDelay","pendingProps","busyClasses","successClasses","errorClasses","className","cx","children","ButtonComponentExample","handleSuccessClick","a","Math","random","handleErrorClick","Error","onClick","content","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href"],"mappings":"yRAWMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAEtEI,EAAS,SAAC,GAQT,IAPLC,EAOI,EAPJA,SACGC,EAMC,iBACJ,OACE,cAAC,WAAD,yBACEC,UAAW,IACXC,aAAa,WACbC,YAAY,aACZC,eAAe,aACfC,aAAa,YACTN,GANN,aAQE,kDAAYC,GAAZ,IAAmBM,UAAWC,IAAG,SAAUP,EAAMM,WAAjD,SACGN,EAAMQ,gBAMA,SAASC,IACtB,IAAMC,EAAkB,uCAAG,sBAAAC,EAAA,sEACnBlB,EAAqB,KAAhBmB,KAAKC,UADS,2CAAH,qDAGlBC,EAAgB,uCAAG,sBAAAH,EAAA,sEACjBlB,EAAqB,KAAhBmB,KAAKC,UADO,gCAEhB,IAAIE,MAAM,SAFM,2CAAH,qDAOtB,OACE,qCACE,sBAAKT,UAAU,UAAf,UACE,cAACR,EAAD,CAAQkB,QAASN,EAAjB,0BACA,cAACZ,EAAD,CAAQkB,QAASF,EAAjB,uBACA,cAAChB,EAAD,CAAQkB,QARY,WACxB,OAAOJ,KAAKC,SAAW,GAAMH,IAAuBI,KAOZf,SAAU,CAAEE,UAAW,GAA3D,4BAKF,cAAC,IAAD,CAAkBgB,QAAO,ohE,6GCxDxB,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgCG,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIR,QAAS,kBAAMO,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBX,SAAUS","file":"static/js/8.e4008cf6.chunk.js","sourcesContent":["import { Stateful } from \"@loopmode/stateful\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport { StatefulProps } from \"@loopmode/stateful/lib/types\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\nimport raw from \"raw.macro\";\n\n// Example using a custom button component.\n// If you have a custom Button component anyways, you can add a single Stateful wrapper and configure it there.\n// Later throughout your codebase, you don't care about importing or configuring Stateful wrappers anymore.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nconst Button = ({\n  stateful,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & {\n  // If you care about individual settings per instance, you can pass a stateful props object along\n  stateful?: StatefulProps;\n  // latest react types workaround\n  type?: \"submit\" | \"reset\" | \"button\";\n}) => {\n  return (\n    <Stateful\n      busyDelay={300}\n      pendingProps=\"disabled\"\n      busyClasses=\"is-loading\"\n      successClasses=\"is-success\"\n      errorClasses=\"is-error\"\n      {...stateful}\n    >\n      <button {...props} className={cx(\"button\", props.className)}>\n        {props.children}\n      </button>\n    </Stateful>\n  );\n};\n\nexport default function ButtonComponentExample() {\n  const handleSuccessClick = async () => {\n    await wait(Math.random() * 2500);\n  };\n  const handleErrorClick = async () => {\n    await wait(Math.random() * 2500);\n    return new Error(\"Nope\");\n  };\n  const handleRandomClick = () => {\n    return Math.random() > 0.5 ? handleSuccessClick() : handleErrorClick();\n  };\n  return (\n    <>\n      <div className=\"buttons\">\n        <Button onClick={handleSuccessClick}>Will succeed</Button>\n        <Button onClick={handleErrorClick}>Will fail</Button>\n        <Button onClick={handleRandomClick} stateful={{ busyDelay: 0 }}>\n          Random fail\n        </Button>\n      </div>\n\n      <ToggleCodeViewer content={raw(\"./button-component-example.tsx\")} />\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}