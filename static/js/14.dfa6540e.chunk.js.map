{"version":3,"sources":["examples/bulma/react-hook-form-crud-example.tsx","ToggleCodeViewer.tsx"],"names":["CrudExample","className","UsersCrudPage","content","currentPath","useData","wait","time","Promise","resolve","setTimeout","React","useState","id","name","email","users","setUsers","deleteUser","useCallback","a","Math","random","Error","filter","user","createUser","data","find","newUser","toString","slice","current","updateUser","index","findIndex","next","history","useHistory","handleCreateUser","push","handleUpdateUser","path","to","children","exact","from","UsersList","onDeleteUser","render","UserForm","onSubmit","props","match","params","initialUser","useForm","defaultValues","register","handleSubmit","reset","errors","monitor","provideContext","handlers","onReject","type","ref","cx","required","minLength","value","message","maxLength","pattern","onClick","Consumer","map","ToggleCodeViewer","language","showCode","setShowCode","href"],"mappings":"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","file":"static/js/14.dfa6540e.chunk.js","sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport { Stateful } from \"@loopmode/stateful\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\nimport raw from \"raw.macro\";\nimport { Link, Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\n\nexport type User = {\n  id: string;\n  name: string;\n  email: string;\n};\n\nexport default function CrudExample() {\n  return (\n    <div className=\"CrudExample\">\n      <UsersCrudPage />\n      <ToggleCodeViewer content={raw(\"./react-hook-form-crud-example.tsx\")} />\n    </div>\n  );\n}\n\nconst currentPath = \"/react-hook-form-crud\";\n\n// this hook basically mocks server+fetch mechanisms\nexport function useData() {\n  const wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n  const uuid = () => Math.random().toString(36).slice(-6);\n\n  const [users, setUsers] = React.useState<User[]>([\n    { id: \"pfuo8l\", name: \"John\", email: \"john@domain.com\" },\n    { id: \"mz2q6k\", name: \"Jane\", email: \"jane@domain.com\" },\n  ]);\n\n  const deleteUser = React.useCallback(async (id) => {\n    await wait(500 + Math.random() * 500);\n    if (Math.random() > 0.5) {\n      throw new Error(\"failed for some reasons\");\n    }\n    setUsers((users) => users.filter((user) => user.id !== id));\n  }, []);\n\n  const createUser = React.useCallback(\n    async (data: Omit<User, \"id\">) => {\n      await wait(500 + Math.random() * 500);\n\n      if (users.find((user) => user.email === data.email)) {\n        throw new Error(\"Email already exists\");\n      }\n      const newUser: User = { ...data, id: uuid() };\n      setUsers((current) => [...current, newUser]);\n    },\n    [users]\n  );\n\n  const updateUser = React.useCallback(\n    async (id: string, data: Partial<User>) => {\n      await wait(500 + Math.random() * 500);\n      const index = users.findIndex((user) => user.id === id);\n      if (index === -1) {\n        throw new Error(\"User not found\");\n      }\n\n      const next = [...users];\n      next[index] = {\n        ...next[index],\n        ...data,\n      };\n\n      setUsers(next);\n    },\n    [users]\n  );\n\n  return {\n    users,\n    deleteUser,\n    createUser,\n    updateUser,\n  };\n}\n\nfunction UsersCrudPage() {\n  const history = useHistory();\n  const { users, deleteUser, createUser, updateUser } = useData();\n\n  const handleCreateUser = React.useCallback(\n    async (data: User) => {\n      try {\n        await createUser(data);\n        history.push(`${currentPath}/list`);\n      } catch (error) {\n        return error;\n      }\n    },\n    [createUser, history]\n  );\n\n  const handleUpdateUser = React.useCallback(\n    async (data: User) => {\n      try {\n        await updateUser(data.id, data);\n        history.push(`${currentPath}/list`);\n      } catch (error) {\n        return error;\n      }\n    },\n    [updateUser, history]\n  );\n\n  return (\n    <>\n      <nav className=\"container is-flex\">\n        <Route path={`${currentPath}/(create|edit)`}>\n          <Link className=\"button\" to={`${currentPath}/list`} children=\"Back to list\" />\n        </Route>\n        <span className=\"is-flex-1\" />\n        <Route path={`${currentPath}/list`}>\n          <Link className=\"button\" to={`${currentPath}/create`} children=\"Create new user\" />\n        </Route>\n      </nav>\n\n      <hr />\n\n      <Switch>\n        <Redirect exact from={`${currentPath}/`} to={`${currentPath}/list`} />\n        <Route path={`${currentPath}/list`}>\n          <UsersList users={users} onDeleteUser={(id) => deleteUser(id)} />\n        </Route>\n\n        <Route\n          path={`${currentPath}/create`}\n          render={() => {\n            return <UserForm onSubmit={(data) => handleCreateUser(data)} />;\n          }}\n        ></Route>\n\n        <Route\n          path={`${currentPath}/edit/:id`}\n          render={(props) => {\n            const user = users.find((user) => user.id === props.match.params.id);\n            return <UserForm onSubmit={(data) => handleUpdateUser(data)} initialUser={user} />;\n          }}\n        ></Route>\n      </Switch>\n    </>\n  );\n}\n\nfunction UserForm(props: {\n  initialUser?: User;\n  userId?: string;\n  onSubmit: (data: User) => Promise<any>;\n}) {\n  const { register, handleSubmit, reset, errors } = useForm({\n    defaultValues: props.initialUser,\n  });\n\n  return (\n    <Stateful monitor=\"onSubmit\" provideContext>\n      {/*\n       * Due to how react-hook-form works, we need to use a render function here.\n       *\n       * In react-hook-form, while validation errors will prevent onSubmit, there won't be any kind of error\n       * that Stateful could detect in order to indicate the failure.\n       * However, you can provide a second callback to the handleSubmit function,\n       * and it will be invoked with validation errors.\n       *\n       * Also, you can use a render function for Stateful and access its internal handlers.\n       *\n       * Effectively, you can pass the onReject handler as validation error handler.\n       */}\n      {({ handlers }) => (\n        <form onSubmit={handleSubmit(props.onSubmit, handlers.onReject)}>\n          <input type=\"hidden\" name=\"id\" ref={register} />\n          <div className=\"field\">\n            <label className=\"label\">Name</label>\n            <div className=\"control has-icons-left\">\n              <input\n                type=\"text\"\n                className={cx(\"input\", { \"is-danger\": errors.name })}\n                name=\"name\"\n                ref={register({\n                  required: \"required\",\n                  minLength: { value: 3, message: \"min length is 3\" },\n                  maxLength: { value: 40, message: \"max length is 40\" },\n                })}\n              />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fa fa-user\"></i>\n              </span>\n              {errors.name && <p className=\"help is-danger\">{errors.name.message}</p>}\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Email</label>\n            <div className=\"control has-icons-left\">\n              <input\n                type=\"text\"\n                className={cx(\"input\", { \"is-danger\": errors.email })}\n                name=\"email\"\n                ref={register({\n                  required: \"required\",\n                  pattern: { value: /\\S+@\\S+\\.\\S+/, message: \"Not a valid email\" },\n                })}\n              />\n              <span className=\"icon is-small is-left\">\n                <i className=\"fa fa-envelope\"></i>\n              </span>\n              {errors.email && <p className=\"help is-danger\">{errors.email.message}</p>}\n            </div>\n          </div>\n\n          <div className=\"field is-flex\">\n            <Stateful>\n              <button type=\"button\" className=\"button\" onClick={() => reset(props.initialUser)}>\n                Reset\n              </button>\n            </Stateful>\n\n            <span className=\"is-flex-1\" />\n            <Stateful.Consumer>\n              <button className=\"button\" type=\"submit\">\n                {props.initialUser ? \"Save\" : \"Create new\"} User\n              </button>\n            </Stateful.Consumer>\n          </div>\n        </form>\n      )}\n    </Stateful>\n  );\n}\n\nfunction UsersList(props: { users: User[]; onDeleteUser: (id: string) => Promise<any> }) {\n  return (\n    <table className=\"table is-hoverable\">\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>name</th>\n          <th>email</th>\n          <th className=\"has-text-right\">actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.users.map((user) => {\n          return (\n            <tr key={user.id}>\n              <td>{user.id}</td>\n              <td>{user.name}</td>\n              <td>{user.email}</td>\n              <td className=\"has-text-right\">\n                <div className=\"buttons is-inline-block\">\n                  <Stateful>\n                    <Link className=\"button\" to={`/react-hook-form-crud/edit/${user.id}`}>\n                      Edit\n                    </Link>\n                  </Stateful>\n                  <Stateful>\n                    <button className=\"button\" onClick={() => props.onDeleteUser(user.id)}>\n                      Delete\n                    </button>\n                  </Stateful>\n                </div>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}