{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../node_modules/remarkable/lib/rules_inline/state_inline.js","../../../node_modules/remarkable/lib/common/entities.js","../../../node_modules/remarkable/lib/helpers/parse_link_destination.js","../../../node_modules/remarkable/lib/helpers/normalize_link.js","../../../node_modules/remarkable/lib/helpers/parse_link_title.js","../../../node_modules/remarkable/lib/helpers/normalize_reference.js","../../../node_modules/react-remarkable/dist/index.js","../../../node_modules/remarkable/index.js","../../../node_modules/remarkable/lib/index.js","../../../node_modules/remarkable/lib/renderer.js","../../../node_modules/remarkable/lib/rules.js","../../../node_modules/remarkable/lib/parser_core.js","../../../node_modules/remarkable/lib/rules_core/block.js","../../../node_modules/remarkable/lib/rules_core/abbr.js","../../../node_modules/remarkable/lib/rules_core/references.js","../../../node_modules/remarkable/lib/rules_core/inline.js","../../../node_modules/remarkable/lib/rules_core/footnote_tail.js","../../../node_modules/remarkable/lib/rules_core/abbr2.js","../../../node_modules/remarkable/lib/rules_core/replacements.js","../../../node_modules/remarkable/lib/rules_core/smartquotes.js","../../../node_modules/remarkable/lib/rules_core/linkify.js","../../../node_modules/autolinker/dist/Autolinker.js","../../../node_modules/remarkable/lib/parser_block.js","../../../node_modules/remarkable/lib/rules_block/state_block.js","../../../node_modules/remarkable/lib/rules_block/code.js","../../../node_modules/remarkable/lib/rules_block/fences.js","../../../node_modules/remarkable/lib/rules_block/blockquote.js","../../../node_modules/remarkable/lib/rules_block/hr.js","../../../node_modules/remarkable/lib/rules_block/list.js","../../../node_modules/remarkable/lib/rules_block/footnote.js","../../../node_modules/remarkable/lib/rules_block/heading.js","../../../node_modules/remarkable/lib/rules_block/lheading.js","../../../node_modules/remarkable/lib/rules_block/htmlblock.js","../../../node_modules/remarkable/lib/common/html_blocks.js","../../../node_modules/remarkable/lib/rules_block/table.js","../../../node_modules/remarkable/lib/rules_block/deflist.js","../../../node_modules/remarkable/lib/rules_block/paragraph.js","../../../node_modules/remarkable/lib/parser_inline.js","../../../node_modules/remarkable/lib/rules_inline/text.js","../../../node_modules/remarkable/lib/rules_inline/newline.js","../../../node_modules/remarkable/lib/rules_inline/escape.js","../../../node_modules/remarkable/lib/rules_inline/backticks.js","../../../node_modules/remarkable/lib/rules_inline/del.js","../../../node_modules/remarkable/lib/rules_inline/ins.js","../../../node_modules/remarkable/lib/rules_inline/mark.js","../../../node_modules/remarkable/lib/rules_inline/emphasis.js","../../../node_modules/remarkable/lib/rules_inline/sub.js","../../../node_modules/remarkable/lib/rules_inline/sup.js","../../../node_modules/remarkable/lib/rules_inline/links.js","../../../node_modules/remarkable/lib/rules_inline/footnote_inline.js","../../../node_modules/remarkable/lib/rules_inline/footnote_ref.js","../../../node_modules/remarkable/lib/rules_inline/autolink.js","../../../node_modules/remarkable/lib/common/url_schemas.js","../../../node_modules/remarkable/lib/rules_inline/htmltag.js","../../../node_modules/remarkable/lib/common/html_re.js","../../../node_modules/remarkable/lib/rules_inline/entity.js","../../../node_modules/remarkable/lib/configs/default.js","../../../node_modules/remarkable/lib/configs/full.js","../../../node_modules/remarkable/lib/configs/commonmark.js","../../../node_modules/remarkable/lib/common/utils.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/remarkable/lib/ruler.js","../../../node_modules/remarkable/lib/helpers/parse_link_label.js"],"names":["__webpack_require__","d","__webpack_exports__","_objectWithoutProperties","_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","StateInline","src","parserInline","options","env","outTokens","this","parser","tokens","pos","posMax","level","pending","pendingLevel","cache","isInLabel","linkLevel","linkContent","labelUnmatchedScopes","pushPending","push","type","content","token","cacheSet","val","cacheGet","module","exports","Aacute","aacute","Abreve","abreve","ac","acd","acE","Acirc","acirc","acute","Acy","acy","AElig","aelig","af","Afr","afr","Agrave","agrave","alefsym","aleph","Alpha","alpha","Amacr","amacr","amalg","AMP","amp","And","and","andand","andd","andslope","andv","ang","ange","angle","angmsd","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","Aogon","aogon","Aopf","aopf","ap","apacir","apE","ape","apid","apos","ApplyFunction","approx","approxeq","Aring","aring","Ascr","ascr","Assign","ast","asymp","asympeq","Atilde","atilde","Auml","auml","awconint","awint","backcong","backepsilon","backprime","backsim","backsimeq","Backslash","Barv","barvee","Barwed","barwed","barwedge","bbrk","bbrktbrk","bcong","Bcy","bcy","bdquo","becaus","Because","because","bemptyv","bepsi","bernou","Bernoullis","Beta","beta","beth","between","Bfr","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block","bne","bnequiv","bNot","bnot","Bopf","bopf","bot","bottom","bowtie","boxbox","boxDL","boxDl","boxdL","boxdl","boxDR","boxDr","boxdR","boxdr","boxH","boxh","boxHD","boxHd","boxhD","boxhd","boxHU","boxHu","boxhU","boxhu","boxminus","boxplus","boxtimes","boxUL","boxUl","boxuL","boxul","boxUR","boxUr","boxuR","boxur","boxV","boxv","boxVH","boxVh","boxvH","boxvh","boxVL","boxVl","boxvL","boxvl","boxVR","boxVr","boxvR","boxvr","bprime","Breve","breve","brvbar","Bscr","bscr","bsemi","bsim","bsime","bsol","bsolb","bsolhsub","bull","bullet","bump","bumpE","bumpe","Bumpeq","bumpeq","Cacute","cacute","Cap","cap","capand","capbrcup","capcap","capcup","capdot","CapitalDifferentialD","caps","caret","caron","Cayleys","ccaps","Ccaron","ccaron","Ccedil","ccedil","Ccirc","ccirc","Cconint","ccups","ccupssm","Cdot","cdot","cedil","Cedilla","cemptyv","cent","CenterDot","centerdot","Cfr","cfr","CHcy","chcy","check","checkmark","Chi","chi","cir","circ","circeq","circlearrowleft","circlearrowright","circledast","circledcirc","circleddash","CircleDot","circledR","circledS","CircleMinus","CirclePlus","CircleTimes","cirE","cire","cirfnint","cirmid","cirscir","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","clubs","clubsuit","Colon","colon","Colone","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","Congruent","Conint","conint","ContourIntegral","Copf","copf","coprod","Coproduct","COPY","copy","copysr","CounterClockwiseContourIntegral","crarr","Cross","cross","Cscr","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","Cup","cup","cupbrcap","CupCap","cupcap","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","Dagger","dagger","daleth","Darr","dArr","darr","dash","Dashv","dashv","dbkarow","dblac","Dcaron","dcaron","Dcy","dcy","DD","dd","ddagger","ddarr","DDotrahd","ddotseq","deg","Del","Delta","delta","demptyv","dfisht","Dfr","dfr","dHar","dharl","dharr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","diam","Diamond","diamond","diamondsuit","diams","die","DifferentialD","digamma","disin","div","divide","divideontimes","divonx","DJcy","djcy","dlcorn","dlcrop","dollar","Dopf","dopf","Dot","dot","DotDot","doteq","doteqdot","DotEqual","dotminus","dotplus","dotsquare","doublebarwedge","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrow","Downarrow","downarrow","DownArrowBar","DownArrowUpArrow","DownBreve","downdownarrows","downharpoonleft","downharpoonright","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownLeftVectorBar","DownRightTeeVector","DownRightVector","DownRightVectorBar","DownTee","DownTeeArrow","drbkarow","drcorn","drcrop","Dscr","dscr","DScy","dscy","dsol","Dstrok","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","DZcy","dzcy","dzigrarr","Eacute","eacute","easter","Ecaron","ecaron","ecir","Ecirc","ecirc","ecolon","Ecy","ecy","eDDot","Edot","eDot","edot","ee","efDot","Efr","efr","eg","Egrave","egrave","egs","egsdot","el","Element","elinters","ell","els","elsdot","Emacr","emacr","empty","emptyset","EmptySmallSquare","emptyv","EmptyVerySmallSquare","emsp","emsp13","emsp14","ENG","eng","ensp","Eogon","eogon","Eopf","eopf","epar","eparsl","eplus","epsi","Epsilon","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","Equal","equals","EqualTilde","equest","Equilibrium","equiv","equivDD","eqvparsl","erarr","erDot","Escr","escr","esdot","Esim","esim","Eta","eta","ETH","eth","Euml","euml","euro","excl","exist","Exists","expectation","ExponentialE","exponentiale","fallingdotseq","Fcy","fcy","female","ffilig","fflig","ffllig","Ffr","ffr","filig","FilledSmallSquare","FilledVerySmallSquare","fjlig","flat","fllig","fltns","fnof","Fopf","fopf","ForAll","forall","fork","forkv","Fouriertrf","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","Fscr","fscr","gacute","Gamma","gamma","Gammad","gammad","gap","Gbreve","gbreve","Gcedil","Gcirc","gcirc","Gcy","gcy","Gdot","gdot","gE","ge","gEl","gel","geq","geqq","geqslant","ges","gescc","gesdot","gesdoto","gesdotol","gesl","gesles","Gfr","gfr","Gg","gg","ggg","gimel","GJcy","gjcy","gl","gla","glE","glj","gnap","gnapprox","gnE","gne","gneq","gneqq","gnsim","Gopf","gopf","grave","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","gscr","gsim","gsime","gsiml","GT","Gt","gt","gtcc","gtcir","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","Hacek","hairsp","half","hamilt","HARDcy","hardcy","hArr","harr","harrcir","harrw","Hat","hbar","Hcirc","hcirc","hearts","heartsuit","hellip","hercon","Hfr","hfr","HilbertSpace","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","Hopf","hopf","horbar","HorizontalLine","Hscr","hscr","hslash","Hstrok","hstrok","HumpDownHump","HumpEqual","hybull","hyphen","Iacute","iacute","ic","Icirc","icirc","Icy","icy","Idot","IEcy","iecy","iexcl","iff","Ifr","ifr","Igrave","igrave","ii","iiiint","iiint","iinfin","iiota","IJlig","ijlig","Im","Imacr","imacr","image","ImaginaryI","imagline","imagpart","imath","imof","imped","Implies","in","incare","infin","infintie","inodot","Int","int","intcal","integers","Integral","intercal","Intersection","intlarhk","intprod","InvisibleComma","InvisibleTimes","IOcy","iocy","Iogon","iogon","Iopf","iopf","Iota","iota","iprod","iquest","Iscr","iscr","isin","isindot","isinE","isins","isinsv","isinv","it","Itilde","itilde","Iukcy","iukcy","Iuml","iuml","Jcirc","jcirc","Jcy","jcy","Jfr","jfr","jmath","Jopf","jopf","Jscr","jscr","Jsercy","jsercy","Jukcy","jukcy","Kappa","kappa","kappav","Kcedil","kcedil","Kcy","kcy","Kfr","kfr","kgreen","KHcy","khcy","KJcy","kjcy","Kopf","kopf","Kscr","kscr","lAarr","Lacute","lacute","laemptyv","lagran","Lambda","lambda","Lang","lang","langd","langle","lap","Laplacetrf","laquo","Larr","lArr","larr","larrb","larrbfs","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","lat","lAtail","latail","late","lates","lBarr","lbarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","Lcaron","lcaron","Lcedil","lcedil","lceil","lcub","Lcy","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","lE","le","LeftAngleBracket","LeftArrow","Leftarrow","leftarrow","LeftArrowBar","LeftArrowRightArrow","leftarrowtail","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVector","LeftDownVectorBar","LeftFloor","leftharpoondown","leftharpoonup","leftleftarrows","LeftRightArrow","Leftrightarrow","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","LeftRightVector","LeftTee","LeftTeeArrow","LeftTeeVector","leftthreetimes","LeftTriangle","LeftTriangleBar","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftUpVectorBar","LeftVector","LeftVectorBar","lEg","leg","leq","leqq","leqslant","les","lescc","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","LessEqualGreater","LessFullEqual","LessGreater","lessgtr","LessLess","lesssim","LessSlantEqual","LessTilde","lfisht","lfloor","Lfr","lfr","lg","lgE","lHar","lhard","lharu","lharul","lhblk","LJcy","ljcy","Ll","ll","llarr","llcorner","Lleftarrow","llhard","lltri","Lmidot","lmidot","lmoust","lmoustache","lnap","lnapprox","lnE","lne","lneq","lneqq","lnsim","loang","loarr","lobrk","LongLeftArrow","Longleftarrow","longleftarrow","LongLeftRightArrow","Longleftrightarrow","longleftrightarrow","longmapsto","LongRightArrow","Longrightarrow","longrightarrow","looparrowleft","looparrowright","lopar","Lopf","lopf","loplus","lotimes","lowast","lowbar","LowerLeftArrow","LowerRightArrow","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","Lscr","lscr","Lsh","lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","Lstrok","lstrok","LT","Lt","lt","ltcc","ltcir","ltdot","lthree","ltimes","ltlarr","ltquest","ltri","ltrie","ltrif","ltrPar","lurdshar","luruhar","lvertneqq","lvnE","macr","male","malt","maltese","Map","map","mapsto","mapstodown","mapstoleft","mapstoup","marker","mcomma","Mcy","mcy","mdash","mDDot","measuredangle","MediumSpace","Mellintrf","Mfr","mfr","mho","micro","mid","midast","midcir","middot","minus","minusb","minusd","minusdu","MinusPlus","mlcp","mldr","mnplus","models","Mopf","mopf","mp","Mscr","mscr","mstpos","Mu","mu","multimap","mumap","nabla","Nacute","nacute","nang","nap","napE","napid","napos","napprox","natur","natural","naturals","nbsp","nbump","nbumpe","ncap","Ncaron","ncaron","Ncedil","ncedil","ncong","ncongdot","ncup","Ncy","ncy","ndash","ne","nearhk","neArr","nearr","nearrow","nedot","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","nequiv","nesear","nesim","NestedGreaterGreater","NestedLessLess","NewLine","nexist","nexists","Nfr","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","nGg","ngsim","nGt","ngt","ngtr","nGtv","nhArr","nharr","nhpar","ni","nis","nisd","niv","NJcy","njcy","nlArr","nlarr","nldr","nlE","nle","nLeftarrow","nleftarrow","nLeftrightarrow","nleftrightarrow","nleq","nleqq","nleqslant","nles","nless","nLl","nlsim","nLt","nlt","nltri","nltrie","nLtv","nmid","NoBreak","NonBreakingSpace","Nopf","nopf","Not","not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","notin","notindot","notinE","notinva","notinvb","notinvc","NotLeftTriangle","NotLeftTriangleBar","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","notni","notniva","notnivb","notnivc","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangle","NotRightTriangleBar","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","npar","nparallel","nparsl","npart","npolint","npr","nprcue","npre","nprec","npreceq","nrArr","nrarr","nrarrc","nrarrw","nRightarrow","nrightarrow","nrtri","nrtrie","nsc","nsccue","nsce","Nscr","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","Ntilde","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","Nu","nu","num","numero","numsp","nvap","nVDash","nVdash","nvDash","nvdash","nvge","nvgt","nvHarr","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwarhk","nwArr","nwarr","nwarrow","nwnear","Oacute","oacute","oast","ocir","Ocirc","ocirc","Ocy","ocy","odash","Odblac","odblac","odiv","odot","odsold","OElig","oelig","ofcir","Ofr","ofr","ogon","Ograve","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","Omacr","omacr","Omega","omega","Omicron","omicron","omid","ominus","Oopf","oopf","opar","OpenCurlyDoubleQuote","OpenCurlyQuote","operp","oplus","Or","or","orarr","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv","oS","Oscr","oscr","Oslash","oslash","osol","Otilde","otilde","Otimes","otimes","otimesas","Ouml","ouml","ovbar","OverBar","OverBrace","OverBracket","OverParenthesis","par","para","parallel","parsim","parsl","part","PartialD","Pcy","pcy","percnt","period","permil","perp","pertenk","Pfr","pfr","Phi","phi","phiv","phmmat","phone","Pi","pi","pitchfork","piv","planck","planckh","plankv","plus","plusacir","plusb","pluscir","plusdo","plusdu","pluse","PlusMinus","plusmn","plussim","plustwo","pm","Poincareplane","pointint","Popf","popf","pound","Pr","pr","prap","prcue","prE","pre","prec","precapprox","preccurlyeq","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","preceq","precnapprox","precneqq","precnsim","precsim","Prime","prime","primes","prnap","prnE","prnsim","prod","Product","profalar","profline","profsurf","prop","Proportion","Proportional","propto","prsim","prurel","Pscr","pscr","Psi","psi","puncsp","Qfr","qfr","qint","Qopf","qopf","qprime","Qscr","qscr","quaternions","quatint","quest","questeq","QUOT","quot","rAarr","race","Racute","racute","radic","raemptyv","Rang","rang","rangd","range","rangle","raquo","Rarr","rArr","rarr","rarrap","rarrb","rarrbfs","rarrc","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","Rarrtl","rarrtl","rarrw","rAtail","ratail","ratio","rationals","RBarr","rBarr","rbarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","Rcaron","rcaron","Rcedil","rcedil","rceil","rcub","Rcy","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","Re","real","realine","realpart","reals","rect","REG","reg","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","rfisht","rfloor","Rfr","rfr","rHar","rhard","rharu","rharul","Rho","rho","rhov","RightAngleBracket","RightArrow","Rightarrow","rightarrow","RightArrowBar","RightArrowLeftArrow","rightarrowtail","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVector","RightDownVectorBar","RightFloor","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","RightTee","RightTeeArrow","RightTeeVector","rightthreetimes","RightTriangle","RightTriangleBar","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVector","RightUpVectorBar","RightVector","RightVectorBar","ring","risingdotseq","rlarr","rlhar","rlm","rmoust","rmoustache","rnmid","roang","roarr","robrk","ropar","Ropf","ropf","roplus","rotimes","RoundImplies","rpar","rpargt","rppolint","rrarr","Rrightarrow","rsaquo","Rscr","rscr","Rsh","rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","RuleDelayed","ruluhar","rx","Sacute","sacute","sbquo","Sc","sc","scap","Scaron","scaron","sccue","scE","sce","Scedil","scedil","Scirc","scirc","scnap","scnE","scnsim","scpolint","scsim","Scy","scy","sdot","sdotb","sdote","searhk","seArr","searr","searrow","sect","semi","seswar","setminus","setmn","sext","Sfr","sfr","sfrown","sharp","SHCHcy","shchcy","SHcy","shcy","ShortDownArrow","ShortLeftArrow","shortmid","shortparallel","ShortRightArrow","ShortUpArrow","shy","Sigma","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","SmallCircle","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","SOFTcy","softcy","sol","solb","solbar","Sopf","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","Sqrt","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","squ","Square","square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","squarf","squf","srarr","Sscr","sscr","ssetmn","ssmile","sstarf","Star","star","starf","straightepsilon","straightphi","strns","Sub","sub","subdot","subE","sube","subedot","submult","subnE","subne","subplus","subrarr","Subset","subset","subseteq","subseteqq","SubsetEqual","subsetneq","subsetneqq","subsim","subsub","subsup","succ","succapprox","succcurlyeq","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","succeq","succnapprox","succneqq","succnsim","succsim","SuchThat","Sum","sum","sung","Sup","sup","sup1","sup2","sup3","supdot","supdsub","supE","supe","supedot","Superset","SupersetEqual","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","Supset","supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swarhk","swArr","swarr","swarrow","swnwar","szlig","Tab","Tau","tau","tbrk","Tcaron","tcaron","Tcedil","tcedil","Tcy","tcy","tdot","telrec","Tfr","tfr","there4","Therefore","therefore","Theta","theta","thetasym","thetav","thickapprox","thicksim","ThickSpace","thinsp","ThinSpace","thkap","thksim","THORN","thorn","Tilde","tilde","TildeEqual","TildeFullEqual","TildeTilde","times","timesb","timesbar","timesd","tint","toea","top","topbot","topcir","Topf","topf","topfork","tosa","tprime","TRADE","trade","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","TripleDot","triplus","trisb","tritime","trpezium","Tscr","tscr","TScy","tscy","TSHcy","tshcy","Tstrok","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","Uacute","uacute","Uarr","uArr","uarr","Uarrocir","Ubrcy","ubrcy","Ubreve","ubreve","Ucirc","ucirc","Ucy","ucy","udarr","Udblac","udblac","udhar","ufisht","Ufr","ufr","Ugrave","ugrave","uHar","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","Umacr","umacr","uml","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","uogon","Uopf","uopf","UpArrow","Uparrow","uparrow","UpArrowBar","UpArrowDownArrow","UpDownArrow","Updownarrow","updownarrow","UpEquilibrium","upharpoonleft","upharpoonright","uplus","UpperLeftArrow","UpperRightArrow","Upsi","upsi","upsih","Upsilon","upsilon","UpTee","UpTeeArrow","upuparrows","urcorn","urcorner","urcrop","Uring","uring","urtri","Uscr","uscr","utdot","Utilde","utilde","utri","utrif","uuarr","Uuml","uuml","uwangle","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","vArr","varr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","Vbar","vBar","vBarv","Vcy","vcy","VDash","Vdash","vDash","vdash","Vdashl","Vee","vee","veebar","veeeq","vellip","Verbar","verbar","Vert","vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","vfr","vltri","vnsub","vnsup","Vopf","vopf","vprop","vrtri","Vscr","vscr","vsubnE","vsubne","vsupnE","vsupne","Vvdash","vzigzag","Wcirc","wcirc","wedbar","Wedge","wedge","wedgeq","weierp","Wfr","wfr","Wopf","wopf","wp","wr","wreath","Wscr","wscr","xcap","xcirc","xcup","xdtri","Xfr","xfr","xhArr","xharr","Xi","xi","xlArr","xlarr","xmap","xnis","xodot","Xopf","xopf","xoplus","xotime","xrArr","xrarr","Xscr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","Yacute","yacute","YAcy","yacy","Ycirc","ycirc","Ycy","ycy","yen","Yfr","yfr","YIcy","yicy","Yopf","yopf","Yscr","yscr","YUcy","yucy","Yuml","yuml","Zacute","zacute","Zcaron","zcaron","Zcy","zcy","Zdot","zdot","zeetrf","ZeroWidthSpace","Zeta","zeta","Zfr","zfr","ZHcy","zhcy","zigrarr","Zopf","zopf","Zscr","zscr","zwj","zwnj","normalizeLink","unescapeMd","state","code","link","start","max","charCodeAt","slice","validateLink","replaceEntities","url","normalized","decodeURI","err","encodeURI","str","trim","replace","toUpperCase","defineProperty","value","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","parent","getPrototypeOf","_interopRequireDefault","obj","__esModule","default","_react2","_remarkable2","Remarkable","_React$Component","instance","TypeError","_classCallCheck","apply","arguments","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_inherits","Component","Container","container","createElement","nextProps","nextState","md","_this","dangerouslySetInnerHTML","__html","renderMarkdown","Children","children","child","render","defaultProps","assign","Renderer","ParserCore","ParserBlock","ParserInline","Ruler","config","full","commonmark","StateCore","inlineMode","inline","renderer","typographer","preset","core","ruler","configure","set","presets","self","Error","components","keys","forEach","name","rules","enable","use","plugin","parse","process","parseInline","renderInline","utils","getBreak","_rules","len","result","has","escapeHtml","blockquote_open","blockquote_close","idx","fence","fences","fenceName","langClass","langPrefix","params","split","join","fence_custom","highlight","concat","heading_open","hLevel","heading_close","hr","xhtmlOut","bullet_list_open","bullet_list_close","list_item_open","list_item_close","ordered_list_open","ordered_list_close","paragraph_open","tight","paragraph_close","addBreak","link_open","title","linkTarget","href","link_close","alt","table_open","table_close","thead_open","thead_close","tbody_open","tbody_close","tr_open","tr_close","th_open","align","th_close","td_open","td_close","strong_open","strong_close","em_open","em_close","del_open","del_close","ins_open","ins_close","mark_open","mark_close","hardbreak","softbreak","breaks","text","htmlblock","htmltag","abbr_open","abbr_close","footnote_ref","n","Number","id","toString","subId","footnote_block_open","footnote_block_close","footnote_open","footnote_close","footnote_anchor","dl_open","dt_open","dd_open","dl_close","dt_close","dd_close","nextToken","Core","l","getRules","lines","parseLinkLabel","parseAbbr","labelEnd","label","abbreviations","parseLinkDestination","parseLinkTitle","normalizeReference","parseReference","references","tok","j","t","lastParagraph","list","current","currentLabel","insideRef","refTokens","footnotes","filter","pop","count","regEscape","s","nodes","m","regText","blockTokens","abbrRegExp","x","substr","sort","a","b","RegExp","lastIndex","exec","index","RARE_RE","SCOPED_ABBR_RE","SCOPED_ABBR","c","r","p","tm","inlineTokens","blkIdx","match","toLowerCase","test","QUOTE_TEST_RE","QUOTE_RE","PUNCT_RE","isLetter","replaceAt","ch","thisLevel","lastSpace","nextSpace","item","canOpen","canClose","isSingle","stack","OUTER","single","quotes","Autolinker","LINK_SCAN_RE","isLinkClose","createLinkifier","links","autolinker","stripPrefix","email","twitter","replaceFn","linker","getType","matchedText","getUrl","getEmail","ln","htmlLinkLevel","linkifier","linkify","__WEBPACK_AMD_DEFINE_RESULT__","root","cfg","Util","urls","newWindow","truncate","className","htmlParser","matchParser","tagBuilder","textOrHtml","htmlNodes","getHtmlParser","anchorTagStackCount","resultHtml","node","nodeType","nodeText","getText","getTagName","isClosing","Math","linkifiedStr","linkifyStr","getMatchParser","createMatchReturnVal","replaceFnResult","getMatchedText","HtmlTag","getTagBuilder","build","HtmlParser","MatchParser","AnchorTagBuilder","abstractMethod","dest","hasOwnProperty","extend","superclass","subclass","superclassProto","F","subclassProto","ellipsis","truncateLen","ellipsisChars","substring","arr","element","Array","splitAndCapture","splitRegex","global","lastIdx","whitespaceRegex","innerHtml","innerHTML","setTagName","tagName","setAttr","attrName","attrValue","getAttrs","getAttr","setAttrs","attrs","tagAttrs","setClass","cssClass","addClass","newClass","classAttr","getClass","classes","newClasses","shift","removeClass","removeClasses","splice","hasClass","setInnerHtml","html","getInnerHtml","attrsStr","buildAttrsStr","attrsArr","createAttrs","getAnchorHref","processAnchorText","getAnchorText","matchType","anchorHref","createCssClass","anchorText","doTruncate","POSITIVE_INFINITY","htmlRegex","attrValueRegex","nameEqualsValueRegex","htmlCharacterEntitiesRegex","currentResult","textAndEntityNodes","tagText","isClosingTag","inBetweenTagsText","parseTextAndEntityNodes","createElementNode","textAndEntityTokens","textToken","entityToken","createTextNode","createEntityNode","ElementNode","closing","EntityNode","TextNode","HtmlNode","matcherRegex","domainNameRegex","tldRegex","charBeforeProtocolRelMatchRegex","matchValidator","MatchValidator","contextObj","me","matchStr","$1","$2","$3","$4","$5","$6","$7","$8","matchDescObj","processCandidateMatch","replaceStr","prefixStr","suffixStr","twitterMatch","twitterHandlePrefixWhitespaceChar","twitterHandle","emailAddressMatch","urlMatch","protocolUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","protocolRelativeMatch","isValidMatch","matchHasUnbalancedClosingParen","Email","Twitter","charBeforeMatch","Url","charAt","openParensMatch","closeParensMatch","invalidProtocolRelMatchRegex","hasFullProtocolRegex","uriSchemeRegex","hasWordCharAfterProtocolRegex","isValidUriScheme","urlMatchDoesNotHaveProtocolOrDot","urlMatchDoesNotHaveAtLeastOneWordChar","isInvalidProtocolRelativeMatch","uriSchemeMatch","uriScheme","Match","getTwitterHandle","urlPrefixRegex","protocolRelativeRegex","protocolPrepended","stripProtocolRelativePrefix","stripUrlPrefix","removeTrailingSlash","factory","StateBlock","tokenize","startLine","endLine","line","hasEmptyLines","skipEmptyLines","tShift","blkIndent","isEmpty","parentType","TABS_SCAN_RE","NEWLINES_RE","SPACES_RE","lineStart","lastTabPos","offset","lineMax","indent","indent_found","bMarks","eMarks","ddIndent","from","skipSpaces","skipChars","skipCharsBack","min","getLines","begin","end","keepLastLF","first","last","queue","nextLine","silent","mem","haveEndMarker","lastLineEmpty","oldTShift","oldBMarks","oldIndent","oldParentType","terminatorRules","terminate","maxNesting","cnt","skipBulletListMarker","skipOrderedListMarker","oldTight","posAfterMarker","indentAfterMarker","markerValue","markerCharCode","isOrdered","contentStart","listTokIdx","prevEmptyEnd","listLines","itemLines","markTightParagraphs","oldBMark","refs","tmp","next","block_names","HTML_TAG_OPEN_RE","HTML_TAG_CLOSE_RE","lc","html_blocks","getLine","lineText","rows","cell","aligns","tableLines","tbodyLines","skipMarker","ddLine","dtLine","oldDDIndent","skipToken","cached_pos","ok","isTerminatorChar","pmax","ESCAPED","matchStart","matchEnd","found","lastChar","nextChar","isAlphaNum","scanDelims","can_open","can_close","delims","startCount","oldCount","newCount","res","UNESCAPE_RE","labelStart","ref","isImage","oldPos","footnoteId","oldLength","footnoteSubId","url_schemas","EMAIL_RE","AUTOLINK_RE","tail","linkMatch","emailMatch","fullUrl","HTML_TAG_RE","regex","attr_value","attribute","open_tag","entities","isValidEntityCode","fromCodePoint","DIGITAL_RE","NAMED_RE","parseInt","hasOwn","UNESCAPE_MD_RE","surrogate1","surrogate2","String","fromCharCode","NAMED_ENTITY_RE","DIGITAL_ENTITY_TEST_RE","replaceEntityPattern","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","&","<",">","\"","replaceUnsafeChar","isString","typeOf","_objectWithoutPropertiesLoose","sourceKeys","__rules__","__cache__","__find__","__compile__","chains","rule","enabled","altName","chain","fn","at","opt","before","beforeName","ruleName","after","afterName","strict","isArray","disable","chainName","oldFlag"],"mappings":"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","file":"static/js/10.b1fd9a8e.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","// Inline parser state\n'use strict';\n\nfunction StateInline(src, parserInline, options, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.options = options;\n  this.parser = parserInline;\n  this.tokens = outTokens;\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n  this.cache = []; // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  // Link parser state vars\n\n  this.isInLabel = false; // Set true when seek link label - we should disable\n  // \"paired\" rules (emphasis, strikes) to not skip\n  // tailing `]`\n\n  this.linkLevel = 0; // Increment for each nesting link. Used to prevent\n  // nesting in definitions\n\n  this.linkContent = ''; // Temporary storage for link url\n\n  this.labelUnmatchedScopes = 0; // Track unpaired `[` for link labels\n  // (backtrack optimization)\n} // Flush pending text\n//\n\n\nStateInline.prototype.pushPending = function () {\n  this.tokens.push({\n    type: 'text',\n    content: this.pending,\n    level: this.pendingLevel\n  });\n  this.pending = '';\n}; // Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\n\n\nStateInline.prototype.push = function (token) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  this.tokens.push(token);\n  this.pendingLevel = this.level;\n}; // Store value to cache.\n// !!! Implementation has parser-specific optimizations\n// !!! keys MUST be integer, >= 0; values MUST be integer, > 0\n//\n\n\nStateInline.prototype.cacheSet = function (key, val) {\n  for (var i = this.cache.length; i <= key; i++) {\n    this.cache.push(0);\n  }\n\n  this.cache[key] = val;\n}; // Get cache value\n//\n\n\nStateInline.prototype.cacheGet = function (key) {\n  return key < this.cache.length ? this.cache[key] : 0;\n};\n\nmodule.exports = StateInline;","// List of valid entities\n//\n// Generate with ./support/entities.js script\n//\n'use strict';\n/*eslint quotes:0*/\n\nmodule.exports = {\n  \"Aacute\": \"\\xC1\",\n  \"aacute\": \"\\xE1\",\n  \"Abreve\": \"\\u0102\",\n  \"abreve\": \"\\u0103\",\n  \"ac\": \"\\u223E\",\n  \"acd\": \"\\u223F\",\n  \"acE\": \"\\u223E\\u0333\",\n  \"Acirc\": \"\\xC2\",\n  \"acirc\": \"\\xE2\",\n  \"acute\": \"\\xB4\",\n  \"Acy\": \"\\u0410\",\n  \"acy\": \"\\u0430\",\n  \"AElig\": \"\\xC6\",\n  \"aelig\": \"\\xE6\",\n  \"af\": \"\\u2061\",\n  \"Afr\": \"\\uD835\\uDD04\",\n  \"afr\": \"\\uD835\\uDD1E\",\n  \"Agrave\": \"\\xC0\",\n  \"agrave\": \"\\xE0\",\n  \"alefsym\": \"\\u2135\",\n  \"aleph\": \"\\u2135\",\n  \"Alpha\": \"\\u0391\",\n  \"alpha\": \"\\u03B1\",\n  \"Amacr\": \"\\u0100\",\n  \"amacr\": \"\\u0101\",\n  \"amalg\": \"\\u2A3F\",\n  \"AMP\": \"&\",\n  \"amp\": \"&\",\n  \"And\": \"\\u2A53\",\n  \"and\": \"\\u2227\",\n  \"andand\": \"\\u2A55\",\n  \"andd\": \"\\u2A5C\",\n  \"andslope\": \"\\u2A58\",\n  \"andv\": \"\\u2A5A\",\n  \"ang\": \"\\u2220\",\n  \"ange\": \"\\u29A4\",\n  \"angle\": \"\\u2220\",\n  \"angmsd\": \"\\u2221\",\n  \"angmsdaa\": \"\\u29A8\",\n  \"angmsdab\": \"\\u29A9\",\n  \"angmsdac\": \"\\u29AA\",\n  \"angmsdad\": \"\\u29AB\",\n  \"angmsdae\": \"\\u29AC\",\n  \"angmsdaf\": \"\\u29AD\",\n  \"angmsdag\": \"\\u29AE\",\n  \"angmsdah\": \"\\u29AF\",\n  \"angrt\": \"\\u221F\",\n  \"angrtvb\": \"\\u22BE\",\n  \"angrtvbd\": \"\\u299D\",\n  \"angsph\": \"\\u2222\",\n  \"angst\": \"\\xC5\",\n  \"angzarr\": \"\\u237C\",\n  \"Aogon\": \"\\u0104\",\n  \"aogon\": \"\\u0105\",\n  \"Aopf\": \"\\uD835\\uDD38\",\n  \"aopf\": \"\\uD835\\uDD52\",\n  \"ap\": \"\\u2248\",\n  \"apacir\": \"\\u2A6F\",\n  \"apE\": \"\\u2A70\",\n  \"ape\": \"\\u224A\",\n  \"apid\": \"\\u224B\",\n  \"apos\": \"'\",\n  \"ApplyFunction\": \"\\u2061\",\n  \"approx\": \"\\u2248\",\n  \"approxeq\": \"\\u224A\",\n  \"Aring\": \"\\xC5\",\n  \"aring\": \"\\xE5\",\n  \"Ascr\": \"\\uD835\\uDC9C\",\n  \"ascr\": \"\\uD835\\uDCB6\",\n  \"Assign\": \"\\u2254\",\n  \"ast\": \"*\",\n  \"asymp\": \"\\u2248\",\n  \"asympeq\": \"\\u224D\",\n  \"Atilde\": \"\\xC3\",\n  \"atilde\": \"\\xE3\",\n  \"Auml\": \"\\xC4\",\n  \"auml\": \"\\xE4\",\n  \"awconint\": \"\\u2233\",\n  \"awint\": \"\\u2A11\",\n  \"backcong\": \"\\u224C\",\n  \"backepsilon\": \"\\u03F6\",\n  \"backprime\": \"\\u2035\",\n  \"backsim\": \"\\u223D\",\n  \"backsimeq\": \"\\u22CD\",\n  \"Backslash\": \"\\u2216\",\n  \"Barv\": \"\\u2AE7\",\n  \"barvee\": \"\\u22BD\",\n  \"Barwed\": \"\\u2306\",\n  \"barwed\": \"\\u2305\",\n  \"barwedge\": \"\\u2305\",\n  \"bbrk\": \"\\u23B5\",\n  \"bbrktbrk\": \"\\u23B6\",\n  \"bcong\": \"\\u224C\",\n  \"Bcy\": \"\\u0411\",\n  \"bcy\": \"\\u0431\",\n  \"bdquo\": \"\\u201E\",\n  \"becaus\": \"\\u2235\",\n  \"Because\": \"\\u2235\",\n  \"because\": \"\\u2235\",\n  \"bemptyv\": \"\\u29B0\",\n  \"bepsi\": \"\\u03F6\",\n  \"bernou\": \"\\u212C\",\n  \"Bernoullis\": \"\\u212C\",\n  \"Beta\": \"\\u0392\",\n  \"beta\": \"\\u03B2\",\n  \"beth\": \"\\u2136\",\n  \"between\": \"\\u226C\",\n  \"Bfr\": \"\\uD835\\uDD05\",\n  \"bfr\": \"\\uD835\\uDD1F\",\n  \"bigcap\": \"\\u22C2\",\n  \"bigcirc\": \"\\u25EF\",\n  \"bigcup\": \"\\u22C3\",\n  \"bigodot\": \"\\u2A00\",\n  \"bigoplus\": \"\\u2A01\",\n  \"bigotimes\": \"\\u2A02\",\n  \"bigsqcup\": \"\\u2A06\",\n  \"bigstar\": \"\\u2605\",\n  \"bigtriangledown\": \"\\u25BD\",\n  \"bigtriangleup\": \"\\u25B3\",\n  \"biguplus\": \"\\u2A04\",\n  \"bigvee\": \"\\u22C1\",\n  \"bigwedge\": \"\\u22C0\",\n  \"bkarow\": \"\\u290D\",\n  \"blacklozenge\": \"\\u29EB\",\n  \"blacksquare\": \"\\u25AA\",\n  \"blacktriangle\": \"\\u25B4\",\n  \"blacktriangledown\": \"\\u25BE\",\n  \"blacktriangleleft\": \"\\u25C2\",\n  \"blacktriangleright\": \"\\u25B8\",\n  \"blank\": \"\\u2423\",\n  \"blk12\": \"\\u2592\",\n  \"blk14\": \"\\u2591\",\n  \"blk34\": \"\\u2593\",\n  \"block\": \"\\u2588\",\n  \"bne\": \"=\\u20E5\",\n  \"bnequiv\": \"\\u2261\\u20E5\",\n  \"bNot\": \"\\u2AED\",\n  \"bnot\": \"\\u2310\",\n  \"Bopf\": \"\\uD835\\uDD39\",\n  \"bopf\": \"\\uD835\\uDD53\",\n  \"bot\": \"\\u22A5\",\n  \"bottom\": \"\\u22A5\",\n  \"bowtie\": \"\\u22C8\",\n  \"boxbox\": \"\\u29C9\",\n  \"boxDL\": \"\\u2557\",\n  \"boxDl\": \"\\u2556\",\n  \"boxdL\": \"\\u2555\",\n  \"boxdl\": \"\\u2510\",\n  \"boxDR\": \"\\u2554\",\n  \"boxDr\": \"\\u2553\",\n  \"boxdR\": \"\\u2552\",\n  \"boxdr\": \"\\u250C\",\n  \"boxH\": \"\\u2550\",\n  \"boxh\": \"\\u2500\",\n  \"boxHD\": \"\\u2566\",\n  \"boxHd\": \"\\u2564\",\n  \"boxhD\": \"\\u2565\",\n  \"boxhd\": \"\\u252C\",\n  \"boxHU\": \"\\u2569\",\n  \"boxHu\": \"\\u2567\",\n  \"boxhU\": \"\\u2568\",\n  \"boxhu\": \"\\u2534\",\n  \"boxminus\": \"\\u229F\",\n  \"boxplus\": \"\\u229E\",\n  \"boxtimes\": \"\\u22A0\",\n  \"boxUL\": \"\\u255D\",\n  \"boxUl\": \"\\u255C\",\n  \"boxuL\": \"\\u255B\",\n  \"boxul\": \"\\u2518\",\n  \"boxUR\": \"\\u255A\",\n  \"boxUr\": \"\\u2559\",\n  \"boxuR\": \"\\u2558\",\n  \"boxur\": \"\\u2514\",\n  \"boxV\": \"\\u2551\",\n  \"boxv\": \"\\u2502\",\n  \"boxVH\": \"\\u256C\",\n  \"boxVh\": \"\\u256B\",\n  \"boxvH\": \"\\u256A\",\n  \"boxvh\": \"\\u253C\",\n  \"boxVL\": \"\\u2563\",\n  \"boxVl\": \"\\u2562\",\n  \"boxvL\": \"\\u2561\",\n  \"boxvl\": \"\\u2524\",\n  \"boxVR\": \"\\u2560\",\n  \"boxVr\": \"\\u255F\",\n  \"boxvR\": \"\\u255E\",\n  \"boxvr\": \"\\u251C\",\n  \"bprime\": \"\\u2035\",\n  \"Breve\": \"\\u02D8\",\n  \"breve\": \"\\u02D8\",\n  \"brvbar\": \"\\xA6\",\n  \"Bscr\": \"\\u212C\",\n  \"bscr\": \"\\uD835\\uDCB7\",\n  \"bsemi\": \"\\u204F\",\n  \"bsim\": \"\\u223D\",\n  \"bsime\": \"\\u22CD\",\n  \"bsol\": \"\\\\\",\n  \"bsolb\": \"\\u29C5\",\n  \"bsolhsub\": \"\\u27C8\",\n  \"bull\": \"\\u2022\",\n  \"bullet\": \"\\u2022\",\n  \"bump\": \"\\u224E\",\n  \"bumpE\": \"\\u2AAE\",\n  \"bumpe\": \"\\u224F\",\n  \"Bumpeq\": \"\\u224E\",\n  \"bumpeq\": \"\\u224F\",\n  \"Cacute\": \"\\u0106\",\n  \"cacute\": \"\\u0107\",\n  \"Cap\": \"\\u22D2\",\n  \"cap\": \"\\u2229\",\n  \"capand\": \"\\u2A44\",\n  \"capbrcup\": \"\\u2A49\",\n  \"capcap\": \"\\u2A4B\",\n  \"capcup\": \"\\u2A47\",\n  \"capdot\": \"\\u2A40\",\n  \"CapitalDifferentialD\": \"\\u2145\",\n  \"caps\": \"\\u2229\\uFE00\",\n  \"caret\": \"\\u2041\",\n  \"caron\": \"\\u02C7\",\n  \"Cayleys\": \"\\u212D\",\n  \"ccaps\": \"\\u2A4D\",\n  \"Ccaron\": \"\\u010C\",\n  \"ccaron\": \"\\u010D\",\n  \"Ccedil\": \"\\xC7\",\n  \"ccedil\": \"\\xE7\",\n  \"Ccirc\": \"\\u0108\",\n  \"ccirc\": \"\\u0109\",\n  \"Cconint\": \"\\u2230\",\n  \"ccups\": \"\\u2A4C\",\n  \"ccupssm\": \"\\u2A50\",\n  \"Cdot\": \"\\u010A\",\n  \"cdot\": \"\\u010B\",\n  \"cedil\": \"\\xB8\",\n  \"Cedilla\": \"\\xB8\",\n  \"cemptyv\": \"\\u29B2\",\n  \"cent\": \"\\xA2\",\n  \"CenterDot\": \"\\xB7\",\n  \"centerdot\": \"\\xB7\",\n  \"Cfr\": \"\\u212D\",\n  \"cfr\": \"\\uD835\\uDD20\",\n  \"CHcy\": \"\\u0427\",\n  \"chcy\": \"\\u0447\",\n  \"check\": \"\\u2713\",\n  \"checkmark\": \"\\u2713\",\n  \"Chi\": \"\\u03A7\",\n  \"chi\": \"\\u03C7\",\n  \"cir\": \"\\u25CB\",\n  \"circ\": \"\\u02C6\",\n  \"circeq\": \"\\u2257\",\n  \"circlearrowleft\": \"\\u21BA\",\n  \"circlearrowright\": \"\\u21BB\",\n  \"circledast\": \"\\u229B\",\n  \"circledcirc\": \"\\u229A\",\n  \"circleddash\": \"\\u229D\",\n  \"CircleDot\": \"\\u2299\",\n  \"circledR\": \"\\xAE\",\n  \"circledS\": \"\\u24C8\",\n  \"CircleMinus\": \"\\u2296\",\n  \"CirclePlus\": \"\\u2295\",\n  \"CircleTimes\": \"\\u2297\",\n  \"cirE\": \"\\u29C3\",\n  \"cire\": \"\\u2257\",\n  \"cirfnint\": \"\\u2A10\",\n  \"cirmid\": \"\\u2AEF\",\n  \"cirscir\": \"\\u29C2\",\n  \"ClockwiseContourIntegral\": \"\\u2232\",\n  \"CloseCurlyDoubleQuote\": \"\\u201D\",\n  \"CloseCurlyQuote\": \"\\u2019\",\n  \"clubs\": \"\\u2663\",\n  \"clubsuit\": \"\\u2663\",\n  \"Colon\": \"\\u2237\",\n  \"colon\": \":\",\n  \"Colone\": \"\\u2A74\",\n  \"colone\": \"\\u2254\",\n  \"coloneq\": \"\\u2254\",\n  \"comma\": \",\",\n  \"commat\": \"@\",\n  \"comp\": \"\\u2201\",\n  \"compfn\": \"\\u2218\",\n  \"complement\": \"\\u2201\",\n  \"complexes\": \"\\u2102\",\n  \"cong\": \"\\u2245\",\n  \"congdot\": \"\\u2A6D\",\n  \"Congruent\": \"\\u2261\",\n  \"Conint\": \"\\u222F\",\n  \"conint\": \"\\u222E\",\n  \"ContourIntegral\": \"\\u222E\",\n  \"Copf\": \"\\u2102\",\n  \"copf\": \"\\uD835\\uDD54\",\n  \"coprod\": \"\\u2210\",\n  \"Coproduct\": \"\\u2210\",\n  \"COPY\": \"\\xA9\",\n  \"copy\": \"\\xA9\",\n  \"copysr\": \"\\u2117\",\n  \"CounterClockwiseContourIntegral\": \"\\u2233\",\n  \"crarr\": \"\\u21B5\",\n  \"Cross\": \"\\u2A2F\",\n  \"cross\": \"\\u2717\",\n  \"Cscr\": \"\\uD835\\uDC9E\",\n  \"cscr\": \"\\uD835\\uDCB8\",\n  \"csub\": \"\\u2ACF\",\n  \"csube\": \"\\u2AD1\",\n  \"csup\": \"\\u2AD0\",\n  \"csupe\": \"\\u2AD2\",\n  \"ctdot\": \"\\u22EF\",\n  \"cudarrl\": \"\\u2938\",\n  \"cudarrr\": \"\\u2935\",\n  \"cuepr\": \"\\u22DE\",\n  \"cuesc\": \"\\u22DF\",\n  \"cularr\": \"\\u21B6\",\n  \"cularrp\": \"\\u293D\",\n  \"Cup\": \"\\u22D3\",\n  \"cup\": \"\\u222A\",\n  \"cupbrcap\": \"\\u2A48\",\n  \"CupCap\": \"\\u224D\",\n  \"cupcap\": \"\\u2A46\",\n  \"cupcup\": \"\\u2A4A\",\n  \"cupdot\": \"\\u228D\",\n  \"cupor\": \"\\u2A45\",\n  \"cups\": \"\\u222A\\uFE00\",\n  \"curarr\": \"\\u21B7\",\n  \"curarrm\": \"\\u293C\",\n  \"curlyeqprec\": \"\\u22DE\",\n  \"curlyeqsucc\": \"\\u22DF\",\n  \"curlyvee\": \"\\u22CE\",\n  \"curlywedge\": \"\\u22CF\",\n  \"curren\": \"\\xA4\",\n  \"curvearrowleft\": \"\\u21B6\",\n  \"curvearrowright\": \"\\u21B7\",\n  \"cuvee\": \"\\u22CE\",\n  \"cuwed\": \"\\u22CF\",\n  \"cwconint\": \"\\u2232\",\n  \"cwint\": \"\\u2231\",\n  \"cylcty\": \"\\u232D\",\n  \"Dagger\": \"\\u2021\",\n  \"dagger\": \"\\u2020\",\n  \"daleth\": \"\\u2138\",\n  \"Darr\": \"\\u21A1\",\n  \"dArr\": \"\\u21D3\",\n  \"darr\": \"\\u2193\",\n  \"dash\": \"\\u2010\",\n  \"Dashv\": \"\\u2AE4\",\n  \"dashv\": \"\\u22A3\",\n  \"dbkarow\": \"\\u290F\",\n  \"dblac\": \"\\u02DD\",\n  \"Dcaron\": \"\\u010E\",\n  \"dcaron\": \"\\u010F\",\n  \"Dcy\": \"\\u0414\",\n  \"dcy\": \"\\u0434\",\n  \"DD\": \"\\u2145\",\n  \"dd\": \"\\u2146\",\n  \"ddagger\": \"\\u2021\",\n  \"ddarr\": \"\\u21CA\",\n  \"DDotrahd\": \"\\u2911\",\n  \"ddotseq\": \"\\u2A77\",\n  \"deg\": \"\\xB0\",\n  \"Del\": \"\\u2207\",\n  \"Delta\": \"\\u0394\",\n  \"delta\": \"\\u03B4\",\n  \"demptyv\": \"\\u29B1\",\n  \"dfisht\": \"\\u297F\",\n  \"Dfr\": \"\\uD835\\uDD07\",\n  \"dfr\": \"\\uD835\\uDD21\",\n  \"dHar\": \"\\u2965\",\n  \"dharl\": \"\\u21C3\",\n  \"dharr\": \"\\u21C2\",\n  \"DiacriticalAcute\": \"\\xB4\",\n  \"DiacriticalDot\": \"\\u02D9\",\n  \"DiacriticalDoubleAcute\": \"\\u02DD\",\n  \"DiacriticalGrave\": \"`\",\n  \"DiacriticalTilde\": \"\\u02DC\",\n  \"diam\": \"\\u22C4\",\n  \"Diamond\": \"\\u22C4\",\n  \"diamond\": \"\\u22C4\",\n  \"diamondsuit\": \"\\u2666\",\n  \"diams\": \"\\u2666\",\n  \"die\": \"\\xA8\",\n  \"DifferentialD\": \"\\u2146\",\n  \"digamma\": \"\\u03DD\",\n  \"disin\": \"\\u22F2\",\n  \"div\": \"\\xF7\",\n  \"divide\": \"\\xF7\",\n  \"divideontimes\": \"\\u22C7\",\n  \"divonx\": \"\\u22C7\",\n  \"DJcy\": \"\\u0402\",\n  \"djcy\": \"\\u0452\",\n  \"dlcorn\": \"\\u231E\",\n  \"dlcrop\": \"\\u230D\",\n  \"dollar\": \"$\",\n  \"Dopf\": \"\\uD835\\uDD3B\",\n  \"dopf\": \"\\uD835\\uDD55\",\n  \"Dot\": \"\\xA8\",\n  \"dot\": \"\\u02D9\",\n  \"DotDot\": \"\\u20DC\",\n  \"doteq\": \"\\u2250\",\n  \"doteqdot\": \"\\u2251\",\n  \"DotEqual\": \"\\u2250\",\n  \"dotminus\": \"\\u2238\",\n  \"dotplus\": \"\\u2214\",\n  \"dotsquare\": \"\\u22A1\",\n  \"doublebarwedge\": \"\\u2306\",\n  \"DoubleContourIntegral\": \"\\u222F\",\n  \"DoubleDot\": \"\\xA8\",\n  \"DoubleDownArrow\": \"\\u21D3\",\n  \"DoubleLeftArrow\": \"\\u21D0\",\n  \"DoubleLeftRightArrow\": \"\\u21D4\",\n  \"DoubleLeftTee\": \"\\u2AE4\",\n  \"DoubleLongLeftArrow\": \"\\u27F8\",\n  \"DoubleLongLeftRightArrow\": \"\\u27FA\",\n  \"DoubleLongRightArrow\": \"\\u27F9\",\n  \"DoubleRightArrow\": \"\\u21D2\",\n  \"DoubleRightTee\": \"\\u22A8\",\n  \"DoubleUpArrow\": \"\\u21D1\",\n  \"DoubleUpDownArrow\": \"\\u21D5\",\n  \"DoubleVerticalBar\": \"\\u2225\",\n  \"DownArrow\": \"\\u2193\",\n  \"Downarrow\": \"\\u21D3\",\n  \"downarrow\": \"\\u2193\",\n  \"DownArrowBar\": \"\\u2913\",\n  \"DownArrowUpArrow\": \"\\u21F5\",\n  \"DownBreve\": \"\\u0311\",\n  \"downdownarrows\": \"\\u21CA\",\n  \"downharpoonleft\": \"\\u21C3\",\n  \"downharpoonright\": \"\\u21C2\",\n  \"DownLeftRightVector\": \"\\u2950\",\n  \"DownLeftTeeVector\": \"\\u295E\",\n  \"DownLeftVector\": \"\\u21BD\",\n  \"DownLeftVectorBar\": \"\\u2956\",\n  \"DownRightTeeVector\": \"\\u295F\",\n  \"DownRightVector\": \"\\u21C1\",\n  \"DownRightVectorBar\": \"\\u2957\",\n  \"DownTee\": \"\\u22A4\",\n  \"DownTeeArrow\": \"\\u21A7\",\n  \"drbkarow\": \"\\u2910\",\n  \"drcorn\": \"\\u231F\",\n  \"drcrop\": \"\\u230C\",\n  \"Dscr\": \"\\uD835\\uDC9F\",\n  \"dscr\": \"\\uD835\\uDCB9\",\n  \"DScy\": \"\\u0405\",\n  \"dscy\": \"\\u0455\",\n  \"dsol\": \"\\u29F6\",\n  \"Dstrok\": \"\\u0110\",\n  \"dstrok\": \"\\u0111\",\n  \"dtdot\": \"\\u22F1\",\n  \"dtri\": \"\\u25BF\",\n  \"dtrif\": \"\\u25BE\",\n  \"duarr\": \"\\u21F5\",\n  \"duhar\": \"\\u296F\",\n  \"dwangle\": \"\\u29A6\",\n  \"DZcy\": \"\\u040F\",\n  \"dzcy\": \"\\u045F\",\n  \"dzigrarr\": \"\\u27FF\",\n  \"Eacute\": \"\\xC9\",\n  \"eacute\": \"\\xE9\",\n  \"easter\": \"\\u2A6E\",\n  \"Ecaron\": \"\\u011A\",\n  \"ecaron\": \"\\u011B\",\n  \"ecir\": \"\\u2256\",\n  \"Ecirc\": \"\\xCA\",\n  \"ecirc\": \"\\xEA\",\n  \"ecolon\": \"\\u2255\",\n  \"Ecy\": \"\\u042D\",\n  \"ecy\": \"\\u044D\",\n  \"eDDot\": \"\\u2A77\",\n  \"Edot\": \"\\u0116\",\n  \"eDot\": \"\\u2251\",\n  \"edot\": \"\\u0117\",\n  \"ee\": \"\\u2147\",\n  \"efDot\": \"\\u2252\",\n  \"Efr\": \"\\uD835\\uDD08\",\n  \"efr\": \"\\uD835\\uDD22\",\n  \"eg\": \"\\u2A9A\",\n  \"Egrave\": \"\\xC8\",\n  \"egrave\": \"\\xE8\",\n  \"egs\": \"\\u2A96\",\n  \"egsdot\": \"\\u2A98\",\n  \"el\": \"\\u2A99\",\n  \"Element\": \"\\u2208\",\n  \"elinters\": \"\\u23E7\",\n  \"ell\": \"\\u2113\",\n  \"els\": \"\\u2A95\",\n  \"elsdot\": \"\\u2A97\",\n  \"Emacr\": \"\\u0112\",\n  \"emacr\": \"\\u0113\",\n  \"empty\": \"\\u2205\",\n  \"emptyset\": \"\\u2205\",\n  \"EmptySmallSquare\": \"\\u25FB\",\n  \"emptyv\": \"\\u2205\",\n  \"EmptyVerySmallSquare\": \"\\u25AB\",\n  \"emsp\": \"\\u2003\",\n  \"emsp13\": \"\\u2004\",\n  \"emsp14\": \"\\u2005\",\n  \"ENG\": \"\\u014A\",\n  \"eng\": \"\\u014B\",\n  \"ensp\": \"\\u2002\",\n  \"Eogon\": \"\\u0118\",\n  \"eogon\": \"\\u0119\",\n  \"Eopf\": \"\\uD835\\uDD3C\",\n  \"eopf\": \"\\uD835\\uDD56\",\n  \"epar\": \"\\u22D5\",\n  \"eparsl\": \"\\u29E3\",\n  \"eplus\": \"\\u2A71\",\n  \"epsi\": \"\\u03B5\",\n  \"Epsilon\": \"\\u0395\",\n  \"epsilon\": \"\\u03B5\",\n  \"epsiv\": \"\\u03F5\",\n  \"eqcirc\": \"\\u2256\",\n  \"eqcolon\": \"\\u2255\",\n  \"eqsim\": \"\\u2242\",\n  \"eqslantgtr\": \"\\u2A96\",\n  \"eqslantless\": \"\\u2A95\",\n  \"Equal\": \"\\u2A75\",\n  \"equals\": \"=\",\n  \"EqualTilde\": \"\\u2242\",\n  \"equest\": \"\\u225F\",\n  \"Equilibrium\": \"\\u21CC\",\n  \"equiv\": \"\\u2261\",\n  \"equivDD\": \"\\u2A78\",\n  \"eqvparsl\": \"\\u29E5\",\n  \"erarr\": \"\\u2971\",\n  \"erDot\": \"\\u2253\",\n  \"Escr\": \"\\u2130\",\n  \"escr\": \"\\u212F\",\n  \"esdot\": \"\\u2250\",\n  \"Esim\": \"\\u2A73\",\n  \"esim\": \"\\u2242\",\n  \"Eta\": \"\\u0397\",\n  \"eta\": \"\\u03B7\",\n  \"ETH\": \"\\xD0\",\n  \"eth\": \"\\xF0\",\n  \"Euml\": \"\\xCB\",\n  \"euml\": \"\\xEB\",\n  \"euro\": \"\\u20AC\",\n  \"excl\": \"!\",\n  \"exist\": \"\\u2203\",\n  \"Exists\": \"\\u2203\",\n  \"expectation\": \"\\u2130\",\n  \"ExponentialE\": \"\\u2147\",\n  \"exponentiale\": \"\\u2147\",\n  \"fallingdotseq\": \"\\u2252\",\n  \"Fcy\": \"\\u0424\",\n  \"fcy\": \"\\u0444\",\n  \"female\": \"\\u2640\",\n  \"ffilig\": \"\\uFB03\",\n  \"fflig\": \"\\uFB00\",\n  \"ffllig\": \"\\uFB04\",\n  \"Ffr\": \"\\uD835\\uDD09\",\n  \"ffr\": \"\\uD835\\uDD23\",\n  \"filig\": \"\\uFB01\",\n  \"FilledSmallSquare\": \"\\u25FC\",\n  \"FilledVerySmallSquare\": \"\\u25AA\",\n  \"fjlig\": \"fj\",\n  \"flat\": \"\\u266D\",\n  \"fllig\": \"\\uFB02\",\n  \"fltns\": \"\\u25B1\",\n  \"fnof\": \"\\u0192\",\n  \"Fopf\": \"\\uD835\\uDD3D\",\n  \"fopf\": \"\\uD835\\uDD57\",\n  \"ForAll\": \"\\u2200\",\n  \"forall\": \"\\u2200\",\n  \"fork\": \"\\u22D4\",\n  \"forkv\": \"\\u2AD9\",\n  \"Fouriertrf\": \"\\u2131\",\n  \"fpartint\": \"\\u2A0D\",\n  \"frac12\": \"\\xBD\",\n  \"frac13\": \"\\u2153\",\n  \"frac14\": \"\\xBC\",\n  \"frac15\": \"\\u2155\",\n  \"frac16\": \"\\u2159\",\n  \"frac18\": \"\\u215B\",\n  \"frac23\": \"\\u2154\",\n  \"frac25\": \"\\u2156\",\n  \"frac34\": \"\\xBE\",\n  \"frac35\": \"\\u2157\",\n  \"frac38\": \"\\u215C\",\n  \"frac45\": \"\\u2158\",\n  \"frac56\": \"\\u215A\",\n  \"frac58\": \"\\u215D\",\n  \"frac78\": \"\\u215E\",\n  \"frasl\": \"\\u2044\",\n  \"frown\": \"\\u2322\",\n  \"Fscr\": \"\\u2131\",\n  \"fscr\": \"\\uD835\\uDCBB\",\n  \"gacute\": \"\\u01F5\",\n  \"Gamma\": \"\\u0393\",\n  \"gamma\": \"\\u03B3\",\n  \"Gammad\": \"\\u03DC\",\n  \"gammad\": \"\\u03DD\",\n  \"gap\": \"\\u2A86\",\n  \"Gbreve\": \"\\u011E\",\n  \"gbreve\": \"\\u011F\",\n  \"Gcedil\": \"\\u0122\",\n  \"Gcirc\": \"\\u011C\",\n  \"gcirc\": \"\\u011D\",\n  \"Gcy\": \"\\u0413\",\n  \"gcy\": \"\\u0433\",\n  \"Gdot\": \"\\u0120\",\n  \"gdot\": \"\\u0121\",\n  \"gE\": \"\\u2267\",\n  \"ge\": \"\\u2265\",\n  \"gEl\": \"\\u2A8C\",\n  \"gel\": \"\\u22DB\",\n  \"geq\": \"\\u2265\",\n  \"geqq\": \"\\u2267\",\n  \"geqslant\": \"\\u2A7E\",\n  \"ges\": \"\\u2A7E\",\n  \"gescc\": \"\\u2AA9\",\n  \"gesdot\": \"\\u2A80\",\n  \"gesdoto\": \"\\u2A82\",\n  \"gesdotol\": \"\\u2A84\",\n  \"gesl\": \"\\u22DB\\uFE00\",\n  \"gesles\": \"\\u2A94\",\n  \"Gfr\": \"\\uD835\\uDD0A\",\n  \"gfr\": \"\\uD835\\uDD24\",\n  \"Gg\": \"\\u22D9\",\n  \"gg\": \"\\u226B\",\n  \"ggg\": \"\\u22D9\",\n  \"gimel\": \"\\u2137\",\n  \"GJcy\": \"\\u0403\",\n  \"gjcy\": \"\\u0453\",\n  \"gl\": \"\\u2277\",\n  \"gla\": \"\\u2AA5\",\n  \"glE\": \"\\u2A92\",\n  \"glj\": \"\\u2AA4\",\n  \"gnap\": \"\\u2A8A\",\n  \"gnapprox\": \"\\u2A8A\",\n  \"gnE\": \"\\u2269\",\n  \"gne\": \"\\u2A88\",\n  \"gneq\": \"\\u2A88\",\n  \"gneqq\": \"\\u2269\",\n  \"gnsim\": \"\\u22E7\",\n  \"Gopf\": \"\\uD835\\uDD3E\",\n  \"gopf\": \"\\uD835\\uDD58\",\n  \"grave\": \"`\",\n  \"GreaterEqual\": \"\\u2265\",\n  \"GreaterEqualLess\": \"\\u22DB\",\n  \"GreaterFullEqual\": \"\\u2267\",\n  \"GreaterGreater\": \"\\u2AA2\",\n  \"GreaterLess\": \"\\u2277\",\n  \"GreaterSlantEqual\": \"\\u2A7E\",\n  \"GreaterTilde\": \"\\u2273\",\n  \"Gscr\": \"\\uD835\\uDCA2\",\n  \"gscr\": \"\\u210A\",\n  \"gsim\": \"\\u2273\",\n  \"gsime\": \"\\u2A8E\",\n  \"gsiml\": \"\\u2A90\",\n  \"GT\": \">\",\n  \"Gt\": \"\\u226B\",\n  \"gt\": \">\",\n  \"gtcc\": \"\\u2AA7\",\n  \"gtcir\": \"\\u2A7A\",\n  \"gtdot\": \"\\u22D7\",\n  \"gtlPar\": \"\\u2995\",\n  \"gtquest\": \"\\u2A7C\",\n  \"gtrapprox\": \"\\u2A86\",\n  \"gtrarr\": \"\\u2978\",\n  \"gtrdot\": \"\\u22D7\",\n  \"gtreqless\": \"\\u22DB\",\n  \"gtreqqless\": \"\\u2A8C\",\n  \"gtrless\": \"\\u2277\",\n  \"gtrsim\": \"\\u2273\",\n  \"gvertneqq\": \"\\u2269\\uFE00\",\n  \"gvnE\": \"\\u2269\\uFE00\",\n  \"Hacek\": \"\\u02C7\",\n  \"hairsp\": \"\\u200A\",\n  \"half\": \"\\xBD\",\n  \"hamilt\": \"\\u210B\",\n  \"HARDcy\": \"\\u042A\",\n  \"hardcy\": \"\\u044A\",\n  \"hArr\": \"\\u21D4\",\n  \"harr\": \"\\u2194\",\n  \"harrcir\": \"\\u2948\",\n  \"harrw\": \"\\u21AD\",\n  \"Hat\": \"^\",\n  \"hbar\": \"\\u210F\",\n  \"Hcirc\": \"\\u0124\",\n  \"hcirc\": \"\\u0125\",\n  \"hearts\": \"\\u2665\",\n  \"heartsuit\": \"\\u2665\",\n  \"hellip\": \"\\u2026\",\n  \"hercon\": \"\\u22B9\",\n  \"Hfr\": \"\\u210C\",\n  \"hfr\": \"\\uD835\\uDD25\",\n  \"HilbertSpace\": \"\\u210B\",\n  \"hksearow\": \"\\u2925\",\n  \"hkswarow\": \"\\u2926\",\n  \"hoarr\": \"\\u21FF\",\n  \"homtht\": \"\\u223B\",\n  \"hookleftarrow\": \"\\u21A9\",\n  \"hookrightarrow\": \"\\u21AA\",\n  \"Hopf\": \"\\u210D\",\n  \"hopf\": \"\\uD835\\uDD59\",\n  \"horbar\": \"\\u2015\",\n  \"HorizontalLine\": \"\\u2500\",\n  \"Hscr\": \"\\u210B\",\n  \"hscr\": \"\\uD835\\uDCBD\",\n  \"hslash\": \"\\u210F\",\n  \"Hstrok\": \"\\u0126\",\n  \"hstrok\": \"\\u0127\",\n  \"HumpDownHump\": \"\\u224E\",\n  \"HumpEqual\": \"\\u224F\",\n  \"hybull\": \"\\u2043\",\n  \"hyphen\": \"\\u2010\",\n  \"Iacute\": \"\\xCD\",\n  \"iacute\": \"\\xED\",\n  \"ic\": \"\\u2063\",\n  \"Icirc\": \"\\xCE\",\n  \"icirc\": \"\\xEE\",\n  \"Icy\": \"\\u0418\",\n  \"icy\": \"\\u0438\",\n  \"Idot\": \"\\u0130\",\n  \"IEcy\": \"\\u0415\",\n  \"iecy\": \"\\u0435\",\n  \"iexcl\": \"\\xA1\",\n  \"iff\": \"\\u21D4\",\n  \"Ifr\": \"\\u2111\",\n  \"ifr\": \"\\uD835\\uDD26\",\n  \"Igrave\": \"\\xCC\",\n  \"igrave\": \"\\xEC\",\n  \"ii\": \"\\u2148\",\n  \"iiiint\": \"\\u2A0C\",\n  \"iiint\": \"\\u222D\",\n  \"iinfin\": \"\\u29DC\",\n  \"iiota\": \"\\u2129\",\n  \"IJlig\": \"\\u0132\",\n  \"ijlig\": \"\\u0133\",\n  \"Im\": \"\\u2111\",\n  \"Imacr\": \"\\u012A\",\n  \"imacr\": \"\\u012B\",\n  \"image\": \"\\u2111\",\n  \"ImaginaryI\": \"\\u2148\",\n  \"imagline\": \"\\u2110\",\n  \"imagpart\": \"\\u2111\",\n  \"imath\": \"\\u0131\",\n  \"imof\": \"\\u22B7\",\n  \"imped\": \"\\u01B5\",\n  \"Implies\": \"\\u21D2\",\n  \"in\": \"\\u2208\",\n  \"incare\": \"\\u2105\",\n  \"infin\": \"\\u221E\",\n  \"infintie\": \"\\u29DD\",\n  \"inodot\": \"\\u0131\",\n  \"Int\": \"\\u222C\",\n  \"int\": \"\\u222B\",\n  \"intcal\": \"\\u22BA\",\n  \"integers\": \"\\u2124\",\n  \"Integral\": \"\\u222B\",\n  \"intercal\": \"\\u22BA\",\n  \"Intersection\": \"\\u22C2\",\n  \"intlarhk\": \"\\u2A17\",\n  \"intprod\": \"\\u2A3C\",\n  \"InvisibleComma\": \"\\u2063\",\n  \"InvisibleTimes\": \"\\u2062\",\n  \"IOcy\": \"\\u0401\",\n  \"iocy\": \"\\u0451\",\n  \"Iogon\": \"\\u012E\",\n  \"iogon\": \"\\u012F\",\n  \"Iopf\": \"\\uD835\\uDD40\",\n  \"iopf\": \"\\uD835\\uDD5A\",\n  \"Iota\": \"\\u0399\",\n  \"iota\": \"\\u03B9\",\n  \"iprod\": \"\\u2A3C\",\n  \"iquest\": \"\\xBF\",\n  \"Iscr\": \"\\u2110\",\n  \"iscr\": \"\\uD835\\uDCBE\",\n  \"isin\": \"\\u2208\",\n  \"isindot\": \"\\u22F5\",\n  \"isinE\": \"\\u22F9\",\n  \"isins\": \"\\u22F4\",\n  \"isinsv\": \"\\u22F3\",\n  \"isinv\": \"\\u2208\",\n  \"it\": \"\\u2062\",\n  \"Itilde\": \"\\u0128\",\n  \"itilde\": \"\\u0129\",\n  \"Iukcy\": \"\\u0406\",\n  \"iukcy\": \"\\u0456\",\n  \"Iuml\": \"\\xCF\",\n  \"iuml\": \"\\xEF\",\n  \"Jcirc\": \"\\u0134\",\n  \"jcirc\": \"\\u0135\",\n  \"Jcy\": \"\\u0419\",\n  \"jcy\": \"\\u0439\",\n  \"Jfr\": \"\\uD835\\uDD0D\",\n  \"jfr\": \"\\uD835\\uDD27\",\n  \"jmath\": \"\\u0237\",\n  \"Jopf\": \"\\uD835\\uDD41\",\n  \"jopf\": \"\\uD835\\uDD5B\",\n  \"Jscr\": \"\\uD835\\uDCA5\",\n  \"jscr\": \"\\uD835\\uDCBF\",\n  \"Jsercy\": \"\\u0408\",\n  \"jsercy\": \"\\u0458\",\n  \"Jukcy\": \"\\u0404\",\n  \"jukcy\": \"\\u0454\",\n  \"Kappa\": \"\\u039A\",\n  \"kappa\": \"\\u03BA\",\n  \"kappav\": \"\\u03F0\",\n  \"Kcedil\": \"\\u0136\",\n  \"kcedil\": \"\\u0137\",\n  \"Kcy\": \"\\u041A\",\n  \"kcy\": \"\\u043A\",\n  \"Kfr\": \"\\uD835\\uDD0E\",\n  \"kfr\": \"\\uD835\\uDD28\",\n  \"kgreen\": \"\\u0138\",\n  \"KHcy\": \"\\u0425\",\n  \"khcy\": \"\\u0445\",\n  \"KJcy\": \"\\u040C\",\n  \"kjcy\": \"\\u045C\",\n  \"Kopf\": \"\\uD835\\uDD42\",\n  \"kopf\": \"\\uD835\\uDD5C\",\n  \"Kscr\": \"\\uD835\\uDCA6\",\n  \"kscr\": \"\\uD835\\uDCC0\",\n  \"lAarr\": \"\\u21DA\",\n  \"Lacute\": \"\\u0139\",\n  \"lacute\": \"\\u013A\",\n  \"laemptyv\": \"\\u29B4\",\n  \"lagran\": \"\\u2112\",\n  \"Lambda\": \"\\u039B\",\n  \"lambda\": \"\\u03BB\",\n  \"Lang\": \"\\u27EA\",\n  \"lang\": \"\\u27E8\",\n  \"langd\": \"\\u2991\",\n  \"langle\": \"\\u27E8\",\n  \"lap\": \"\\u2A85\",\n  \"Laplacetrf\": \"\\u2112\",\n  \"laquo\": \"\\xAB\",\n  \"Larr\": \"\\u219E\",\n  \"lArr\": \"\\u21D0\",\n  \"larr\": \"\\u2190\",\n  \"larrb\": \"\\u21E4\",\n  \"larrbfs\": \"\\u291F\",\n  \"larrfs\": \"\\u291D\",\n  \"larrhk\": \"\\u21A9\",\n  \"larrlp\": \"\\u21AB\",\n  \"larrpl\": \"\\u2939\",\n  \"larrsim\": \"\\u2973\",\n  \"larrtl\": \"\\u21A2\",\n  \"lat\": \"\\u2AAB\",\n  \"lAtail\": \"\\u291B\",\n  \"latail\": \"\\u2919\",\n  \"late\": \"\\u2AAD\",\n  \"lates\": \"\\u2AAD\\uFE00\",\n  \"lBarr\": \"\\u290E\",\n  \"lbarr\": \"\\u290C\",\n  \"lbbrk\": \"\\u2772\",\n  \"lbrace\": \"{\",\n  \"lbrack\": \"[\",\n  \"lbrke\": \"\\u298B\",\n  \"lbrksld\": \"\\u298F\",\n  \"lbrkslu\": \"\\u298D\",\n  \"Lcaron\": \"\\u013D\",\n  \"lcaron\": \"\\u013E\",\n  \"Lcedil\": \"\\u013B\",\n  \"lcedil\": \"\\u013C\",\n  \"lceil\": \"\\u2308\",\n  \"lcub\": \"{\",\n  \"Lcy\": \"\\u041B\",\n  \"lcy\": \"\\u043B\",\n  \"ldca\": \"\\u2936\",\n  \"ldquo\": \"\\u201C\",\n  \"ldquor\": \"\\u201E\",\n  \"ldrdhar\": \"\\u2967\",\n  \"ldrushar\": \"\\u294B\",\n  \"ldsh\": \"\\u21B2\",\n  \"lE\": \"\\u2266\",\n  \"le\": \"\\u2264\",\n  \"LeftAngleBracket\": \"\\u27E8\",\n  \"LeftArrow\": \"\\u2190\",\n  \"Leftarrow\": \"\\u21D0\",\n  \"leftarrow\": \"\\u2190\",\n  \"LeftArrowBar\": \"\\u21E4\",\n  \"LeftArrowRightArrow\": \"\\u21C6\",\n  \"leftarrowtail\": \"\\u21A2\",\n  \"LeftCeiling\": \"\\u2308\",\n  \"LeftDoubleBracket\": \"\\u27E6\",\n  \"LeftDownTeeVector\": \"\\u2961\",\n  \"LeftDownVector\": \"\\u21C3\",\n  \"LeftDownVectorBar\": \"\\u2959\",\n  \"LeftFloor\": \"\\u230A\",\n  \"leftharpoondown\": \"\\u21BD\",\n  \"leftharpoonup\": \"\\u21BC\",\n  \"leftleftarrows\": \"\\u21C7\",\n  \"LeftRightArrow\": \"\\u2194\",\n  \"Leftrightarrow\": \"\\u21D4\",\n  \"leftrightarrow\": \"\\u2194\",\n  \"leftrightarrows\": \"\\u21C6\",\n  \"leftrightharpoons\": \"\\u21CB\",\n  \"leftrightsquigarrow\": \"\\u21AD\",\n  \"LeftRightVector\": \"\\u294E\",\n  \"LeftTee\": \"\\u22A3\",\n  \"LeftTeeArrow\": \"\\u21A4\",\n  \"LeftTeeVector\": \"\\u295A\",\n  \"leftthreetimes\": \"\\u22CB\",\n  \"LeftTriangle\": \"\\u22B2\",\n  \"LeftTriangleBar\": \"\\u29CF\",\n  \"LeftTriangleEqual\": \"\\u22B4\",\n  \"LeftUpDownVector\": \"\\u2951\",\n  \"LeftUpTeeVector\": \"\\u2960\",\n  \"LeftUpVector\": \"\\u21BF\",\n  \"LeftUpVectorBar\": \"\\u2958\",\n  \"LeftVector\": \"\\u21BC\",\n  \"LeftVectorBar\": \"\\u2952\",\n  \"lEg\": \"\\u2A8B\",\n  \"leg\": \"\\u22DA\",\n  \"leq\": \"\\u2264\",\n  \"leqq\": \"\\u2266\",\n  \"leqslant\": \"\\u2A7D\",\n  \"les\": \"\\u2A7D\",\n  \"lescc\": \"\\u2AA8\",\n  \"lesdot\": \"\\u2A7F\",\n  \"lesdoto\": \"\\u2A81\",\n  \"lesdotor\": \"\\u2A83\",\n  \"lesg\": \"\\u22DA\\uFE00\",\n  \"lesges\": \"\\u2A93\",\n  \"lessapprox\": \"\\u2A85\",\n  \"lessdot\": \"\\u22D6\",\n  \"lesseqgtr\": \"\\u22DA\",\n  \"lesseqqgtr\": \"\\u2A8B\",\n  \"LessEqualGreater\": \"\\u22DA\",\n  \"LessFullEqual\": \"\\u2266\",\n  \"LessGreater\": \"\\u2276\",\n  \"lessgtr\": \"\\u2276\",\n  \"LessLess\": \"\\u2AA1\",\n  \"lesssim\": \"\\u2272\",\n  \"LessSlantEqual\": \"\\u2A7D\",\n  \"LessTilde\": \"\\u2272\",\n  \"lfisht\": \"\\u297C\",\n  \"lfloor\": \"\\u230A\",\n  \"Lfr\": \"\\uD835\\uDD0F\",\n  \"lfr\": \"\\uD835\\uDD29\",\n  \"lg\": \"\\u2276\",\n  \"lgE\": \"\\u2A91\",\n  \"lHar\": \"\\u2962\",\n  \"lhard\": \"\\u21BD\",\n  \"lharu\": \"\\u21BC\",\n  \"lharul\": \"\\u296A\",\n  \"lhblk\": \"\\u2584\",\n  \"LJcy\": \"\\u0409\",\n  \"ljcy\": \"\\u0459\",\n  \"Ll\": \"\\u22D8\",\n  \"ll\": \"\\u226A\",\n  \"llarr\": \"\\u21C7\",\n  \"llcorner\": \"\\u231E\",\n  \"Lleftarrow\": \"\\u21DA\",\n  \"llhard\": \"\\u296B\",\n  \"lltri\": \"\\u25FA\",\n  \"Lmidot\": \"\\u013F\",\n  \"lmidot\": \"\\u0140\",\n  \"lmoust\": \"\\u23B0\",\n  \"lmoustache\": \"\\u23B0\",\n  \"lnap\": \"\\u2A89\",\n  \"lnapprox\": \"\\u2A89\",\n  \"lnE\": \"\\u2268\",\n  \"lne\": \"\\u2A87\",\n  \"lneq\": \"\\u2A87\",\n  \"lneqq\": \"\\u2268\",\n  \"lnsim\": \"\\u22E6\",\n  \"loang\": \"\\u27EC\",\n  \"loarr\": \"\\u21FD\",\n  \"lobrk\": \"\\u27E6\",\n  \"LongLeftArrow\": \"\\u27F5\",\n  \"Longleftarrow\": \"\\u27F8\",\n  \"longleftarrow\": \"\\u27F5\",\n  \"LongLeftRightArrow\": \"\\u27F7\",\n  \"Longleftrightarrow\": \"\\u27FA\",\n  \"longleftrightarrow\": \"\\u27F7\",\n  \"longmapsto\": \"\\u27FC\",\n  \"LongRightArrow\": \"\\u27F6\",\n  \"Longrightarrow\": \"\\u27F9\",\n  \"longrightarrow\": \"\\u27F6\",\n  \"looparrowleft\": \"\\u21AB\",\n  \"looparrowright\": \"\\u21AC\",\n  \"lopar\": \"\\u2985\",\n  \"Lopf\": \"\\uD835\\uDD43\",\n  \"lopf\": \"\\uD835\\uDD5D\",\n  \"loplus\": \"\\u2A2D\",\n  \"lotimes\": \"\\u2A34\",\n  \"lowast\": \"\\u2217\",\n  \"lowbar\": \"_\",\n  \"LowerLeftArrow\": \"\\u2199\",\n  \"LowerRightArrow\": \"\\u2198\",\n  \"loz\": \"\\u25CA\",\n  \"lozenge\": \"\\u25CA\",\n  \"lozf\": \"\\u29EB\",\n  \"lpar\": \"(\",\n  \"lparlt\": \"\\u2993\",\n  \"lrarr\": \"\\u21C6\",\n  \"lrcorner\": \"\\u231F\",\n  \"lrhar\": \"\\u21CB\",\n  \"lrhard\": \"\\u296D\",\n  \"lrm\": \"\\u200E\",\n  \"lrtri\": \"\\u22BF\",\n  \"lsaquo\": \"\\u2039\",\n  \"Lscr\": \"\\u2112\",\n  \"lscr\": \"\\uD835\\uDCC1\",\n  \"Lsh\": \"\\u21B0\",\n  \"lsh\": \"\\u21B0\",\n  \"lsim\": \"\\u2272\",\n  \"lsime\": \"\\u2A8D\",\n  \"lsimg\": \"\\u2A8F\",\n  \"lsqb\": \"[\",\n  \"lsquo\": \"\\u2018\",\n  \"lsquor\": \"\\u201A\",\n  \"Lstrok\": \"\\u0141\",\n  \"lstrok\": \"\\u0142\",\n  \"LT\": \"<\",\n  \"Lt\": \"\\u226A\",\n  \"lt\": \"<\",\n  \"ltcc\": \"\\u2AA6\",\n  \"ltcir\": \"\\u2A79\",\n  \"ltdot\": \"\\u22D6\",\n  \"lthree\": \"\\u22CB\",\n  \"ltimes\": \"\\u22C9\",\n  \"ltlarr\": \"\\u2976\",\n  \"ltquest\": \"\\u2A7B\",\n  \"ltri\": \"\\u25C3\",\n  \"ltrie\": \"\\u22B4\",\n  \"ltrif\": \"\\u25C2\",\n  \"ltrPar\": \"\\u2996\",\n  \"lurdshar\": \"\\u294A\",\n  \"luruhar\": \"\\u2966\",\n  \"lvertneqq\": \"\\u2268\\uFE00\",\n  \"lvnE\": \"\\u2268\\uFE00\",\n  \"macr\": \"\\xAF\",\n  \"male\": \"\\u2642\",\n  \"malt\": \"\\u2720\",\n  \"maltese\": \"\\u2720\",\n  \"Map\": \"\\u2905\",\n  \"map\": \"\\u21A6\",\n  \"mapsto\": \"\\u21A6\",\n  \"mapstodown\": \"\\u21A7\",\n  \"mapstoleft\": \"\\u21A4\",\n  \"mapstoup\": \"\\u21A5\",\n  \"marker\": \"\\u25AE\",\n  \"mcomma\": \"\\u2A29\",\n  \"Mcy\": \"\\u041C\",\n  \"mcy\": \"\\u043C\",\n  \"mdash\": \"\\u2014\",\n  \"mDDot\": \"\\u223A\",\n  \"measuredangle\": \"\\u2221\",\n  \"MediumSpace\": \"\\u205F\",\n  \"Mellintrf\": \"\\u2133\",\n  \"Mfr\": \"\\uD835\\uDD10\",\n  \"mfr\": \"\\uD835\\uDD2A\",\n  \"mho\": \"\\u2127\",\n  \"micro\": \"\\xB5\",\n  \"mid\": \"\\u2223\",\n  \"midast\": \"*\",\n  \"midcir\": \"\\u2AF0\",\n  \"middot\": \"\\xB7\",\n  \"minus\": \"\\u2212\",\n  \"minusb\": \"\\u229F\",\n  \"minusd\": \"\\u2238\",\n  \"minusdu\": \"\\u2A2A\",\n  \"MinusPlus\": \"\\u2213\",\n  \"mlcp\": \"\\u2ADB\",\n  \"mldr\": \"\\u2026\",\n  \"mnplus\": \"\\u2213\",\n  \"models\": \"\\u22A7\",\n  \"Mopf\": \"\\uD835\\uDD44\",\n  \"mopf\": \"\\uD835\\uDD5E\",\n  \"mp\": \"\\u2213\",\n  \"Mscr\": \"\\u2133\",\n  \"mscr\": \"\\uD835\\uDCC2\",\n  \"mstpos\": \"\\u223E\",\n  \"Mu\": \"\\u039C\",\n  \"mu\": \"\\u03BC\",\n  \"multimap\": \"\\u22B8\",\n  \"mumap\": \"\\u22B8\",\n  \"nabla\": \"\\u2207\",\n  \"Nacute\": \"\\u0143\",\n  \"nacute\": \"\\u0144\",\n  \"nang\": \"\\u2220\\u20D2\",\n  \"nap\": \"\\u2249\",\n  \"napE\": \"\\u2A70\\u0338\",\n  \"napid\": \"\\u224B\\u0338\",\n  \"napos\": \"\\u0149\",\n  \"napprox\": \"\\u2249\",\n  \"natur\": \"\\u266E\",\n  \"natural\": \"\\u266E\",\n  \"naturals\": \"\\u2115\",\n  \"nbsp\": \"\\xA0\",\n  \"nbump\": \"\\u224E\\u0338\",\n  \"nbumpe\": \"\\u224F\\u0338\",\n  \"ncap\": \"\\u2A43\",\n  \"Ncaron\": \"\\u0147\",\n  \"ncaron\": \"\\u0148\",\n  \"Ncedil\": \"\\u0145\",\n  \"ncedil\": \"\\u0146\",\n  \"ncong\": \"\\u2247\",\n  \"ncongdot\": \"\\u2A6D\\u0338\",\n  \"ncup\": \"\\u2A42\",\n  \"Ncy\": \"\\u041D\",\n  \"ncy\": \"\\u043D\",\n  \"ndash\": \"\\u2013\",\n  \"ne\": \"\\u2260\",\n  \"nearhk\": \"\\u2924\",\n  \"neArr\": \"\\u21D7\",\n  \"nearr\": \"\\u2197\",\n  \"nearrow\": \"\\u2197\",\n  \"nedot\": \"\\u2250\\u0338\",\n  \"NegativeMediumSpace\": \"\\u200B\",\n  \"NegativeThickSpace\": \"\\u200B\",\n  \"NegativeThinSpace\": \"\\u200B\",\n  \"NegativeVeryThinSpace\": \"\\u200B\",\n  \"nequiv\": \"\\u2262\",\n  \"nesear\": \"\\u2928\",\n  \"nesim\": \"\\u2242\\u0338\",\n  \"NestedGreaterGreater\": \"\\u226B\",\n  \"NestedLessLess\": \"\\u226A\",\n  \"NewLine\": \"\\n\",\n  \"nexist\": \"\\u2204\",\n  \"nexists\": \"\\u2204\",\n  \"Nfr\": \"\\uD835\\uDD11\",\n  \"nfr\": \"\\uD835\\uDD2B\",\n  \"ngE\": \"\\u2267\\u0338\",\n  \"nge\": \"\\u2271\",\n  \"ngeq\": \"\\u2271\",\n  \"ngeqq\": \"\\u2267\\u0338\",\n  \"ngeqslant\": \"\\u2A7E\\u0338\",\n  \"nges\": \"\\u2A7E\\u0338\",\n  \"nGg\": \"\\u22D9\\u0338\",\n  \"ngsim\": \"\\u2275\",\n  \"nGt\": \"\\u226B\\u20D2\",\n  \"ngt\": \"\\u226F\",\n  \"ngtr\": \"\\u226F\",\n  \"nGtv\": \"\\u226B\\u0338\",\n  \"nhArr\": \"\\u21CE\",\n  \"nharr\": \"\\u21AE\",\n  \"nhpar\": \"\\u2AF2\",\n  \"ni\": \"\\u220B\",\n  \"nis\": \"\\u22FC\",\n  \"nisd\": \"\\u22FA\",\n  \"niv\": \"\\u220B\",\n  \"NJcy\": \"\\u040A\",\n  \"njcy\": \"\\u045A\",\n  \"nlArr\": \"\\u21CD\",\n  \"nlarr\": \"\\u219A\",\n  \"nldr\": \"\\u2025\",\n  \"nlE\": \"\\u2266\\u0338\",\n  \"nle\": \"\\u2270\",\n  \"nLeftarrow\": \"\\u21CD\",\n  \"nleftarrow\": \"\\u219A\",\n  \"nLeftrightarrow\": \"\\u21CE\",\n  \"nleftrightarrow\": \"\\u21AE\",\n  \"nleq\": \"\\u2270\",\n  \"nleqq\": \"\\u2266\\u0338\",\n  \"nleqslant\": \"\\u2A7D\\u0338\",\n  \"nles\": \"\\u2A7D\\u0338\",\n  \"nless\": \"\\u226E\",\n  \"nLl\": \"\\u22D8\\u0338\",\n  \"nlsim\": \"\\u2274\",\n  \"nLt\": \"\\u226A\\u20D2\",\n  \"nlt\": \"\\u226E\",\n  \"nltri\": \"\\u22EA\",\n  \"nltrie\": \"\\u22EC\",\n  \"nLtv\": \"\\u226A\\u0338\",\n  \"nmid\": \"\\u2224\",\n  \"NoBreak\": \"\\u2060\",\n  \"NonBreakingSpace\": \"\\xA0\",\n  \"Nopf\": \"\\u2115\",\n  \"nopf\": \"\\uD835\\uDD5F\",\n  \"Not\": \"\\u2AEC\",\n  \"not\": \"\\xAC\",\n  \"NotCongruent\": \"\\u2262\",\n  \"NotCupCap\": \"\\u226D\",\n  \"NotDoubleVerticalBar\": \"\\u2226\",\n  \"NotElement\": \"\\u2209\",\n  \"NotEqual\": \"\\u2260\",\n  \"NotEqualTilde\": \"\\u2242\\u0338\",\n  \"NotExists\": \"\\u2204\",\n  \"NotGreater\": \"\\u226F\",\n  \"NotGreaterEqual\": \"\\u2271\",\n  \"NotGreaterFullEqual\": \"\\u2267\\u0338\",\n  \"NotGreaterGreater\": \"\\u226B\\u0338\",\n  \"NotGreaterLess\": \"\\u2279\",\n  \"NotGreaterSlantEqual\": \"\\u2A7E\\u0338\",\n  \"NotGreaterTilde\": \"\\u2275\",\n  \"NotHumpDownHump\": \"\\u224E\\u0338\",\n  \"NotHumpEqual\": \"\\u224F\\u0338\",\n  \"notin\": \"\\u2209\",\n  \"notindot\": \"\\u22F5\\u0338\",\n  \"notinE\": \"\\u22F9\\u0338\",\n  \"notinva\": \"\\u2209\",\n  \"notinvb\": \"\\u22F7\",\n  \"notinvc\": \"\\u22F6\",\n  \"NotLeftTriangle\": \"\\u22EA\",\n  \"NotLeftTriangleBar\": \"\\u29CF\\u0338\",\n  \"NotLeftTriangleEqual\": \"\\u22EC\",\n  \"NotLess\": \"\\u226E\",\n  \"NotLessEqual\": \"\\u2270\",\n  \"NotLessGreater\": \"\\u2278\",\n  \"NotLessLess\": \"\\u226A\\u0338\",\n  \"NotLessSlantEqual\": \"\\u2A7D\\u0338\",\n  \"NotLessTilde\": \"\\u2274\",\n  \"NotNestedGreaterGreater\": \"\\u2AA2\\u0338\",\n  \"NotNestedLessLess\": \"\\u2AA1\\u0338\",\n  \"notni\": \"\\u220C\",\n  \"notniva\": \"\\u220C\",\n  \"notnivb\": \"\\u22FE\",\n  \"notnivc\": \"\\u22FD\",\n  \"NotPrecedes\": \"\\u2280\",\n  \"NotPrecedesEqual\": \"\\u2AAF\\u0338\",\n  \"NotPrecedesSlantEqual\": \"\\u22E0\",\n  \"NotReverseElement\": \"\\u220C\",\n  \"NotRightTriangle\": \"\\u22EB\",\n  \"NotRightTriangleBar\": \"\\u29D0\\u0338\",\n  \"NotRightTriangleEqual\": \"\\u22ED\",\n  \"NotSquareSubset\": \"\\u228F\\u0338\",\n  \"NotSquareSubsetEqual\": \"\\u22E2\",\n  \"NotSquareSuperset\": \"\\u2290\\u0338\",\n  \"NotSquareSupersetEqual\": \"\\u22E3\",\n  \"NotSubset\": \"\\u2282\\u20D2\",\n  \"NotSubsetEqual\": \"\\u2288\",\n  \"NotSucceeds\": \"\\u2281\",\n  \"NotSucceedsEqual\": \"\\u2AB0\\u0338\",\n  \"NotSucceedsSlantEqual\": \"\\u22E1\",\n  \"NotSucceedsTilde\": \"\\u227F\\u0338\",\n  \"NotSuperset\": \"\\u2283\\u20D2\",\n  \"NotSupersetEqual\": \"\\u2289\",\n  \"NotTilde\": \"\\u2241\",\n  \"NotTildeEqual\": \"\\u2244\",\n  \"NotTildeFullEqual\": \"\\u2247\",\n  \"NotTildeTilde\": \"\\u2249\",\n  \"NotVerticalBar\": \"\\u2224\",\n  \"npar\": \"\\u2226\",\n  \"nparallel\": \"\\u2226\",\n  \"nparsl\": \"\\u2AFD\\u20E5\",\n  \"npart\": \"\\u2202\\u0338\",\n  \"npolint\": \"\\u2A14\",\n  \"npr\": \"\\u2280\",\n  \"nprcue\": \"\\u22E0\",\n  \"npre\": \"\\u2AAF\\u0338\",\n  \"nprec\": \"\\u2280\",\n  \"npreceq\": \"\\u2AAF\\u0338\",\n  \"nrArr\": \"\\u21CF\",\n  \"nrarr\": \"\\u219B\",\n  \"nrarrc\": \"\\u2933\\u0338\",\n  \"nrarrw\": \"\\u219D\\u0338\",\n  \"nRightarrow\": \"\\u21CF\",\n  \"nrightarrow\": \"\\u219B\",\n  \"nrtri\": \"\\u22EB\",\n  \"nrtrie\": \"\\u22ED\",\n  \"nsc\": \"\\u2281\",\n  \"nsccue\": \"\\u22E1\",\n  \"nsce\": \"\\u2AB0\\u0338\",\n  \"Nscr\": \"\\uD835\\uDCA9\",\n  \"nscr\": \"\\uD835\\uDCC3\",\n  \"nshortmid\": \"\\u2224\",\n  \"nshortparallel\": \"\\u2226\",\n  \"nsim\": \"\\u2241\",\n  \"nsime\": \"\\u2244\",\n  \"nsimeq\": \"\\u2244\",\n  \"nsmid\": \"\\u2224\",\n  \"nspar\": \"\\u2226\",\n  \"nsqsube\": \"\\u22E2\",\n  \"nsqsupe\": \"\\u22E3\",\n  \"nsub\": \"\\u2284\",\n  \"nsubE\": \"\\u2AC5\\u0338\",\n  \"nsube\": \"\\u2288\",\n  \"nsubset\": \"\\u2282\\u20D2\",\n  \"nsubseteq\": \"\\u2288\",\n  \"nsubseteqq\": \"\\u2AC5\\u0338\",\n  \"nsucc\": \"\\u2281\",\n  \"nsucceq\": \"\\u2AB0\\u0338\",\n  \"nsup\": \"\\u2285\",\n  \"nsupE\": \"\\u2AC6\\u0338\",\n  \"nsupe\": \"\\u2289\",\n  \"nsupset\": \"\\u2283\\u20D2\",\n  \"nsupseteq\": \"\\u2289\",\n  \"nsupseteqq\": \"\\u2AC6\\u0338\",\n  \"ntgl\": \"\\u2279\",\n  \"Ntilde\": \"\\xD1\",\n  \"ntilde\": \"\\xF1\",\n  \"ntlg\": \"\\u2278\",\n  \"ntriangleleft\": \"\\u22EA\",\n  \"ntrianglelefteq\": \"\\u22EC\",\n  \"ntriangleright\": \"\\u22EB\",\n  \"ntrianglerighteq\": \"\\u22ED\",\n  \"Nu\": \"\\u039D\",\n  \"nu\": \"\\u03BD\",\n  \"num\": \"#\",\n  \"numero\": \"\\u2116\",\n  \"numsp\": \"\\u2007\",\n  \"nvap\": \"\\u224D\\u20D2\",\n  \"nVDash\": \"\\u22AF\",\n  \"nVdash\": \"\\u22AE\",\n  \"nvDash\": \"\\u22AD\",\n  \"nvdash\": \"\\u22AC\",\n  \"nvge\": \"\\u2265\\u20D2\",\n  \"nvgt\": \">\\u20D2\",\n  \"nvHarr\": \"\\u2904\",\n  \"nvinfin\": \"\\u29DE\",\n  \"nvlArr\": \"\\u2902\",\n  \"nvle\": \"\\u2264\\u20D2\",\n  \"nvlt\": \"<\\u20D2\",\n  \"nvltrie\": \"\\u22B4\\u20D2\",\n  \"nvrArr\": \"\\u2903\",\n  \"nvrtrie\": \"\\u22B5\\u20D2\",\n  \"nvsim\": \"\\u223C\\u20D2\",\n  \"nwarhk\": \"\\u2923\",\n  \"nwArr\": \"\\u21D6\",\n  \"nwarr\": \"\\u2196\",\n  \"nwarrow\": \"\\u2196\",\n  \"nwnear\": \"\\u2927\",\n  \"Oacute\": \"\\xD3\",\n  \"oacute\": \"\\xF3\",\n  \"oast\": \"\\u229B\",\n  \"ocir\": \"\\u229A\",\n  \"Ocirc\": \"\\xD4\",\n  \"ocirc\": \"\\xF4\",\n  \"Ocy\": \"\\u041E\",\n  \"ocy\": \"\\u043E\",\n  \"odash\": \"\\u229D\",\n  \"Odblac\": \"\\u0150\",\n  \"odblac\": \"\\u0151\",\n  \"odiv\": \"\\u2A38\",\n  \"odot\": \"\\u2299\",\n  \"odsold\": \"\\u29BC\",\n  \"OElig\": \"\\u0152\",\n  \"oelig\": \"\\u0153\",\n  \"ofcir\": \"\\u29BF\",\n  \"Ofr\": \"\\uD835\\uDD12\",\n  \"ofr\": \"\\uD835\\uDD2C\",\n  \"ogon\": \"\\u02DB\",\n  \"Ograve\": \"\\xD2\",\n  \"ograve\": \"\\xF2\",\n  \"ogt\": \"\\u29C1\",\n  \"ohbar\": \"\\u29B5\",\n  \"ohm\": \"\\u03A9\",\n  \"oint\": \"\\u222E\",\n  \"olarr\": \"\\u21BA\",\n  \"olcir\": \"\\u29BE\",\n  \"olcross\": \"\\u29BB\",\n  \"oline\": \"\\u203E\",\n  \"olt\": \"\\u29C0\",\n  \"Omacr\": \"\\u014C\",\n  \"omacr\": \"\\u014D\",\n  \"Omega\": \"\\u03A9\",\n  \"omega\": \"\\u03C9\",\n  \"Omicron\": \"\\u039F\",\n  \"omicron\": \"\\u03BF\",\n  \"omid\": \"\\u29B6\",\n  \"ominus\": \"\\u2296\",\n  \"Oopf\": \"\\uD835\\uDD46\",\n  \"oopf\": \"\\uD835\\uDD60\",\n  \"opar\": \"\\u29B7\",\n  \"OpenCurlyDoubleQuote\": \"\\u201C\",\n  \"OpenCurlyQuote\": \"\\u2018\",\n  \"operp\": \"\\u29B9\",\n  \"oplus\": \"\\u2295\",\n  \"Or\": \"\\u2A54\",\n  \"or\": \"\\u2228\",\n  \"orarr\": \"\\u21BB\",\n  \"ord\": \"\\u2A5D\",\n  \"order\": \"\\u2134\",\n  \"orderof\": \"\\u2134\",\n  \"ordf\": \"\\xAA\",\n  \"ordm\": \"\\xBA\",\n  \"origof\": \"\\u22B6\",\n  \"oror\": \"\\u2A56\",\n  \"orslope\": \"\\u2A57\",\n  \"orv\": \"\\u2A5B\",\n  \"oS\": \"\\u24C8\",\n  \"Oscr\": \"\\uD835\\uDCAA\",\n  \"oscr\": \"\\u2134\",\n  \"Oslash\": \"\\xD8\",\n  \"oslash\": \"\\xF8\",\n  \"osol\": \"\\u2298\",\n  \"Otilde\": \"\\xD5\",\n  \"otilde\": \"\\xF5\",\n  \"Otimes\": \"\\u2A37\",\n  \"otimes\": \"\\u2297\",\n  \"otimesas\": \"\\u2A36\",\n  \"Ouml\": \"\\xD6\",\n  \"ouml\": \"\\xF6\",\n  \"ovbar\": \"\\u233D\",\n  \"OverBar\": \"\\u203E\",\n  \"OverBrace\": \"\\u23DE\",\n  \"OverBracket\": \"\\u23B4\",\n  \"OverParenthesis\": \"\\u23DC\",\n  \"par\": \"\\u2225\",\n  \"para\": \"\\xB6\",\n  \"parallel\": \"\\u2225\",\n  \"parsim\": \"\\u2AF3\",\n  \"parsl\": \"\\u2AFD\",\n  \"part\": \"\\u2202\",\n  \"PartialD\": \"\\u2202\",\n  \"Pcy\": \"\\u041F\",\n  \"pcy\": \"\\u043F\",\n  \"percnt\": \"%\",\n  \"period\": \".\",\n  \"permil\": \"\\u2030\",\n  \"perp\": \"\\u22A5\",\n  \"pertenk\": \"\\u2031\",\n  \"Pfr\": \"\\uD835\\uDD13\",\n  \"pfr\": \"\\uD835\\uDD2D\",\n  \"Phi\": \"\\u03A6\",\n  \"phi\": \"\\u03C6\",\n  \"phiv\": \"\\u03D5\",\n  \"phmmat\": \"\\u2133\",\n  \"phone\": \"\\u260E\",\n  \"Pi\": \"\\u03A0\",\n  \"pi\": \"\\u03C0\",\n  \"pitchfork\": \"\\u22D4\",\n  \"piv\": \"\\u03D6\",\n  \"planck\": \"\\u210F\",\n  \"planckh\": \"\\u210E\",\n  \"plankv\": \"\\u210F\",\n  \"plus\": \"+\",\n  \"plusacir\": \"\\u2A23\",\n  \"plusb\": \"\\u229E\",\n  \"pluscir\": \"\\u2A22\",\n  \"plusdo\": \"\\u2214\",\n  \"plusdu\": \"\\u2A25\",\n  \"pluse\": \"\\u2A72\",\n  \"PlusMinus\": \"\\xB1\",\n  \"plusmn\": \"\\xB1\",\n  \"plussim\": \"\\u2A26\",\n  \"plustwo\": \"\\u2A27\",\n  \"pm\": \"\\xB1\",\n  \"Poincareplane\": \"\\u210C\",\n  \"pointint\": \"\\u2A15\",\n  \"Popf\": \"\\u2119\",\n  \"popf\": \"\\uD835\\uDD61\",\n  \"pound\": \"\\xA3\",\n  \"Pr\": \"\\u2ABB\",\n  \"pr\": \"\\u227A\",\n  \"prap\": \"\\u2AB7\",\n  \"prcue\": \"\\u227C\",\n  \"prE\": \"\\u2AB3\",\n  \"pre\": \"\\u2AAF\",\n  \"prec\": \"\\u227A\",\n  \"precapprox\": \"\\u2AB7\",\n  \"preccurlyeq\": \"\\u227C\",\n  \"Precedes\": \"\\u227A\",\n  \"PrecedesEqual\": \"\\u2AAF\",\n  \"PrecedesSlantEqual\": \"\\u227C\",\n  \"PrecedesTilde\": \"\\u227E\",\n  \"preceq\": \"\\u2AAF\",\n  \"precnapprox\": \"\\u2AB9\",\n  \"precneqq\": \"\\u2AB5\",\n  \"precnsim\": \"\\u22E8\",\n  \"precsim\": \"\\u227E\",\n  \"Prime\": \"\\u2033\",\n  \"prime\": \"\\u2032\",\n  \"primes\": \"\\u2119\",\n  \"prnap\": \"\\u2AB9\",\n  \"prnE\": \"\\u2AB5\",\n  \"prnsim\": \"\\u22E8\",\n  \"prod\": \"\\u220F\",\n  \"Product\": \"\\u220F\",\n  \"profalar\": \"\\u232E\",\n  \"profline\": \"\\u2312\",\n  \"profsurf\": \"\\u2313\",\n  \"prop\": \"\\u221D\",\n  \"Proportion\": \"\\u2237\",\n  \"Proportional\": \"\\u221D\",\n  \"propto\": \"\\u221D\",\n  \"prsim\": \"\\u227E\",\n  \"prurel\": \"\\u22B0\",\n  \"Pscr\": \"\\uD835\\uDCAB\",\n  \"pscr\": \"\\uD835\\uDCC5\",\n  \"Psi\": \"\\u03A8\",\n  \"psi\": \"\\u03C8\",\n  \"puncsp\": \"\\u2008\",\n  \"Qfr\": \"\\uD835\\uDD14\",\n  \"qfr\": \"\\uD835\\uDD2E\",\n  \"qint\": \"\\u2A0C\",\n  \"Qopf\": \"\\u211A\",\n  \"qopf\": \"\\uD835\\uDD62\",\n  \"qprime\": \"\\u2057\",\n  \"Qscr\": \"\\uD835\\uDCAC\",\n  \"qscr\": \"\\uD835\\uDCC6\",\n  \"quaternions\": \"\\u210D\",\n  \"quatint\": \"\\u2A16\",\n  \"quest\": \"?\",\n  \"questeq\": \"\\u225F\",\n  \"QUOT\": \"\\\"\",\n  \"quot\": \"\\\"\",\n  \"rAarr\": \"\\u21DB\",\n  \"race\": \"\\u223D\\u0331\",\n  \"Racute\": \"\\u0154\",\n  \"racute\": \"\\u0155\",\n  \"radic\": \"\\u221A\",\n  \"raemptyv\": \"\\u29B3\",\n  \"Rang\": \"\\u27EB\",\n  \"rang\": \"\\u27E9\",\n  \"rangd\": \"\\u2992\",\n  \"range\": \"\\u29A5\",\n  \"rangle\": \"\\u27E9\",\n  \"raquo\": \"\\xBB\",\n  \"Rarr\": \"\\u21A0\",\n  \"rArr\": \"\\u21D2\",\n  \"rarr\": \"\\u2192\",\n  \"rarrap\": \"\\u2975\",\n  \"rarrb\": \"\\u21E5\",\n  \"rarrbfs\": \"\\u2920\",\n  \"rarrc\": \"\\u2933\",\n  \"rarrfs\": \"\\u291E\",\n  \"rarrhk\": \"\\u21AA\",\n  \"rarrlp\": \"\\u21AC\",\n  \"rarrpl\": \"\\u2945\",\n  \"rarrsim\": \"\\u2974\",\n  \"Rarrtl\": \"\\u2916\",\n  \"rarrtl\": \"\\u21A3\",\n  \"rarrw\": \"\\u219D\",\n  \"rAtail\": \"\\u291C\",\n  \"ratail\": \"\\u291A\",\n  \"ratio\": \"\\u2236\",\n  \"rationals\": \"\\u211A\",\n  \"RBarr\": \"\\u2910\",\n  \"rBarr\": \"\\u290F\",\n  \"rbarr\": \"\\u290D\",\n  \"rbbrk\": \"\\u2773\",\n  \"rbrace\": \"}\",\n  \"rbrack\": \"]\",\n  \"rbrke\": \"\\u298C\",\n  \"rbrksld\": \"\\u298E\",\n  \"rbrkslu\": \"\\u2990\",\n  \"Rcaron\": \"\\u0158\",\n  \"rcaron\": \"\\u0159\",\n  \"Rcedil\": \"\\u0156\",\n  \"rcedil\": \"\\u0157\",\n  \"rceil\": \"\\u2309\",\n  \"rcub\": \"}\",\n  \"Rcy\": \"\\u0420\",\n  \"rcy\": \"\\u0440\",\n  \"rdca\": \"\\u2937\",\n  \"rdldhar\": \"\\u2969\",\n  \"rdquo\": \"\\u201D\",\n  \"rdquor\": \"\\u201D\",\n  \"rdsh\": \"\\u21B3\",\n  \"Re\": \"\\u211C\",\n  \"real\": \"\\u211C\",\n  \"realine\": \"\\u211B\",\n  \"realpart\": \"\\u211C\",\n  \"reals\": \"\\u211D\",\n  \"rect\": \"\\u25AD\",\n  \"REG\": \"\\xAE\",\n  \"reg\": \"\\xAE\",\n  \"ReverseElement\": \"\\u220B\",\n  \"ReverseEquilibrium\": \"\\u21CB\",\n  \"ReverseUpEquilibrium\": \"\\u296F\",\n  \"rfisht\": \"\\u297D\",\n  \"rfloor\": \"\\u230B\",\n  \"Rfr\": \"\\u211C\",\n  \"rfr\": \"\\uD835\\uDD2F\",\n  \"rHar\": \"\\u2964\",\n  \"rhard\": \"\\u21C1\",\n  \"rharu\": \"\\u21C0\",\n  \"rharul\": \"\\u296C\",\n  \"Rho\": \"\\u03A1\",\n  \"rho\": \"\\u03C1\",\n  \"rhov\": \"\\u03F1\",\n  \"RightAngleBracket\": \"\\u27E9\",\n  \"RightArrow\": \"\\u2192\",\n  \"Rightarrow\": \"\\u21D2\",\n  \"rightarrow\": \"\\u2192\",\n  \"RightArrowBar\": \"\\u21E5\",\n  \"RightArrowLeftArrow\": \"\\u21C4\",\n  \"rightarrowtail\": \"\\u21A3\",\n  \"RightCeiling\": \"\\u2309\",\n  \"RightDoubleBracket\": \"\\u27E7\",\n  \"RightDownTeeVector\": \"\\u295D\",\n  \"RightDownVector\": \"\\u21C2\",\n  \"RightDownVectorBar\": \"\\u2955\",\n  \"RightFloor\": \"\\u230B\",\n  \"rightharpoondown\": \"\\u21C1\",\n  \"rightharpoonup\": \"\\u21C0\",\n  \"rightleftarrows\": \"\\u21C4\",\n  \"rightleftharpoons\": \"\\u21CC\",\n  \"rightrightarrows\": \"\\u21C9\",\n  \"rightsquigarrow\": \"\\u219D\",\n  \"RightTee\": \"\\u22A2\",\n  \"RightTeeArrow\": \"\\u21A6\",\n  \"RightTeeVector\": \"\\u295B\",\n  \"rightthreetimes\": \"\\u22CC\",\n  \"RightTriangle\": \"\\u22B3\",\n  \"RightTriangleBar\": \"\\u29D0\",\n  \"RightTriangleEqual\": \"\\u22B5\",\n  \"RightUpDownVector\": \"\\u294F\",\n  \"RightUpTeeVector\": \"\\u295C\",\n  \"RightUpVector\": \"\\u21BE\",\n  \"RightUpVectorBar\": \"\\u2954\",\n  \"RightVector\": \"\\u21C0\",\n  \"RightVectorBar\": \"\\u2953\",\n  \"ring\": \"\\u02DA\",\n  \"risingdotseq\": \"\\u2253\",\n  \"rlarr\": \"\\u21C4\",\n  \"rlhar\": \"\\u21CC\",\n  \"rlm\": \"\\u200F\",\n  \"rmoust\": \"\\u23B1\",\n  \"rmoustache\": \"\\u23B1\",\n  \"rnmid\": \"\\u2AEE\",\n  \"roang\": \"\\u27ED\",\n  \"roarr\": \"\\u21FE\",\n  \"robrk\": \"\\u27E7\",\n  \"ropar\": \"\\u2986\",\n  \"Ropf\": \"\\u211D\",\n  \"ropf\": \"\\uD835\\uDD63\",\n  \"roplus\": \"\\u2A2E\",\n  \"rotimes\": \"\\u2A35\",\n  \"RoundImplies\": \"\\u2970\",\n  \"rpar\": \")\",\n  \"rpargt\": \"\\u2994\",\n  \"rppolint\": \"\\u2A12\",\n  \"rrarr\": \"\\u21C9\",\n  \"Rrightarrow\": \"\\u21DB\",\n  \"rsaquo\": \"\\u203A\",\n  \"Rscr\": \"\\u211B\",\n  \"rscr\": \"\\uD835\\uDCC7\",\n  \"Rsh\": \"\\u21B1\",\n  \"rsh\": \"\\u21B1\",\n  \"rsqb\": \"]\",\n  \"rsquo\": \"\\u2019\",\n  \"rsquor\": \"\\u2019\",\n  \"rthree\": \"\\u22CC\",\n  \"rtimes\": \"\\u22CA\",\n  \"rtri\": \"\\u25B9\",\n  \"rtrie\": \"\\u22B5\",\n  \"rtrif\": \"\\u25B8\",\n  \"rtriltri\": \"\\u29CE\",\n  \"RuleDelayed\": \"\\u29F4\",\n  \"ruluhar\": \"\\u2968\",\n  \"rx\": \"\\u211E\",\n  \"Sacute\": \"\\u015A\",\n  \"sacute\": \"\\u015B\",\n  \"sbquo\": \"\\u201A\",\n  \"Sc\": \"\\u2ABC\",\n  \"sc\": \"\\u227B\",\n  \"scap\": \"\\u2AB8\",\n  \"Scaron\": \"\\u0160\",\n  \"scaron\": \"\\u0161\",\n  \"sccue\": \"\\u227D\",\n  \"scE\": \"\\u2AB4\",\n  \"sce\": \"\\u2AB0\",\n  \"Scedil\": \"\\u015E\",\n  \"scedil\": \"\\u015F\",\n  \"Scirc\": \"\\u015C\",\n  \"scirc\": \"\\u015D\",\n  \"scnap\": \"\\u2ABA\",\n  \"scnE\": \"\\u2AB6\",\n  \"scnsim\": \"\\u22E9\",\n  \"scpolint\": \"\\u2A13\",\n  \"scsim\": \"\\u227F\",\n  \"Scy\": \"\\u0421\",\n  \"scy\": \"\\u0441\",\n  \"sdot\": \"\\u22C5\",\n  \"sdotb\": \"\\u22A1\",\n  \"sdote\": \"\\u2A66\",\n  \"searhk\": \"\\u2925\",\n  \"seArr\": \"\\u21D8\",\n  \"searr\": \"\\u2198\",\n  \"searrow\": \"\\u2198\",\n  \"sect\": \"\\xA7\",\n  \"semi\": \";\",\n  \"seswar\": \"\\u2929\",\n  \"setminus\": \"\\u2216\",\n  \"setmn\": \"\\u2216\",\n  \"sext\": \"\\u2736\",\n  \"Sfr\": \"\\uD835\\uDD16\",\n  \"sfr\": \"\\uD835\\uDD30\",\n  \"sfrown\": \"\\u2322\",\n  \"sharp\": \"\\u266F\",\n  \"SHCHcy\": \"\\u0429\",\n  \"shchcy\": \"\\u0449\",\n  \"SHcy\": \"\\u0428\",\n  \"shcy\": \"\\u0448\",\n  \"ShortDownArrow\": \"\\u2193\",\n  \"ShortLeftArrow\": \"\\u2190\",\n  \"shortmid\": \"\\u2223\",\n  \"shortparallel\": \"\\u2225\",\n  \"ShortRightArrow\": \"\\u2192\",\n  \"ShortUpArrow\": \"\\u2191\",\n  \"shy\": \"\\xAD\",\n  \"Sigma\": \"\\u03A3\",\n  \"sigma\": \"\\u03C3\",\n  \"sigmaf\": \"\\u03C2\",\n  \"sigmav\": \"\\u03C2\",\n  \"sim\": \"\\u223C\",\n  \"simdot\": \"\\u2A6A\",\n  \"sime\": \"\\u2243\",\n  \"simeq\": \"\\u2243\",\n  \"simg\": \"\\u2A9E\",\n  \"simgE\": \"\\u2AA0\",\n  \"siml\": \"\\u2A9D\",\n  \"simlE\": \"\\u2A9F\",\n  \"simne\": \"\\u2246\",\n  \"simplus\": \"\\u2A24\",\n  \"simrarr\": \"\\u2972\",\n  \"slarr\": \"\\u2190\",\n  \"SmallCircle\": \"\\u2218\",\n  \"smallsetminus\": \"\\u2216\",\n  \"smashp\": \"\\u2A33\",\n  \"smeparsl\": \"\\u29E4\",\n  \"smid\": \"\\u2223\",\n  \"smile\": \"\\u2323\",\n  \"smt\": \"\\u2AAA\",\n  \"smte\": \"\\u2AAC\",\n  \"smtes\": \"\\u2AAC\\uFE00\",\n  \"SOFTcy\": \"\\u042C\",\n  \"softcy\": \"\\u044C\",\n  \"sol\": \"/\",\n  \"solb\": \"\\u29C4\",\n  \"solbar\": \"\\u233F\",\n  \"Sopf\": \"\\uD835\\uDD4A\",\n  \"sopf\": \"\\uD835\\uDD64\",\n  \"spades\": \"\\u2660\",\n  \"spadesuit\": \"\\u2660\",\n  \"spar\": \"\\u2225\",\n  \"sqcap\": \"\\u2293\",\n  \"sqcaps\": \"\\u2293\\uFE00\",\n  \"sqcup\": \"\\u2294\",\n  \"sqcups\": \"\\u2294\\uFE00\",\n  \"Sqrt\": \"\\u221A\",\n  \"sqsub\": \"\\u228F\",\n  \"sqsube\": \"\\u2291\",\n  \"sqsubset\": \"\\u228F\",\n  \"sqsubseteq\": \"\\u2291\",\n  \"sqsup\": \"\\u2290\",\n  \"sqsupe\": \"\\u2292\",\n  \"sqsupset\": \"\\u2290\",\n  \"sqsupseteq\": \"\\u2292\",\n  \"squ\": \"\\u25A1\",\n  \"Square\": \"\\u25A1\",\n  \"square\": \"\\u25A1\",\n  \"SquareIntersection\": \"\\u2293\",\n  \"SquareSubset\": \"\\u228F\",\n  \"SquareSubsetEqual\": \"\\u2291\",\n  \"SquareSuperset\": \"\\u2290\",\n  \"SquareSupersetEqual\": \"\\u2292\",\n  \"SquareUnion\": \"\\u2294\",\n  \"squarf\": \"\\u25AA\",\n  \"squf\": \"\\u25AA\",\n  \"srarr\": \"\\u2192\",\n  \"Sscr\": \"\\uD835\\uDCAE\",\n  \"sscr\": \"\\uD835\\uDCC8\",\n  \"ssetmn\": \"\\u2216\",\n  \"ssmile\": \"\\u2323\",\n  \"sstarf\": \"\\u22C6\",\n  \"Star\": \"\\u22C6\",\n  \"star\": \"\\u2606\",\n  \"starf\": \"\\u2605\",\n  \"straightepsilon\": \"\\u03F5\",\n  \"straightphi\": \"\\u03D5\",\n  \"strns\": \"\\xAF\",\n  \"Sub\": \"\\u22D0\",\n  \"sub\": \"\\u2282\",\n  \"subdot\": \"\\u2ABD\",\n  \"subE\": \"\\u2AC5\",\n  \"sube\": \"\\u2286\",\n  \"subedot\": \"\\u2AC3\",\n  \"submult\": \"\\u2AC1\",\n  \"subnE\": \"\\u2ACB\",\n  \"subne\": \"\\u228A\",\n  \"subplus\": \"\\u2ABF\",\n  \"subrarr\": \"\\u2979\",\n  \"Subset\": \"\\u22D0\",\n  \"subset\": \"\\u2282\",\n  \"subseteq\": \"\\u2286\",\n  \"subseteqq\": \"\\u2AC5\",\n  \"SubsetEqual\": \"\\u2286\",\n  \"subsetneq\": \"\\u228A\",\n  \"subsetneqq\": \"\\u2ACB\",\n  \"subsim\": \"\\u2AC7\",\n  \"subsub\": \"\\u2AD5\",\n  \"subsup\": \"\\u2AD3\",\n  \"succ\": \"\\u227B\",\n  \"succapprox\": \"\\u2AB8\",\n  \"succcurlyeq\": \"\\u227D\",\n  \"Succeeds\": \"\\u227B\",\n  \"SucceedsEqual\": \"\\u2AB0\",\n  \"SucceedsSlantEqual\": \"\\u227D\",\n  \"SucceedsTilde\": \"\\u227F\",\n  \"succeq\": \"\\u2AB0\",\n  \"succnapprox\": \"\\u2ABA\",\n  \"succneqq\": \"\\u2AB6\",\n  \"succnsim\": \"\\u22E9\",\n  \"succsim\": \"\\u227F\",\n  \"SuchThat\": \"\\u220B\",\n  \"Sum\": \"\\u2211\",\n  \"sum\": \"\\u2211\",\n  \"sung\": \"\\u266A\",\n  \"Sup\": \"\\u22D1\",\n  \"sup\": \"\\u2283\",\n  \"sup1\": \"\\xB9\",\n  \"sup2\": \"\\xB2\",\n  \"sup3\": \"\\xB3\",\n  \"supdot\": \"\\u2ABE\",\n  \"supdsub\": \"\\u2AD8\",\n  \"supE\": \"\\u2AC6\",\n  \"supe\": \"\\u2287\",\n  \"supedot\": \"\\u2AC4\",\n  \"Superset\": \"\\u2283\",\n  \"SupersetEqual\": \"\\u2287\",\n  \"suphsol\": \"\\u27C9\",\n  \"suphsub\": \"\\u2AD7\",\n  \"suplarr\": \"\\u297B\",\n  \"supmult\": \"\\u2AC2\",\n  \"supnE\": \"\\u2ACC\",\n  \"supne\": \"\\u228B\",\n  \"supplus\": \"\\u2AC0\",\n  \"Supset\": \"\\u22D1\",\n  \"supset\": \"\\u2283\",\n  \"supseteq\": \"\\u2287\",\n  \"supseteqq\": \"\\u2AC6\",\n  \"supsetneq\": \"\\u228B\",\n  \"supsetneqq\": \"\\u2ACC\",\n  \"supsim\": \"\\u2AC8\",\n  \"supsub\": \"\\u2AD4\",\n  \"supsup\": \"\\u2AD6\",\n  \"swarhk\": \"\\u2926\",\n  \"swArr\": \"\\u21D9\",\n  \"swarr\": \"\\u2199\",\n  \"swarrow\": \"\\u2199\",\n  \"swnwar\": \"\\u292A\",\n  \"szlig\": \"\\xDF\",\n  \"Tab\": \"\\t\",\n  \"target\": \"\\u2316\",\n  \"Tau\": \"\\u03A4\",\n  \"tau\": \"\\u03C4\",\n  \"tbrk\": \"\\u23B4\",\n  \"Tcaron\": \"\\u0164\",\n  \"tcaron\": \"\\u0165\",\n  \"Tcedil\": \"\\u0162\",\n  \"tcedil\": \"\\u0163\",\n  \"Tcy\": \"\\u0422\",\n  \"tcy\": \"\\u0442\",\n  \"tdot\": \"\\u20DB\",\n  \"telrec\": \"\\u2315\",\n  \"Tfr\": \"\\uD835\\uDD17\",\n  \"tfr\": \"\\uD835\\uDD31\",\n  \"there4\": \"\\u2234\",\n  \"Therefore\": \"\\u2234\",\n  \"therefore\": \"\\u2234\",\n  \"Theta\": \"\\u0398\",\n  \"theta\": \"\\u03B8\",\n  \"thetasym\": \"\\u03D1\",\n  \"thetav\": \"\\u03D1\",\n  \"thickapprox\": \"\\u2248\",\n  \"thicksim\": \"\\u223C\",\n  \"ThickSpace\": \"\\u205F\\u200A\",\n  \"thinsp\": \"\\u2009\",\n  \"ThinSpace\": \"\\u2009\",\n  \"thkap\": \"\\u2248\",\n  \"thksim\": \"\\u223C\",\n  \"THORN\": \"\\xDE\",\n  \"thorn\": \"\\xFE\",\n  \"Tilde\": \"\\u223C\",\n  \"tilde\": \"\\u02DC\",\n  \"TildeEqual\": \"\\u2243\",\n  \"TildeFullEqual\": \"\\u2245\",\n  \"TildeTilde\": \"\\u2248\",\n  \"times\": \"\\xD7\",\n  \"timesb\": \"\\u22A0\",\n  \"timesbar\": \"\\u2A31\",\n  \"timesd\": \"\\u2A30\",\n  \"tint\": \"\\u222D\",\n  \"toea\": \"\\u2928\",\n  \"top\": \"\\u22A4\",\n  \"topbot\": \"\\u2336\",\n  \"topcir\": \"\\u2AF1\",\n  \"Topf\": \"\\uD835\\uDD4B\",\n  \"topf\": \"\\uD835\\uDD65\",\n  \"topfork\": \"\\u2ADA\",\n  \"tosa\": \"\\u2929\",\n  \"tprime\": \"\\u2034\",\n  \"TRADE\": \"\\u2122\",\n  \"trade\": \"\\u2122\",\n  \"triangle\": \"\\u25B5\",\n  \"triangledown\": \"\\u25BF\",\n  \"triangleleft\": \"\\u25C3\",\n  \"trianglelefteq\": \"\\u22B4\",\n  \"triangleq\": \"\\u225C\",\n  \"triangleright\": \"\\u25B9\",\n  \"trianglerighteq\": \"\\u22B5\",\n  \"tridot\": \"\\u25EC\",\n  \"trie\": \"\\u225C\",\n  \"triminus\": \"\\u2A3A\",\n  \"TripleDot\": \"\\u20DB\",\n  \"triplus\": \"\\u2A39\",\n  \"trisb\": \"\\u29CD\",\n  \"tritime\": \"\\u2A3B\",\n  \"trpezium\": \"\\u23E2\",\n  \"Tscr\": \"\\uD835\\uDCAF\",\n  \"tscr\": \"\\uD835\\uDCC9\",\n  \"TScy\": \"\\u0426\",\n  \"tscy\": \"\\u0446\",\n  \"TSHcy\": \"\\u040B\",\n  \"tshcy\": \"\\u045B\",\n  \"Tstrok\": \"\\u0166\",\n  \"tstrok\": \"\\u0167\",\n  \"twixt\": \"\\u226C\",\n  \"twoheadleftarrow\": \"\\u219E\",\n  \"twoheadrightarrow\": \"\\u21A0\",\n  \"Uacute\": \"\\xDA\",\n  \"uacute\": \"\\xFA\",\n  \"Uarr\": \"\\u219F\",\n  \"uArr\": \"\\u21D1\",\n  \"uarr\": \"\\u2191\",\n  \"Uarrocir\": \"\\u2949\",\n  \"Ubrcy\": \"\\u040E\",\n  \"ubrcy\": \"\\u045E\",\n  \"Ubreve\": \"\\u016C\",\n  \"ubreve\": \"\\u016D\",\n  \"Ucirc\": \"\\xDB\",\n  \"ucirc\": \"\\xFB\",\n  \"Ucy\": \"\\u0423\",\n  \"ucy\": \"\\u0443\",\n  \"udarr\": \"\\u21C5\",\n  \"Udblac\": \"\\u0170\",\n  \"udblac\": \"\\u0171\",\n  \"udhar\": \"\\u296E\",\n  \"ufisht\": \"\\u297E\",\n  \"Ufr\": \"\\uD835\\uDD18\",\n  \"ufr\": \"\\uD835\\uDD32\",\n  \"Ugrave\": \"\\xD9\",\n  \"ugrave\": \"\\xF9\",\n  \"uHar\": \"\\u2963\",\n  \"uharl\": \"\\u21BF\",\n  \"uharr\": \"\\u21BE\",\n  \"uhblk\": \"\\u2580\",\n  \"ulcorn\": \"\\u231C\",\n  \"ulcorner\": \"\\u231C\",\n  \"ulcrop\": \"\\u230F\",\n  \"ultri\": \"\\u25F8\",\n  \"Umacr\": \"\\u016A\",\n  \"umacr\": \"\\u016B\",\n  \"uml\": \"\\xA8\",\n  \"UnderBar\": \"_\",\n  \"UnderBrace\": \"\\u23DF\",\n  \"UnderBracket\": \"\\u23B5\",\n  \"UnderParenthesis\": \"\\u23DD\",\n  \"Union\": \"\\u22C3\",\n  \"UnionPlus\": \"\\u228E\",\n  \"Uogon\": \"\\u0172\",\n  \"uogon\": \"\\u0173\",\n  \"Uopf\": \"\\uD835\\uDD4C\",\n  \"uopf\": \"\\uD835\\uDD66\",\n  \"UpArrow\": \"\\u2191\",\n  \"Uparrow\": \"\\u21D1\",\n  \"uparrow\": \"\\u2191\",\n  \"UpArrowBar\": \"\\u2912\",\n  \"UpArrowDownArrow\": \"\\u21C5\",\n  \"UpDownArrow\": \"\\u2195\",\n  \"Updownarrow\": \"\\u21D5\",\n  \"updownarrow\": \"\\u2195\",\n  \"UpEquilibrium\": \"\\u296E\",\n  \"upharpoonleft\": \"\\u21BF\",\n  \"upharpoonright\": \"\\u21BE\",\n  \"uplus\": \"\\u228E\",\n  \"UpperLeftArrow\": \"\\u2196\",\n  \"UpperRightArrow\": \"\\u2197\",\n  \"Upsi\": \"\\u03D2\",\n  \"upsi\": \"\\u03C5\",\n  \"upsih\": \"\\u03D2\",\n  \"Upsilon\": \"\\u03A5\",\n  \"upsilon\": \"\\u03C5\",\n  \"UpTee\": \"\\u22A5\",\n  \"UpTeeArrow\": \"\\u21A5\",\n  \"upuparrows\": \"\\u21C8\",\n  \"urcorn\": \"\\u231D\",\n  \"urcorner\": \"\\u231D\",\n  \"urcrop\": \"\\u230E\",\n  \"Uring\": \"\\u016E\",\n  \"uring\": \"\\u016F\",\n  \"urtri\": \"\\u25F9\",\n  \"Uscr\": \"\\uD835\\uDCB0\",\n  \"uscr\": \"\\uD835\\uDCCA\",\n  \"utdot\": \"\\u22F0\",\n  \"Utilde\": \"\\u0168\",\n  \"utilde\": \"\\u0169\",\n  \"utri\": \"\\u25B5\",\n  \"utrif\": \"\\u25B4\",\n  \"uuarr\": \"\\u21C8\",\n  \"Uuml\": \"\\xDC\",\n  \"uuml\": \"\\xFC\",\n  \"uwangle\": \"\\u29A7\",\n  \"vangrt\": \"\\u299C\",\n  \"varepsilon\": \"\\u03F5\",\n  \"varkappa\": \"\\u03F0\",\n  \"varnothing\": \"\\u2205\",\n  \"varphi\": \"\\u03D5\",\n  \"varpi\": \"\\u03D6\",\n  \"varpropto\": \"\\u221D\",\n  \"vArr\": \"\\u21D5\",\n  \"varr\": \"\\u2195\",\n  \"varrho\": \"\\u03F1\",\n  \"varsigma\": \"\\u03C2\",\n  \"varsubsetneq\": \"\\u228A\\uFE00\",\n  \"varsubsetneqq\": \"\\u2ACB\\uFE00\",\n  \"varsupsetneq\": \"\\u228B\\uFE00\",\n  \"varsupsetneqq\": \"\\u2ACC\\uFE00\",\n  \"vartheta\": \"\\u03D1\",\n  \"vartriangleleft\": \"\\u22B2\",\n  \"vartriangleright\": \"\\u22B3\",\n  \"Vbar\": \"\\u2AEB\",\n  \"vBar\": \"\\u2AE8\",\n  \"vBarv\": \"\\u2AE9\",\n  \"Vcy\": \"\\u0412\",\n  \"vcy\": \"\\u0432\",\n  \"VDash\": \"\\u22AB\",\n  \"Vdash\": \"\\u22A9\",\n  \"vDash\": \"\\u22A8\",\n  \"vdash\": \"\\u22A2\",\n  \"Vdashl\": \"\\u2AE6\",\n  \"Vee\": \"\\u22C1\",\n  \"vee\": \"\\u2228\",\n  \"veebar\": \"\\u22BB\",\n  \"veeeq\": \"\\u225A\",\n  \"vellip\": \"\\u22EE\",\n  \"Verbar\": \"\\u2016\",\n  \"verbar\": \"|\",\n  \"Vert\": \"\\u2016\",\n  \"vert\": \"|\",\n  \"VerticalBar\": \"\\u2223\",\n  \"VerticalLine\": \"|\",\n  \"VerticalSeparator\": \"\\u2758\",\n  \"VerticalTilde\": \"\\u2240\",\n  \"VeryThinSpace\": \"\\u200A\",\n  \"Vfr\": \"\\uD835\\uDD19\",\n  \"vfr\": \"\\uD835\\uDD33\",\n  \"vltri\": \"\\u22B2\",\n  \"vnsub\": \"\\u2282\\u20D2\",\n  \"vnsup\": \"\\u2283\\u20D2\",\n  \"Vopf\": \"\\uD835\\uDD4D\",\n  \"vopf\": \"\\uD835\\uDD67\",\n  \"vprop\": \"\\u221D\",\n  \"vrtri\": \"\\u22B3\",\n  \"Vscr\": \"\\uD835\\uDCB1\",\n  \"vscr\": \"\\uD835\\uDCCB\",\n  \"vsubnE\": \"\\u2ACB\\uFE00\",\n  \"vsubne\": \"\\u228A\\uFE00\",\n  \"vsupnE\": \"\\u2ACC\\uFE00\",\n  \"vsupne\": \"\\u228B\\uFE00\",\n  \"Vvdash\": \"\\u22AA\",\n  \"vzigzag\": \"\\u299A\",\n  \"Wcirc\": \"\\u0174\",\n  \"wcirc\": \"\\u0175\",\n  \"wedbar\": \"\\u2A5F\",\n  \"Wedge\": \"\\u22C0\",\n  \"wedge\": \"\\u2227\",\n  \"wedgeq\": \"\\u2259\",\n  \"weierp\": \"\\u2118\",\n  \"Wfr\": \"\\uD835\\uDD1A\",\n  \"wfr\": \"\\uD835\\uDD34\",\n  \"Wopf\": \"\\uD835\\uDD4E\",\n  \"wopf\": \"\\uD835\\uDD68\",\n  \"wp\": \"\\u2118\",\n  \"wr\": \"\\u2240\",\n  \"wreath\": \"\\u2240\",\n  \"Wscr\": \"\\uD835\\uDCB2\",\n  \"wscr\": \"\\uD835\\uDCCC\",\n  \"xcap\": \"\\u22C2\",\n  \"xcirc\": \"\\u25EF\",\n  \"xcup\": \"\\u22C3\",\n  \"xdtri\": \"\\u25BD\",\n  \"Xfr\": \"\\uD835\\uDD1B\",\n  \"xfr\": \"\\uD835\\uDD35\",\n  \"xhArr\": \"\\u27FA\",\n  \"xharr\": \"\\u27F7\",\n  \"Xi\": \"\\u039E\",\n  \"xi\": \"\\u03BE\",\n  \"xlArr\": \"\\u27F8\",\n  \"xlarr\": \"\\u27F5\",\n  \"xmap\": \"\\u27FC\",\n  \"xnis\": \"\\u22FB\",\n  \"xodot\": \"\\u2A00\",\n  \"Xopf\": \"\\uD835\\uDD4F\",\n  \"xopf\": \"\\uD835\\uDD69\",\n  \"xoplus\": \"\\u2A01\",\n  \"xotime\": \"\\u2A02\",\n  \"xrArr\": \"\\u27F9\",\n  \"xrarr\": \"\\u27F6\",\n  \"Xscr\": \"\\uD835\\uDCB3\",\n  \"xscr\": \"\\uD835\\uDCCD\",\n  \"xsqcup\": \"\\u2A06\",\n  \"xuplus\": \"\\u2A04\",\n  \"xutri\": \"\\u25B3\",\n  \"xvee\": \"\\u22C1\",\n  \"xwedge\": \"\\u22C0\",\n  \"Yacute\": \"\\xDD\",\n  \"yacute\": \"\\xFD\",\n  \"YAcy\": \"\\u042F\",\n  \"yacy\": \"\\u044F\",\n  \"Ycirc\": \"\\u0176\",\n  \"ycirc\": \"\\u0177\",\n  \"Ycy\": \"\\u042B\",\n  \"ycy\": \"\\u044B\",\n  \"yen\": \"\\xA5\",\n  \"Yfr\": \"\\uD835\\uDD1C\",\n  \"yfr\": \"\\uD835\\uDD36\",\n  \"YIcy\": \"\\u0407\",\n  \"yicy\": \"\\u0457\",\n  \"Yopf\": \"\\uD835\\uDD50\",\n  \"yopf\": \"\\uD835\\uDD6A\",\n  \"Yscr\": \"\\uD835\\uDCB4\",\n  \"yscr\": \"\\uD835\\uDCCE\",\n  \"YUcy\": \"\\u042E\",\n  \"yucy\": \"\\u044E\",\n  \"Yuml\": \"\\u0178\",\n  \"yuml\": \"\\xFF\",\n  \"Zacute\": \"\\u0179\",\n  \"zacute\": \"\\u017A\",\n  \"Zcaron\": \"\\u017D\",\n  \"zcaron\": \"\\u017E\",\n  \"Zcy\": \"\\u0417\",\n  \"zcy\": \"\\u0437\",\n  \"Zdot\": \"\\u017B\",\n  \"zdot\": \"\\u017C\",\n  \"zeetrf\": \"\\u2128\",\n  \"ZeroWidthSpace\": \"\\u200B\",\n  \"Zeta\": \"\\u0396\",\n  \"zeta\": \"\\u03B6\",\n  \"Zfr\": \"\\u2128\",\n  \"zfr\": \"\\uD835\\uDD37\",\n  \"ZHcy\": \"\\u0416\",\n  \"zhcy\": \"\\u0436\",\n  \"zigrarr\": \"\\u21DD\",\n  \"Zopf\": \"\\u2124\",\n  \"zopf\": \"\\uD835\\uDD6B\",\n  \"Zscr\": \"\\uD835\\uDCB5\",\n  \"zscr\": \"\\uD835\\uDCCF\",\n  \"zwj\": \"\\u200D\",\n  \"zwnj\": \"\\u200C\"\n};","'use strict';\n\nvar normalizeLink = require('./normalize_link');\n\nvar unescapeMd = require('../common/utils').unescapeMd;\n/**\n * Parse link destination\n *\n *   - on success it returns a string and updates state.pos;\n *   - on failure it returns null\n *\n * @param  {Object} state\n * @param  {Number} pos\n * @api private\n */\n\n\nmodule.exports = function parseLinkDestination(state, pos) {\n  var code,\n      level,\n      link,\n      start = pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) === 0x3C\n  /* < */\n  ) {\n      pos++;\n\n      while (pos < max) {\n        code = state.src.charCodeAt(pos);\n\n        if (code === 0x0A\n        /* \\n */\n        ) {\n            return false;\n          }\n\n        if (code === 0x3E\n        /* > */\n        ) {\n            link = normalizeLink(unescapeMd(state.src.slice(start + 1, pos)));\n\n            if (!state.parser.validateLink(link)) {\n              return false;\n            }\n\n            state.pos = pos + 1;\n            state.linkContent = link;\n            return true;\n          }\n\n        if (code === 0x5C\n        /* \\ */\n        && pos + 1 < max) {\n          pos += 2;\n          continue;\n        }\n\n        pos++;\n      } // no closing '>'\n\n\n      return false;\n    } // this should be ... } else { ... branch\n\n\n  level = 0;\n\n  while (pos < max) {\n    code = state.src.charCodeAt(pos);\n\n    if (code === 0x20) {\n      break;\n    }\n\n    if (code > 0x08 && code < 0x0e) {\n      break;\n    }\n\n    if (code === 0x5C\n    /* \\ */\n    && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28\n    /* ( */\n    ) {\n        level++;\n\n        if (level > 1) {\n          break;\n        }\n      }\n\n    if (code === 0x29\n    /* ) */\n    ) {\n        level--;\n\n        if (level < 0) {\n          break;\n        }\n      }\n\n    pos++;\n  }\n\n  if (start === pos) {\n    return false;\n  }\n\n  link = unescapeMd(state.src.slice(start, pos));\n\n  if (!state.parser.validateLink(link)) {\n    return false;\n  }\n\n  state.linkContent = link;\n  state.pos = pos;\n  return true;\n};","'use strict';\n\nvar replaceEntities = require('../common/utils').replaceEntities;\n\nmodule.exports = function normalizeLink(url) {\n  var normalized = replaceEntities(url); // We shouldn't care about the result of malformed URIs,\n  // and should not throw an exception.\n\n  try {\n    normalized = decodeURI(normalized);\n  } catch (err) {}\n\n  return encodeURI(normalized);\n};","'use strict';\n\nvar unescapeMd = require('../common/utils').unescapeMd;\n/**\n * Parse link title\n *\n *   - on success it returns a string and updates state.pos;\n *   - on failure it returns null\n *\n * @param  {Object} state\n * @param  {Number} pos\n * @api private\n */\n\n\nmodule.exports = function parseLinkTitle(state, pos) {\n  var code,\n      start = pos,\n      max = state.posMax,\n      marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x22\n  /* \" */\n  && marker !== 0x27\n  /* ' */\n  && marker !== 0x28\n  /* ( */\n  ) {\n      return false;\n    }\n\n  pos++; // if opening marker is \"(\", switch it to closing marker \")\"\n\n  if (marker === 0x28) {\n    marker = 0x29;\n  }\n\n  while (pos < max) {\n    code = state.src.charCodeAt(pos);\n\n    if (code === marker) {\n      state.pos = pos + 1;\n      state.linkContent = unescapeMd(state.src.slice(start + 1, pos));\n      return true;\n    }\n\n    if (code === 0x5C\n    /* \\ */\n    && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    pos++;\n  }\n\n  return false;\n};","'use strict';\n\nmodule.exports = function normalizeReference(str) {\n  // use .toUpperCase() instead of .toLowerCase()\n  // here to avoid a conflict with Object.prototype\n  // members (most notably, `__proto__`)\n  return str.trim().replace(/\\s+/g, ' ').toUpperCase();\n};","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _remarkable = require('remarkable');\n\nvar _remarkable2 = _interopRequireDefault(_remarkable);\n\nvar Remarkable = function (_React$Component) {\n  _inherits(Remarkable, _React$Component);\n\n  function Remarkable() {\n    _classCallCheck(this, Remarkable);\n\n    _get(Object.getPrototypeOf(Remarkable.prototype), 'constructor', this).apply(this, arguments);\n  }\n\n  _createClass(Remarkable, [{\n    key: 'render',\n    value: function render() {\n      var Container = this.props.container;\n      return _react2['default'].createElement(Container, null, this.content());\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextProps.options !== this.props.options) {\n        this.md = new _remarkable2['default'](nextProps.options);\n      }\n    }\n  }, {\n    key: 'content',\n    value: function content() {\n      var _this = this;\n\n      if (this.props.source) {\n        return _react2['default'].createElement('span', {\n          dangerouslySetInnerHTML: {\n            __html: this.renderMarkdown(this.props.source)\n          }\n        });\n      } else {\n        return _react2['default'].Children.map(this.props.children, function (child) {\n          if (typeof child === 'string') {\n            return _react2['default'].createElement('span', {\n              dangerouslySetInnerHTML: {\n                __html: _this.renderMarkdown(child)\n              }\n            });\n          } else {\n            return child;\n          }\n        });\n      }\n    }\n  }, {\n    key: 'renderMarkdown',\n    value: function renderMarkdown(source) {\n      if (!this.md) {\n        this.md = new _remarkable2['default'](this.props.options);\n      }\n\n      return this.md.render(source);\n    }\n  }]);\n\n  return Remarkable;\n}(_react2['default'].Component);\n\nRemarkable.defaultProps = {\n  container: 'div',\n  options: {}\n};\nexports['default'] = Remarkable;\nmodule.exports = exports['default'];","'use strict';\n\nmodule.exports = require('./lib/');","'use strict';\n/**\n * Local dependencies\n */\n\nvar assign = require('./common/utils').assign;\n\nvar Renderer = require('./renderer');\n\nvar ParserCore = require('./parser_core');\n\nvar ParserBlock = require('./parser_block');\n\nvar ParserInline = require('./parser_inline');\n\nvar Ruler = require('./ruler');\n/**\n * Preset configs\n */\n\n\nvar config = {\n  'default': require('./configs/default'),\n  'full': require('./configs/full'),\n  'commonmark': require('./configs/commonmark')\n};\n/**\n * The `StateCore` class manages state.\n *\n * @param {Object} `instance` Remarkable instance\n * @param {String} `str` Markdown string\n * @param {Object} `env`\n */\n\nfunction StateCore(instance, str, env) {\n  this.src = str;\n  this.env = env;\n  this.options = instance.options;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.inline = instance.inline;\n  this.block = instance.block;\n  this.renderer = instance.renderer;\n  this.typographer = instance.typographer;\n}\n/**\n * The main `Remarkable` class. Create an instance of\n * `Remarkable` with a `preset` and/or `options`.\n *\n * @param {String} `preset` If no preset is given, `default` is used.\n * @param {Object} `options`\n */\n\n\nfunction Remarkable(preset, options) {\n  if (typeof preset !== 'string') {\n    options = preset;\n    preset = 'default';\n  }\n\n  this.inline = new ParserInline();\n  this.block = new ParserBlock();\n  this.core = new ParserCore();\n  this.renderer = new Renderer();\n  this.ruler = new Ruler();\n  this.options = {};\n  this.configure(config[preset]);\n  this.set(options || {});\n}\n/**\n * Set options as an alternative to passing them\n * to the constructor.\n *\n * ```js\n * md.set({typographer: true});\n * ```\n * @param {Object} `options`\n * @api public\n */\n\n\nRemarkable.prototype.set = function (options) {\n  assign(this.options, options);\n};\n/**\n * Batch loader for components rules states, and options\n *\n * @param  {Object} `presets`\n */\n\n\nRemarkable.prototype.configure = function (presets) {\n  var self = this;\n\n  if (!presets) {\n    throw new Error('Wrong `remarkable` preset, check name/content');\n  }\n\n  if (presets.options) {\n    self.set(presets.options);\n  }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enable(presets.components[name].rules, true);\n      }\n    });\n  }\n};\n/**\n * Use a plugin.\n *\n * ```js\n * var md = new Remarkable();\n *\n * md.use(plugin1)\n *   .use(plugin2, opts)\n *   .use(plugin3);\n * ```\n *\n * @param  {Function} `plugin`\n * @param  {Object} `options`\n * @return {Object} `Remarkable` for chaining\n */\n\n\nRemarkable.prototype.use = function (plugin, options) {\n  plugin(this, options);\n  return this;\n};\n/**\n * Parse the input `string` and return a tokens array.\n * Modifies `env` with definitions data.\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {Array} Array of tokens\n */\n\n\nRemarkable.prototype.parse = function (str, env) {\n  var state = new StateCore(this, str, env);\n  this.core.process(state);\n  return state.tokens;\n};\n/**\n * The main `.render()` method that does all the magic :)\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {String} Rendered HTML.\n */\n\n\nRemarkable.prototype.render = function (str, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(str, env), this.options, env);\n};\n/**\n * Parse the given content `string` as a single string.\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {Array} Array of tokens\n */\n\n\nRemarkable.prototype.parseInline = function (str, env) {\n  var state = new StateCore(this, str, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n/**\n * Render a single content `string`, without wrapping it\n * to paragraphs\n *\n * @param  {String} `str`\n * @param  {Object} `env`\n * @return {String}\n */\n\n\nRemarkable.prototype.renderInline = function (str, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(str, env), this.options, env);\n};\n/**\n * Expose `Remarkable`\n */\n\n\nmodule.exports = Remarkable;\n/**\n * Expose `utils`, Useful helper functions for custom\n * rendering.\n */\n\nmodule.exports.utils = require('./common/utils');","'use strict';\n/**\n * Local dependencies\n */\n\nvar utils = require('./common/utils');\n\nvar rules = require('./rules');\n/**\n * Expose `Renderer`\n */\n\n\nmodule.exports = Renderer;\n/**\n * Renderer class. Renders HTML and exposes `rules` to allow\n * local modifications.\n */\n\nfunction Renderer() {\n  this.rules = utils.assign({}, rules); // exported helper, for custom rules only\n\n  this.getBreak = rules.getBreak;\n}\n/**\n * Render a string of inline HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\n\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length,\n      i = 0;\n  var result = '';\n\n  while (len--) {\n    result += _rules[tokens[i].type](tokens, i++, options, env, this);\n  }\n\n  return result;\n};\n/**\n * Render a string of HTML with the given `tokens` and\n * `options`.\n *\n * @param  {Array} `tokens`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @return {String}\n * @api public\n */\n\n\nRenderer.prototype.render = function (tokens, options, env) {\n  var _rules = this.rules;\n  var len = tokens.length,\n      i = -1;\n  var result = '';\n\n  while (++i < len) {\n    if (tokens[i].type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else {\n      result += _rules[tokens[i].type](tokens, i, options, env, this);\n    }\n  }\n\n  return result;\n};","'use strict';\n/**\n * Local dependencies\n */\n\nvar has = require('./common/utils').has;\n\nvar unescapeMd = require('./common/utils').unescapeMd;\n\nvar replaceEntities = require('./common/utils').replaceEntities;\n\nvar escapeHtml = require('./common/utils').escapeHtml;\n/**\n * Renderer rules cache\n */\n\n\nvar rules = {};\n/**\n * Blockquotes\n */\n\nrules.blockquote_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<blockquote>\\n';\n};\n\nrules.blockquote_close = function (tokens, idx\n/*, options, env */\n) {\n  return '</blockquote>' + getBreak(tokens, idx);\n};\n/**\n * Code\n */\n\n\nrules.code = function (tokens, idx\n/*, options, env */\n) {\n  if (tokens[idx].block) {\n    return '<pre><code>' + escapeHtml(tokens[idx].content) + '</code></pre>' + getBreak(tokens, idx);\n  }\n\n  return '<code>' + escapeHtml(tokens[idx].content) + '</code>';\n};\n/**\n * Fenced code blocks\n */\n\n\nrules.fence = function (tokens, idx, options, env, instance) {\n  var token = tokens[idx];\n  var langClass = '';\n  var langPrefix = options.langPrefix;\n  var langName = '',\n      fences,\n      fenceName;\n  var highlighted;\n\n  if (token.params) {\n    //\n    // ```foo bar\n    //\n    // Try custom renderer \"foo\" first. That will simplify overwrite\n    // for diagrams, latex, and any other fenced block with custom look\n    //\n    fences = token.params.split(/\\s+/g);\n    fenceName = fences.join(' ');\n\n    if (has(instance.rules.fence_custom, fences[0])) {\n      return instance.rules.fence_custom[fences[0]](tokens, idx, options, env, instance);\n    }\n\n    langName = escapeHtml(replaceEntities(unescapeMd(fenceName)));\n    langClass = ' class=\"' + langPrefix + langName + '\"';\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight.apply(options.highlight, [token.content].concat(fences)) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  return '<pre><code' + langClass + '>' + highlighted + '</code></pre>' + getBreak(tokens, idx);\n};\n\nrules.fence_custom = {};\n/**\n * Headings\n */\n\nrules.heading_open = function (tokens, idx\n/*, options, env */\n) {\n  return '<h' + tokens[idx].hLevel + '>';\n};\n\nrules.heading_close = function (tokens, idx\n/*, options, env */\n) {\n  return '</h' + tokens[idx].hLevel + '>\\n';\n};\n/**\n * Horizontal rules\n */\n\n\nrules.hr = function (tokens, idx, options\n/*, env */\n) {\n  return (options.xhtmlOut ? '<hr />' : '<hr>') + getBreak(tokens, idx);\n};\n/**\n * Bullets\n */\n\n\nrules.bullet_list_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<ul>\\n';\n};\n\nrules.bullet_list_close = function (tokens, idx\n/*, options, env */\n) {\n  return '</ul>' + getBreak(tokens, idx);\n};\n/**\n * List items\n */\n\n\nrules.list_item_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<li>';\n};\n\nrules.list_item_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</li>\\n';\n};\n/**\n * Ordered list items\n */\n\n\nrules.ordered_list_open = function (tokens, idx\n/*, options, env */\n) {\n  var token = tokens[idx];\n  var order = token.order > 1 ? ' start=\"' + token.order + '\"' : '';\n  return '<ol' + order + '>\\n';\n};\n\nrules.ordered_list_close = function (tokens, idx\n/*, options, env */\n) {\n  return '</ol>' + getBreak(tokens, idx);\n};\n/**\n * Paragraphs\n */\n\n\nrules.paragraph_open = function (tokens, idx\n/*, options, env */\n) {\n  return tokens[idx].tight ? '' : '<p>';\n};\n\nrules.paragraph_close = function (tokens, idx\n/*, options, env */\n) {\n  var addBreak = !(tokens[idx].tight && idx && tokens[idx - 1].type === 'inline' && !tokens[idx - 1].content);\n  return (tokens[idx].tight ? '' : '</p>') + (addBreak ? getBreak(tokens, idx) : '');\n};\n/**\n * Links\n */\n\n\nrules.link_open = function (tokens, idx, options\n/* env */\n) {\n  var title = tokens[idx].title ? ' title=\"' + escapeHtml(replaceEntities(tokens[idx].title)) + '\"' : '';\n  var target = options.linkTarget ? ' target=\"' + options.linkTarget + '\"' : '';\n  return '<a href=\"' + escapeHtml(tokens[idx].href) + '\"' + title + target + '>';\n};\n\nrules.link_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</a>';\n};\n/**\n * Images\n */\n\n\nrules.image = function (tokens, idx, options\n/*, env */\n) {\n  var src = ' src=\"' + escapeHtml(tokens[idx].src) + '\"';\n  var title = tokens[idx].title ? ' title=\"' + escapeHtml(replaceEntities(tokens[idx].title)) + '\"' : '';\n  var alt = ' alt=\"' + (tokens[idx].alt ? escapeHtml(replaceEntities(unescapeMd(tokens[idx].alt))) : '') + '\"';\n  var suffix = options.xhtmlOut ? ' /' : '';\n  return '<img' + src + alt + title + suffix + '>';\n};\n/**\n * Tables\n */\n\n\nrules.table_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<table>\\n';\n};\n\nrules.table_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</table>\\n';\n};\n\nrules.thead_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<thead>\\n';\n};\n\nrules.thead_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</thead>\\n';\n};\n\nrules.tbody_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<tbody>\\n';\n};\n\nrules.tbody_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</tbody>\\n';\n};\n\nrules.tr_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<tr>';\n};\n\nrules.tr_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</tr>\\n';\n};\n\nrules.th_open = function (tokens, idx\n/*, options, env */\n) {\n  var token = tokens[idx];\n  return '<th' + (token.align ? ' style=\"text-align:' + token.align + '\"' : '') + '>';\n};\n\nrules.th_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</th>';\n};\n\nrules.td_open = function (tokens, idx\n/*, options, env */\n) {\n  var token = tokens[idx];\n  return '<td' + (token.align ? ' style=\"text-align:' + token.align + '\"' : '') + '>';\n};\n\nrules.td_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</td>';\n};\n/**\n * Bold\n */\n\n\nrules.strong_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<strong>';\n};\n\nrules.strong_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</strong>';\n};\n/**\n * Italicize\n */\n\n\nrules.em_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<em>';\n};\n\nrules.em_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</em>';\n};\n/**\n * Strikethrough\n */\n\n\nrules.del_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<del>';\n};\n\nrules.del_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</del>';\n};\n/**\n * Insert\n */\n\n\nrules.ins_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<ins>';\n};\n\nrules.ins_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</ins>';\n};\n/**\n * Highlight\n */\n\n\nrules.mark_open = function ()\n/* tokens, idx, options, env */\n{\n  return '<mark>';\n};\n\nrules.mark_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</mark>';\n};\n/**\n * Super- and sub-script\n */\n\n\nrules.sub = function (tokens, idx\n/*, options, env */\n) {\n  return '<sub>' + escapeHtml(tokens[idx].content) + '</sub>';\n};\n\nrules.sup = function (tokens, idx\n/*, options, env */\n) {\n  return '<sup>' + escapeHtml(tokens[idx].content) + '</sup>';\n};\n/**\n * Breaks\n */\n\n\nrules.hardbreak = function (tokens, idx, options\n/*, env */\n) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\n\nrules.softbreak = function (tokens, idx, options\n/*, env */\n) {\n  return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\n/**\n * Text\n */\n\n\nrules.text = function (tokens, idx\n/*, options, env */\n) {\n  return escapeHtml(tokens[idx].content);\n};\n/**\n * Content\n */\n\n\nrules.htmlblock = function (tokens, idx\n/*, options, env */\n) {\n  return tokens[idx].content;\n};\n\nrules.htmltag = function (tokens, idx\n/*, options, env */\n) {\n  return tokens[idx].content;\n};\n/**\n * Abbreviations, initialism\n */\n\n\nrules.abbr_open = function (tokens, idx\n/*, options, env */\n) {\n  return '<abbr title=\"' + escapeHtml(replaceEntities(tokens[idx].title)) + '\">';\n};\n\nrules.abbr_close = function ()\n/* tokens, idx, options, env */\n{\n  return '</abbr>';\n};\n/**\n * Footnotes\n */\n\n\nrules.footnote_ref = function (tokens, idx) {\n  var n = Number(tokens[idx].id + 1).toString();\n  var id = 'fnref' + n;\n\n  if (tokens[idx].subId > 0) {\n    id += ':' + tokens[idx].subId;\n  }\n\n  return '<sup class=\"footnote-ref\"><a href=\"#fn' + n + '\" id=\"' + id + '\">[' + n + ']</a></sup>';\n};\n\nrules.footnote_block_open = function (tokens, idx, options) {\n  var hr = options.xhtmlOut ? '<hr class=\"footnotes-sep\" />\\n' : '<hr class=\"footnotes-sep\">\\n';\n  return hr + '<section class=\"footnotes\">\\n<ol class=\"footnotes-list\">\\n';\n};\n\nrules.footnote_block_close = function () {\n  return '</ol>\\n</section>\\n';\n};\n\nrules.footnote_open = function (tokens, idx) {\n  var id = Number(tokens[idx].id + 1).toString();\n  return '<li id=\"fn' + id + '\"  class=\"footnote-item\">';\n};\n\nrules.footnote_close = function () {\n  return '</li>\\n';\n};\n\nrules.footnote_anchor = function (tokens, idx) {\n  var n = Number(tokens[idx].id + 1).toString();\n  var id = 'fnref' + n;\n\n  if (tokens[idx].subId > 0) {\n    id += ':' + tokens[idx].subId;\n  }\n\n  return ' <a href=\"#' + id + '\" class=\"footnote-backref\">↩</a>';\n};\n/**\n * Definition lists\n */\n\n\nrules.dl_open = function () {\n  return '<dl>\\n';\n};\n\nrules.dt_open = function () {\n  return '<dt>';\n};\n\nrules.dd_open = function () {\n  return '<dd>';\n};\n\nrules.dl_close = function () {\n  return '</dl>\\n';\n};\n\nrules.dt_close = function () {\n  return '</dt>\\n';\n};\n\nrules.dd_close = function () {\n  return '</dd>\\n';\n};\n/**\n * Helper functions\n */\n\n\nfunction nextToken(tokens, idx) {\n  if (++idx >= tokens.length - 2) {\n    return idx;\n  }\n\n  if (tokens[idx].type === 'paragraph_open' && tokens[idx].tight && tokens[idx + 1].type === 'inline' && tokens[idx + 1].content.length === 0 && tokens[idx + 2].type === 'paragraph_close' && tokens[idx + 2].tight) {\n    return nextToken(tokens, idx + 2);\n  }\n\n  return idx;\n}\n/**\n * Check to see if `\\n` is needed before the next token.\n *\n * @param  {Array} `tokens`\n * @param  {Number} `idx`\n * @return {String} Empty string or newline\n * @api private\n */\n\n\nvar getBreak = rules.getBreak = function getBreak(tokens, idx) {\n  idx = nextToken(tokens, idx);\n\n  if (idx < tokens.length && tokens[idx].type === 'list_item_close') {\n    return '';\n  }\n\n  return '\\n';\n};\n/**\n * Expose `rules`\n */\n\n\nmodule.exports = rules;","'use strict';\n/**\n * Local dependencies\n */\n\nvar Ruler = require('./ruler');\n/**\n * Core parser `rules`\n */\n\n\nvar _rules = [['block', require('./rules_core/block')], ['abbr', require('./rules_core/abbr')], ['references', require('./rules_core/references')], ['inline', require('./rules_core/inline')], ['footnote_tail', require('./rules_core/footnote_tail')], ['abbr2', require('./rules_core/abbr2')], ['replacements', require('./rules_core/replacements')], ['smartquotes', require('./rules_core/smartquotes')], ['linkify', require('./rules_core/linkify')]];\n/**\n * Class for top level (`core`) parser rules\n *\n * @api private\n */\n\nfunction Core() {\n  this.options = {};\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n/**\n * Process rules with the given `state`\n *\n * @param  {Object} `state`\n * @api private\n */\n\n\nCore.prototype.process = function (state) {\n  var i, l, rules;\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n/**\n * Expose `Core`\n */\n\n\nmodule.exports = Core;","'use strict';\n\nmodule.exports = function block(state) {\n  if (state.inlineMode) {\n    state.tokens.push({\n      type: 'inline',\n      content: state.src.replace(/\\n/g, ' ').trim(),\n      level: 0,\n      lines: [0, 1],\n      children: []\n    });\n  } else {\n    state.block.parse(state.src, state.options, state.env, state.tokens);\n  }\n};","// Parse abbreviation definitions, i.e. `*[abbr]: description`\n//\n'use strict';\n\nvar StateInline = require('../rules_inline/state_inline');\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nfunction parseAbbr(str, parserInline, options, env) {\n  var state, labelEnd, pos, max, label, title;\n\n  if (str.charCodeAt(0) !== 0x2A\n  /* * */\n  ) {\n      return -1;\n    }\n\n  if (str.charCodeAt(1) !== 0x5B\n  /* [ */\n  ) {\n      return -1;\n    }\n\n  if (str.indexOf(']:') === -1) {\n    return -1;\n  }\n\n  state = new StateInline(str, parserInline, options, env, []);\n  labelEnd = parseLinkLabel(state, 1);\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A\n  /* : */\n  ) {\n      return -1;\n    }\n\n  max = state.posMax; // abbr title is always one line, so looking for ending \"\\n\" here\n\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    if (state.src.charCodeAt(pos) === 0x0A) {\n      break;\n    }\n  }\n\n  label = str.slice(2, labelEnd);\n  title = str.slice(labelEnd + 2, pos).trim();\n\n  if (title.length === 0) {\n    return -1;\n  }\n\n  if (!env.abbreviations) {\n    env.abbreviations = {};\n  } // prepend ':' to avoid conflict with Object.prototype members\n\n\n  if (typeof env.abbreviations[':' + label] === 'undefined') {\n    env.abbreviations[':' + label] = title;\n  }\n\n  return pos;\n}\n\nmodule.exports = function abbr(state) {\n  var tokens = state.tokens,\n      i,\n      l,\n      content,\n      pos;\n\n  if (state.inlineMode) {\n    return;\n  } // Parse inlines\n\n\n  for (i = 1, l = tokens.length - 1; i < l; i++) {\n    if (tokens[i - 1].type === 'paragraph_open' && tokens[i].type === 'inline' && tokens[i + 1].type === 'paragraph_close') {\n      content = tokens[i].content;\n\n      while (content.length) {\n        pos = parseAbbr(content, state.inline, state.options, state.env);\n\n        if (pos < 0) {\n          break;\n        }\n\n        content = content.slice(pos).trim();\n      }\n\n      tokens[i].content = content;\n\n      if (!content.length) {\n        tokens[i - 1].tight = true;\n        tokens[i + 1].tight = true;\n      }\n    }\n  }\n};","'use strict';\n\nvar StateInline = require('../rules_inline/state_inline');\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nvar parseLinkDestination = require('../helpers/parse_link_destination');\n\nvar parseLinkTitle = require('../helpers/parse_link_title');\n\nvar normalizeReference = require('../helpers/normalize_reference');\n\nfunction parseReference(str, parser, options, env) {\n  var state, labelEnd, pos, max, code, start, href, title, label;\n\n  if (str.charCodeAt(0) !== 0x5B\n  /* [ */\n  ) {\n      return -1;\n    }\n\n  if (str.indexOf(']:') === -1) {\n    return -1;\n  }\n\n  state = new StateInline(str, parser, options, env, []);\n  labelEnd = parseLinkLabel(state, 0);\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A\n  /* : */\n  ) {\n      return -1;\n    }\n\n  max = state.posMax; // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n\n    if (code !== 0x20 && code !== 0x0A) {\n      break;\n    }\n  } // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n\n\n  if (!parseLinkDestination(state, pos)) {\n    return -1;\n  }\n\n  href = state.linkContent;\n  pos = state.pos; // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n\n  start = pos;\n\n  for (pos = pos + 1; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n\n    if (code !== 0x20 && code !== 0x0A) {\n      break;\n    }\n  } // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n\n\n  if (pos < max && start !== pos && parseLinkTitle(state, pos)) {\n    title = state.linkContent;\n    pos = state.pos;\n  } else {\n    title = '';\n    pos = start;\n  } // ensure that the end of the line is empty\n\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x20\n  /* space */\n  ) {\n    pos++;\n  }\n\n  if (pos < max && state.src.charCodeAt(pos) !== 0x0A) {\n    return -1;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n\n  if (typeof env.references[label] === 'undefined') {\n    env.references[label] = {\n      title: title,\n      href: href\n    };\n  }\n\n  return pos;\n}\n\nmodule.exports = function references(state) {\n  var tokens = state.tokens,\n      i,\n      l,\n      content,\n      pos;\n  state.env.references = state.env.references || {};\n\n  if (state.inlineMode) {\n    return;\n  } // Scan definitions in paragraph inlines\n\n\n  for (i = 1, l = tokens.length - 1; i < l; i++) {\n    if (tokens[i].type === 'inline' && tokens[i - 1].type === 'paragraph_open' && tokens[i + 1].type === 'paragraph_close') {\n      content = tokens[i].content;\n\n      while (content.length) {\n        pos = parseReference(content, state.inline, state.options, state.env);\n\n        if (pos < 0) {\n          break;\n        }\n\n        content = content.slice(pos).trim();\n      }\n\n      tokens[i].content = content;\n\n      if (!content.length) {\n        tokens[i - 1].tight = true;\n        tokens[i + 1].tight = true;\n      }\n    }\n  }\n};","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens,\n      tok,\n      i,\n      l; // Parse inlines\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n\n    if (tok.type === 'inline') {\n      state.inline.parse(tok.content, state.options, state.env, tok.children);\n    }\n  }\n};","'use strict';\n\nmodule.exports = function footnote_block(state) {\n  var i,\n      l,\n      j,\n      t,\n      lastParagraph,\n      list,\n      tokens,\n      current,\n      currentLabel,\n      level = 0,\n      insideRef = false,\n      refTokens = {};\n\n  if (!state.env.footnotes) {\n    return;\n  }\n\n  state.tokens = state.tokens.filter(function (tok) {\n    if (tok.type === 'footnote_reference_open') {\n      insideRef = true;\n      current = [];\n      currentLabel = tok.label;\n      return false;\n    }\n\n    if (tok.type === 'footnote_reference_close') {\n      insideRef = false; // prepend ':' to avoid conflict with Object.prototype members\n\n      refTokens[':' + currentLabel] = current;\n      return false;\n    }\n\n    if (insideRef) {\n      current.push(tok);\n    }\n\n    return !insideRef;\n  });\n\n  if (!state.env.footnotes.list) {\n    return;\n  }\n\n  list = state.env.footnotes.list;\n  state.tokens.push({\n    type: 'footnote_block_open',\n    level: level++\n  });\n\n  for (i = 0, l = list.length; i < l; i++) {\n    state.tokens.push({\n      type: 'footnote_open',\n      id: i,\n      level: level++\n    });\n\n    if (list[i].tokens) {\n      tokens = [];\n      tokens.push({\n        type: 'paragraph_open',\n        tight: false,\n        level: level++\n      });\n      tokens.push({\n        type: 'inline',\n        content: '',\n        level: level,\n        children: list[i].tokens\n      });\n      tokens.push({\n        type: 'paragraph_close',\n        tight: false,\n        level: --level\n      });\n    } else if (list[i].label) {\n      tokens = refTokens[':' + list[i].label];\n    }\n\n    state.tokens = state.tokens.concat(tokens);\n\n    if (state.tokens[state.tokens.length - 1].type === 'paragraph_close') {\n      lastParagraph = state.tokens.pop();\n    } else {\n      lastParagraph = null;\n    }\n\n    t = list[i].count > 0 ? list[i].count : 1;\n\n    for (j = 0; j < t; j++) {\n      state.tokens.push({\n        type: 'footnote_anchor',\n        id: i,\n        subId: j,\n        level: level\n      });\n    }\n\n    if (lastParagraph) {\n      state.tokens.push(lastParagraph);\n    }\n\n    state.tokens.push({\n      type: 'footnote_close',\n      level: --level\n    });\n  }\n\n  state.tokens.push({\n    type: 'footnote_block_close',\n    level: --level\n  });\n};","// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\nvar PUNCT_CHARS = ' \\n()[]\\'\".,!?-'; // from Google closure library\n// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021\n\nfunction regEscape(s) {\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1');\n}\n\nmodule.exports = function abbr2(state) {\n  var i,\n      j,\n      l,\n      tokens,\n      token,\n      text,\n      nodes,\n      pos,\n      level,\n      reg,\n      m,\n      regText,\n      blockTokens = state.tokens;\n\n  if (!state.env.abbreviations) {\n    return;\n  }\n\n  if (!state.env.abbrRegExp) {\n    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])' + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(regEscape).join('|') + ')' + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';\n    state.env.abbrRegExp = new RegExp(regText, 'g');\n  }\n\n  reg = state.env.abbrRegExp;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') {\n      continue;\n    }\n\n    tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.\n\n    for (i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n\n      if (token.type !== 'text') {\n        continue;\n      }\n\n      pos = 0;\n      text = token.content;\n      reg.lastIndex = 0;\n      level = token.level;\n      nodes = [];\n\n      while (m = reg.exec(text)) {\n        if (reg.lastIndex > pos) {\n          nodes.push({\n            type: 'text',\n            content: text.slice(pos, m.index + m[1].length),\n            level: level\n          });\n        }\n\n        nodes.push({\n          type: 'abbr_open',\n          title: state.env.abbreviations[':' + m[2]],\n          level: level++\n        });\n        nodes.push({\n          type: 'text',\n          content: m[2],\n          level: level\n        });\n        nodes.push({\n          type: 'abbr_close',\n          level: --level\n        });\n        pos = reg.lastIndex - m[3].length;\n      }\n\n      if (!nodes.length) {\n        continue;\n      }\n\n      if (pos < text.length) {\n        nodes.push({\n          type: 'text',\n          content: text.slice(pos),\n          level: level\n        });\n      } // replace current node\n\n\n      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));\n    }\n  }\n};","// Simple typographical replacements\n//\n'use strict'; // TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  'c': '©',\n  'r': '®',\n  'p': '§',\n  'tm': '™'\n};\n\nfunction replaceScopedAbbr(str) {\n  if (str.indexOf('(') < 0) {\n    return str;\n  }\n\n  return str.replace(SCOPED_ABBR_RE, function (match, name) {\n    return SCOPED_ABBR[name.toLowerCase()];\n  });\n}\n\nmodule.exports = function replace(state) {\n  var i, token, text, inlineTokens, blkIdx;\n\n  if (!state.options.typographer) {\n    return;\n  }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n\n    inlineTokens = state.tokens[blkIdx].children;\n\n    for (i = inlineTokens.length - 1; i >= 0; i--) {\n      token = inlineTokens[i];\n\n      if (token.type === 'text') {\n        text = token.content;\n        text = replaceScopedAbbr(text);\n\n        if (RARE_RE.test(text)) {\n          text = text.replace(/\\+-/g, '±') // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',') // em-dash\n          .replace(/(^|[^-])---([^-]|$)/mg, \"$1\\u2014$2\") // en-dash\n          .replace(/(^|\\s)--(\\s|$)/mg, \"$1\\u2013$2\").replace(/(^|[^-\\s])--([^-\\s]|$)/mg, \"$1\\u2013$2\");\n        }\n\n        token.content = text;\n      }\n    }\n  }\n};","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar PUNCT_RE = /[-\\s()\\[\\]]/;\nvar APOSTROPHE = '’'; // This function returns true if the character at `pos`\n// could be inside a word.\n\nfunction isLetter(str, pos) {\n  if (pos < 0 || pos >= str.length) {\n    return false;\n  }\n\n  return !PUNCT_RE.test(str[pos]);\n}\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var i, token, text, t, pos, max, thisLevel, lastSpace, nextSpace, item, canOpen, canClose, j, isSingle, blkIdx, tokens, stack;\n\n  if (!state.options.typographer) {\n    return;\n  }\n\n  stack = [];\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n\n    tokens = state.tokens[blkIdx].children;\n    stack.length = 0;\n\n    for (i = 0; i < tokens.length; i++) {\n      token = tokens[i];\n\n      if (token.type !== 'text' || QUOTE_TEST_RE.test(token.text)) {\n        continue;\n      }\n\n      thisLevel = tokens[i].level;\n\n      for (j = stack.length - 1; j >= 0; j--) {\n        if (stack[j].level <= thisLevel) {\n          break;\n        }\n      }\n\n      stack.length = j + 1;\n      text = token.content;\n      pos = 0;\n      max = text.length;\n      /*eslint no-labels:0,block-scoped-var:0*/\n\n      OUTER: while (pos < max) {\n        QUOTE_RE.lastIndex = pos;\n        t = QUOTE_RE.exec(text);\n\n        if (!t) {\n          break;\n        }\n\n        lastSpace = !isLetter(text, t.index - 1);\n        pos = t.index + 1;\n        isSingle = t[0] === \"'\";\n        nextSpace = !isLetter(text, pos);\n\n        if (!nextSpace && !lastSpace) {\n          // middle of word\n          if (isSingle) {\n            token.content = replaceAt(token.content, t.index, APOSTROPHE);\n          }\n\n          continue;\n        }\n\n        canOpen = !nextSpace;\n        canClose = !lastSpace;\n\n        if (canClose) {\n          // this could be a closing quote, rewind the stack to get a match\n          for (j = stack.length - 1; j >= 0; j--) {\n            item = stack[j];\n\n            if (stack[j].level < thisLevel) {\n              break;\n            }\n\n            if (item.single === isSingle && stack[j].level === thisLevel) {\n              item = stack[j];\n\n              if (isSingle) {\n                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[2]);\n                token.content = replaceAt(token.content, t.index, state.options.quotes[3]);\n              } else {\n                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[0]);\n                token.content = replaceAt(token.content, t.index, state.options.quotes[1]);\n              }\n\n              stack.length = j;\n              continue OUTER;\n            }\n          }\n        }\n\n        if (canOpen) {\n          stack.push({\n            token: i,\n            pos: t.index,\n            single: isSingle,\n            level: thisLevel\n          });\n        } else if (canClose && isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n      }\n    }\n  }\n};","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `inline.validateLink()` to http/https/ftp\n//\n'use strict';\n\nvar Autolinker = require('autolinker');\n\nvar LINK_SCAN_RE = /www|@|\\:\\/\\//;\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\n\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n} // Stupid fabric to avoid singletons, for thread safety.\n// Required for engines like Nashorn.\n//\n\n\nfunction createLinkifier() {\n  var links = [];\n  var autolinker = new Autolinker({\n    stripPrefix: false,\n    url: true,\n    email: true,\n    twitter: false,\n    replaceFn: function replaceFn(linker, match) {\n      // Only collect matched strings but don't change anything.\n      switch (match.getType()) {\n        /*eslint default-case:0*/\n        case 'url':\n          links.push({\n            text: match.matchedText,\n            url: match.getUrl()\n          });\n          break;\n\n        case 'email':\n          links.push({\n            text: match.matchedText,\n            // normalize email protocol\n            url: 'mailto:' + match.getEmail().replace(/^mailto:/i, '')\n          });\n          break;\n      }\n\n      return false;\n    }\n  });\n  return {\n    links: links,\n    autolinker: autolinker\n  };\n}\n\nmodule.exports = function linkify(state) {\n  var i,\n      j,\n      l,\n      tokens,\n      token,\n      text,\n      nodes,\n      ln,\n      pos,\n      level,\n      htmlLinkLevel,\n      blockTokens = state.tokens,\n      linkifier = null,\n      links,\n      autolinker;\n\n  if (!state.options.linkify) {\n    return;\n  }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n    htmlLinkLevel = 0; // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n\n    for (i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]; // Skip content of markdown links\n\n      if (token.type === 'link_close') {\n        i--;\n\n        while (tokens[i].level !== token.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n\n        continue;\n      } // Skip content of html tag links\n\n\n      if (token.type === 'htmltag') {\n        if (isLinkOpen(token.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n\n        if (isLinkClose(token.content)) {\n          htmlLinkLevel++;\n        }\n      }\n\n      if (htmlLinkLevel > 0) {\n        continue;\n      }\n\n      if (token.type === 'text' && LINK_SCAN_RE.test(token.content)) {\n        // Init linkifier in lazy manner, only if required.\n        if (!linkifier) {\n          linkifier = createLinkifier();\n          links = linkifier.links;\n          autolinker = linkifier.autolinker;\n        }\n\n        text = token.content;\n        links.length = 0;\n        autolinker.link(text);\n\n        if (!links.length) {\n          continue;\n        } // Now split string to nodes\n\n\n        nodes = [];\n        level = token.level;\n\n        for (ln = 0; ln < links.length; ln++) {\n          if (!state.inline.validateLink(links[ln].url)) {\n            continue;\n          }\n\n          pos = text.indexOf(links[ln].text);\n\n          if (pos) {\n            level = level;\n            nodes.push({\n              type: 'text',\n              content: text.slice(0, pos),\n              level: level\n            });\n          }\n\n          nodes.push({\n            type: 'link_open',\n            href: links[ln].url,\n            title: '',\n            level: level++\n          });\n          nodes.push({\n            type: 'text',\n            content: links[ln].text,\n            level: level\n          });\n          nodes.push({\n            type: 'link_close',\n            level: --level\n          });\n          text = text.slice(pos + links[ln].text.length);\n        }\n\n        if (text.length) {\n          nodes.push({\n            type: 'text',\n            content: text,\n            level: level\n          });\n        } // replace current node\n\n\n        blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));\n      }\n    }\n  }\n};","(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return root['Autolinker'] = factory();\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Autolinker'] = factory();\n  }\n})(this, function () {\n  /*!\n   * Autolinker.js\n   * 0.15.3\n   *\n   * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>\n   * MIT Licensed. http://www.opensource.org/licenses/mit-license.php\n   *\n   * https://github.com/gregjacobs/Autolinker.js\n   */\n\n  /**\n   * @class Autolinker\n   * @extends Object\n   * \n   * Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in \n   * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n   * \n   * Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which\n   * will configure how the {@link #link link()} method will process the links.\n   * \n   * For example:\n   * \n   *     var autolinker = new Autolinker( {\n   *         newWindow : false,\n   *         truncate  : 30\n   *     } );\n   *     \n   *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n   *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n   * \n   * \n   * The {@link #static-link static link()} method may also be used to inline options into a single call, which may\n   * be more convenient for one-off uses. For example:\n   * \n   *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n   *         newWindow : false,\n   *         truncate  : 30\n   *     } );\n   *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n   * \n   * \n   * ## Custom Replacements of Links\n   * \n   * If the configuration options do not provide enough flexibility, a {@link #replaceFn} may be provided to fully customize\n   * the output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.\n   * \n   * For example:\n   * \n   *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n   *     \n   *     var linkedText = Autolinker.link( input, {\n   *         replaceFn : function( autolinker, match ) {\n   *             console.log( \"href = \", match.getAnchorHref() );\n   *             console.log( \"text = \", match.getAnchorText() );\n   *         \n   *             switch( match.getType() ) {\n   *                 case 'url' : \n   *                     console.log( \"url: \", match.getUrl() );\n   *                     \n   *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n   *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n   *                         tag.setAttr( 'rel', 'nofollow' );\n   *                         tag.addClass( 'external-link' );\n   *                         \n   *                         return tag;\n   *                         \n   *                     } else {\n   *                         return true;  // let Autolinker perform its normal anchor tag replacement\n   *                     }\n   *                     \n   *                 case 'email' :\n   *                     var email = match.getEmail();\n   *                     console.log( \"email: \", email );\n   *                     \n   *                     if( email === \"my@own.address\" ) {\n   *                         return false;  // don't auto-link this particular email address; leave as-is\n   *                     } else {\n   *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n   *                     }\n   *                 \n   *                 case 'twitter' :\n   *                     var twitterHandle = match.getTwitterHandle();\n   *                     console.log( twitterHandle );\n   *                     \n   *                     return '<a href=\"http://newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\n   *             }\n   *         }\n   *     } );\n   * \n   * \n   * The function may return the following values:\n   * \n   * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.\n   * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n   * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\n   *   the match.\n   * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.\n   * \n   * @constructor\n   * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).\n   */\n  var Autolinker = function Autolinker(cfg) {\n    Autolinker.Util.assign(this, cfg); // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.\n  };\n\n  Autolinker.prototype = {\n    constructor: Autolinker,\n    // fix constructor property\n\n    /**\n     * @cfg {Boolean} urls\n     * \n     * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n     */\n    urls: true,\n\n    /**\n     * @cfg {Boolean} email\n     * \n     * `true` if email addresses should be automatically linked, `false` if they should not be.\n     */\n    email: true,\n\n    /**\n     * @cfg {Boolean} twitter\n     * \n     * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n     */\n    twitter: true,\n\n    /**\n     * @cfg {Boolean} newWindow\n     * \n     * `true` if the links should open in a new window, `false` otherwise.\n     */\n    newWindow: true,\n\n    /**\n     * @cfg {Boolean} stripPrefix\n     * \n     * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text, \n     * `false` otherwise.\n     */\n    stripPrefix: true,\n\n    /**\n     * @cfg {Number} truncate\n     * \n     * A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of \n     * a link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by \n     * adding a two period ellipsis ('..') to the end of the string.\n     * \n     * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\n     * something like this: 'yahoo.com/some/long/pat..'\n     */\n    truncate: undefined,\n\n    /**\n     * @cfg {String} className\n     * \n     * A CSS class name to add to the generated links. This class will be added to all links, as well as this class\n     * plus url/email/twitter suffixes for styling url/email/twitter links differently.\n     * \n     * For example, if this config is provided as \"myLink\", then:\n     * \n     * - URL links will have the CSS classes: \"myLink myLink-url\"\n     * - Email links will have the CSS classes: \"myLink myLink-email\", and\n     * - Twitter links will have the CSS classes: \"myLink myLink-twitter\"\n     */\n    className: \"\",\n\n    /**\n     * @cfg {Function} replaceFn\n     * \n     * A function to individually process each URL/Email/Twitter match found in the input string.\n     * \n     * See the class's description for usage.\n     * \n     * This function is called with the following parameters:\n     * \n     * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such\n     *   as the instance's {@link #getTagBuilder tag builder}).\n     * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the\n     *   {@link Autolinker.match.Url URL}/{@link Autolinker.match.Email email}/{@link Autolinker.match.Twitter Twitter}\n     *   match that the `replaceFn` is currently processing.\n     */\n\n    /**\n     * @private\n     * @property {Autolinker.htmlParser.HtmlParser} htmlParser\n     * \n     * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\n     * in the {@link #getHtmlParser} method.\n     */\n    htmlParser: undefined,\n\n    /**\n     * @private\n     * @property {Autolinker.matchParser.MatchParser} matchParser\n     * \n     * The MatchParser instance used to find URL/email/Twitter matches in the text nodes of an input string passed to\n     * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.\n     */\n    matchParser: undefined,\n\n    /**\n     * @private\n     * @property {Autolinker.AnchorTagBuilder} tagBuilder\n     * \n     * The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated\n     * in the {@link #getTagBuilder} method.\n     */\n    tagBuilder: undefined,\n\n    /**\n     * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n     * Does not link URLs found within HTML tags.\n     * \n     * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n     * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n     * \n     * This method finds the text around any HTML elements in the input `textOrHtml`, which will be the text that is processed.\n     * Any original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.\n     * \n     * @param {String} textOrHtml The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if\n     *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n     * @return {String} The HTML, with URLs/emails/Twitter handles automatically linked.\n     */\n    link: function link(textOrHtml) {\n      var htmlParser = this.getHtmlParser(),\n          htmlNodes = htmlParser.parse(textOrHtml),\n          anchorTagStackCount = 0,\n          // used to only process text around anchor tags, and any inner text/html they may have\n      resultHtml = [];\n\n      for (var i = 0, len = htmlNodes.length; i < len; i++) {\n        var node = htmlNodes[i],\n            nodeType = node.getType(),\n            nodeText = node.getText();\n\n        if (nodeType === 'element') {\n          // Process HTML nodes in the input `textOrHtml`\n          if (node.getTagName() === 'a') {\n            if (!node.isClosing()) {\n              // it's the start <a> tag\n              anchorTagStackCount++;\n            } else {\n              // it's the end </a> tag\n              anchorTagStackCount = Math.max(anchorTagStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n            }\n          }\n\n          resultHtml.push(nodeText); // now add the text of the tag itself verbatim\n        } else if (nodeType === 'entity') {\n          resultHtml.push(nodeText); // append HTML entity nodes (such as '&nbsp;') verbatim\n        } else {\n          // Process text nodes in the input `textOrHtml`\n          if (anchorTagStackCount === 0) {\n            // If we're not within an <a> tag, process the text node to linkify\n            var linkifiedStr = this.linkifyStr(nodeText);\n            resultHtml.push(linkifiedStr);\n          } else {\n            // `text` is within an <a> tag, simply append the text - we do not want to autolink anything \n            // already within an <a>...</a> tag\n            resultHtml.push(nodeText);\n          }\n        }\n      }\n\n      return resultHtml.join(\"\");\n    },\n\n    /**\n     * Process the text that lies in between HTML tags, performing the anchor tag replacements for matched \n     * URLs/emails/Twitter handles, and returns the string with the replacements made. \n     * \n     * This method does the actual wrapping of URLs/emails/Twitter handles with anchor tags.\n     * \n     * @private\n     * @param {String} str The string of text to auto-link.\n     * @return {String} The text with anchor tags auto-filled.\n     */\n    linkifyStr: function linkifyStr(str) {\n      return this.getMatchParser().replace(str, this.createMatchReturnVal, this);\n    },\n\n    /**\n     * Creates the return string value for a given match in the input string, for the {@link #processTextNode} method.\n     * \n     * This method handles the {@link #replaceFn}, if one was provided.\n     * \n     * @private\n     * @param {Autolinker.match.Match} match The Match object that represents the match.\n     * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but\n     *   may be the `matchStr` itself if the match is not to be replaced.\n     */\n    createMatchReturnVal: function createMatchReturnVal(match) {\n      // Handle a custom `replaceFn` being provided\n      var replaceFnResult;\n\n      if (this.replaceFn) {\n        replaceFnResult = this.replaceFn.call(this, this, match); // Autolinker instance is the context, and the first arg\n      }\n\n      if (typeof replaceFnResult === 'string') {\n        return replaceFnResult; // `replaceFn` returned a string, use that\n      } else if (replaceFnResult === false) {\n        return match.getMatchedText(); // no replacement for the match\n      } else if (replaceFnResult instanceof Autolinker.HtmlTag) {\n        return replaceFnResult.toString();\n      } else {\n        // replaceFnResult === true, or no/unknown return value from function\n        // Perform Autolinker's default anchor tag generation\n        var tagBuilder = this.getTagBuilder(),\n            anchorTag = tagBuilder.build(match); // returns an Autolinker.HtmlTag instance\n\n        return anchorTag.toString();\n      }\n    },\n\n    /**\n     * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.\n     * \n     * @protected\n     * @return {Autolinker.htmlParser.HtmlParser}\n     */\n    getHtmlParser: function getHtmlParser() {\n      var htmlParser = this.htmlParser;\n\n      if (!htmlParser) {\n        htmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\n      }\n\n      return htmlParser;\n    },\n\n    /**\n     * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.\n     * \n     * @protected\n     * @return {Autolinker.matchParser.MatchParser}\n     */\n    getMatchParser: function getMatchParser() {\n      var matchParser = this.matchParser;\n\n      if (!matchParser) {\n        matchParser = this.matchParser = new Autolinker.matchParser.MatchParser({\n          urls: this.urls,\n          email: this.email,\n          twitter: this.twitter,\n          stripPrefix: this.stripPrefix\n        });\n      }\n\n      return matchParser;\n    },\n\n    /**\n     * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\n     * if it does not yet exist.\n     * \n     * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that \n     * Autolinker would normally generate, and then allow for modifications before returning it. For example:\n     * \n     *     var html = Autolinker.link( \"Test google.com\", {\n     *         replaceFn : function( autolinker, match ) {\n     *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n     *             tag.setAttr( 'rel', 'nofollow' );\n     *             \n     *             return tag;\n     *         }\n     *     } );\n     *     \n     *     // generated html:\n     *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n     * \n     * @return {Autolinker.AnchorTagBuilder}\n     */\n    getTagBuilder: function getTagBuilder() {\n      var tagBuilder = this.tagBuilder;\n\n      if (!tagBuilder) {\n        tagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder({\n          newWindow: this.newWindow,\n          truncate: this.truncate,\n          className: this.className\n        });\n      }\n\n      return tagBuilder;\n    }\n  };\n  /**\n   * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n   * Does not link URLs found within HTML tags.\n   * \n   * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n   * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   * \n   * Example:\n   * \n   *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n   *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n   * \n   * @static\n   * @param {String} textOrHtml The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if\n   *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n   * @param {Object} [options] Any of the configuration options for the Autolinker class, specified in an Object (map).\n   *   See the class description for an example call.\n   * @return {String} The HTML text, with URLs automatically linked\n   */\n\n  Autolinker.link = function (textOrHtml, options) {\n    var autolinker = new Autolinker(options);\n    return autolinker.link(textOrHtml);\n  }; // Autolinker Namespaces\n\n\n  Autolinker.match = {};\n  Autolinker.htmlParser = {};\n  Autolinker.matchParser = {};\n  /*global Autolinker */\n\n  /*jshint eqnull:true, boss:true */\n\n  /**\n   * @class Autolinker.Util\n   * @singleton\n   * \n   * A few utility methods for Autolinker.\n   */\n\n  Autolinker.Util = {\n    /**\n     * @property {Function} abstractMethod\n     * \n     * A function object which represents an abstract method.\n     */\n    abstractMethod: function abstractMethod() {\n      throw \"abstract\";\n    },\n\n    /**\n     * Assigns (shallow copies) the properties of `src` onto `dest`.\n     * \n     * @param {Object} dest The destination object.\n     * @param {Object} src The source object.\n     * @return {Object} The destination object (`dest`)\n     */\n    assign: function assign(dest, src) {\n      for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n          dest[prop] = src[prop];\n        }\n      }\n\n      return dest;\n    },\n\n    /**\n     * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\n     * \n     * @param {Function} superclass The constructor function for the superclass.\n     * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\n     *   special property `constructor`, which will be used as the new subclass's constructor function.\n     * @return {Function} The new subclass function.\n     */\n    extend: function extend(superclass, protoProps) {\n      var superclassProto = superclass.prototype;\n\n      var F = function F() {};\n\n      F.prototype = superclassProto;\n      var subclass;\n\n      if (protoProps.hasOwnProperty('constructor')) {\n        subclass = protoProps.constructor;\n      } else {\n        subclass = function subclass() {\n          superclassProto.constructor.apply(this, arguments);\n        };\n      }\n\n      var subclassProto = subclass.prototype = new F(); // set up prototype chain\n\n      subclassProto.constructor = subclass; // fix constructor property\n\n      subclassProto.superclass = superclassProto;\n      delete protoProps.constructor; // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\n\n      Autolinker.Util.assign(subclassProto, protoProps);\n      return subclass;\n    },\n\n    /**\n     * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n     * end of the string (by default, two periods: '..'). If the `str` length does not exceed \n     * `len`, the string will be returned unchanged.\n     * \n     * @param {String} str The string to truncate and add an ellipsis to.\n     * @param {Number} truncateLen The length to truncate the string at.\n     * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`\n     *   when truncated. Defaults to '..'\n     */\n    ellipsis: function ellipsis(str, truncateLen, ellipsisChars) {\n      if (str.length > truncateLen) {\n        ellipsisChars = ellipsisChars == null ? '..' : ellipsisChars;\n        str = str.substring(0, truncateLen - ellipsisChars.length) + ellipsisChars;\n      }\n\n      return str;\n    },\n\n    /**\n     * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n     * \n     * @param {Array} arr The array to find an element of.\n     * @param {*} element The element to find in the array, and return the index of.\n     * @return {Number} The index of the `element`, or -1 if it was not found.\n     */\n    indexOf: function indexOf(arr, element) {\n      if (Array.prototype.indexOf) {\n        return arr.indexOf(element);\n      } else {\n        for (var i = 0, len = arr.length; i < len; i++) {\n          if (arr[i] === element) return i;\n        }\n\n        return -1;\n      }\n    },\n\n    /**\n     * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n     * with a regular expression that contains capturing parenthesis.\n     * \n     * For example:\n     * \n     *     // Modern browsers: \n     *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n     *     \n     *     // Old IE (including IE8):\n     *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n     *     \n     * This method emulates the functionality of modern browsers for the old IE case.\n     * \n     * @param {String} str The string to split.\n     * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n     *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the \n     *   description of this method. \n     *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n     *   Note #2: for simplicity's sake, the regular expression does not need \n     *   to contain capturing parenthesis - it will be assumed that any match has them.\n     * @return {String[]} The split array of strings, with the splitting character(s) included.\n     */\n    splitAndCapture: function splitAndCapture(str, splitRegex) {\n      if (!splitRegex.global) throw new Error(\"`splitRegex` must have the 'g' flag set\");\n      var result = [],\n          lastIdx = 0,\n          match;\n\n      while (match = splitRegex.exec(str)) {\n        result.push(str.substring(lastIdx, match.index));\n        result.push(match[0]); // push the splitting char(s)\n\n        lastIdx = match.index + match[0].length;\n      }\n\n      result.push(str.substring(lastIdx));\n      return result;\n    }\n  };\n  /*global Autolinker */\n\n  /*jshint boss:true */\n\n  /**\n   * @class Autolinker.HtmlTag\n   * @extends Object\n   * \n   * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n   * \n   * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n   * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n   * \n   * ## Examples\n   * \n   * Example instantiation:\n   * \n   *     var tag = new Autolinker.HtmlTag( {\n   *         tagName : 'a',\n   *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n   *         innerHtml : 'Google'\n   *     } );\n   *     \n   *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n   *     \n   *     // Individual accessor methods\n   *     tag.getTagName();                 // 'a'\n   *     tag.getAttr( 'href' );            // 'http://google.com'\n   *     tag.hasClass( 'external-link' );  // true\n   * \n   * \n   * Using mutator methods (which may be used in combination with instantiation config properties):\n   * \n   *     var tag = new Autolinker.HtmlTag();\n   *     tag.setTagName( 'a' );\n   *     tag.setAttr( 'href', 'http://google.com' );\n   *     tag.addClass( 'external-link' );\n   *     tag.setInnerHtml( 'Google' );\n   *     \n   *     tag.getTagName();                 // 'a'\n   *     tag.getAttr( 'href' );            // 'http://google.com'\n   *     tag.hasClass( 'external-link' );  // true\n   *     \n   *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n   *     \n   * \n   * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n   * \n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( autolinker, match ) {\n   *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *             \n   *             return tag;\n   *         }\n   *     } );\n   *     \n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   *     \n   *     \n   * ## Example use with a new tag for the replacement\n   * \n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( autolinker, match ) {\n   *             var tag = new Autolinker.HtmlTag( {\n   *                 tagName : 'button',\n   *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n   *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n   *             } );\n   *             \n   *             return tag;\n   *         }\n   *     } );\n   *     \n   *     // generated html:\n   *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n   */\n\n  Autolinker.HtmlTag = Autolinker.Util.extend(Object, {\n    /**\n     * @cfg {String} tagName\n     * \n     * The tag name. Ex: 'a', 'button', etc.\n     * \n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toString}\n     * is executed.\n     */\n\n    /**\n     * @cfg {Object.<String, String>} attrs\n     * \n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n     * values are the attribute values.\n     */\n\n    /**\n     * @cfg {String} innerHtml\n     * \n     * The inner HTML for the tag. \n     * \n     * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym \n     * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\n     * if you prefer, but this one is recommended.\n     */\n\n    /**\n     * @cfg {String} innerHTML\n     * \n     * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\n     * for acronym names.\n     */\n\n    /**\n     * @protected\n     * @property {RegExp} whitespaceRegex\n     * \n     * Regular expression used to match whitespace in a string of CSS classes.\n     */\n    whitespaceRegex: /\\s+/,\n\n    /**\n     * @constructor\n     * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n     */\n    constructor: function constructor(cfg) {\n      Autolinker.Util.assign(this, cfg);\n      this.innerHtml = this.innerHtml || this.innerHTML; // accept either the camelCased form or the fully capitalized acronym\n    },\n\n    /**\n     * Sets the tag name that will be used to generate the tag with.\n     * \n     * @param {String} tagName\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setTagName: function setTagName(tagName) {\n      this.tagName = tagName;\n      return this;\n    },\n\n    /**\n     * Retrieves the tag name.\n     * \n     * @return {String}\n     */\n    getTagName: function getTagName() {\n      return this.tagName || \"\";\n    },\n\n    /**\n     * Sets an attribute on the HtmlTag.\n     * \n     * @param {String} attrName The attribute name to set.\n     * @param {String} attrValue The attribute value to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setAttr: function setAttr(attrName, attrValue) {\n      var tagAttrs = this.getAttrs();\n      tagAttrs[attrName] = attrValue;\n      return this;\n    },\n\n    /**\n     * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n     * \n     * @param {String} name The attribute name to retrieve.\n     * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n     */\n    getAttr: function getAttr(attrName) {\n      return this.getAttrs()[attrName];\n    },\n\n    /**\n     * Sets one or more attributes on the HtmlTag.\n     * \n     * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setAttrs: function setAttrs(attrs) {\n      var tagAttrs = this.getAttrs();\n      Autolinker.Util.assign(tagAttrs, attrs);\n      return this;\n    },\n\n    /**\n     * Retrieves the attributes Object (map) for the HtmlTag.\n     * \n     * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n     */\n    getAttrs: function getAttrs() {\n      return this.attrs || (this.attrs = {});\n    },\n\n    /**\n     * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n     * \n     * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setClass: function setClass(cssClass) {\n      return this.setAttr('class', cssClass);\n    },\n\n    /**\n     * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n     * \n     * @param {String} cssClass One or more space-separated CSS classes to add.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    addClass: function addClass(cssClass) {\n      var classAttr = this.getClass(),\n          whitespaceRegex = this.whitespaceRegex,\n          indexOf = Autolinker.Util.indexOf,\n          // to support IE8 and below\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n          newClasses = cssClass.split(whitespaceRegex),\n          newClass;\n\n      while (newClass = newClasses.shift()) {\n        if (indexOf(classes, newClass) === -1) {\n          classes.push(newClass);\n        }\n      }\n\n      this.getAttrs()['class'] = classes.join(\" \");\n      return this;\n    },\n\n    /**\n     * Convenience method to remove one or more CSS classes from the HtmlTag.\n     * \n     * @param {String} cssClass One or more space-separated CSS classes to remove.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    removeClass: function removeClass(cssClass) {\n      var classAttr = this.getClass(),\n          whitespaceRegex = this.whitespaceRegex,\n          indexOf = Autolinker.Util.indexOf,\n          // to support IE8 and below\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n          removeClasses = cssClass.split(whitespaceRegex),\n          removeClass;\n\n      while (classes.length && (removeClass = removeClasses.shift())) {\n        var idx = indexOf(classes, removeClass);\n\n        if (idx !== -1) {\n          classes.splice(idx, 1);\n        }\n      }\n\n      this.getAttrs()['class'] = classes.join(\" \");\n      return this;\n    },\n\n    /**\n     * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n     * there are multiple.\n     * \n     * @return {String}\n     */\n    getClass: function getClass() {\n      return this.getAttrs()['class'] || \"\";\n    },\n\n    /**\n     * Convenience method to check if the tag has a CSS class or not.\n     * \n     * @param {String} cssClass The CSS class to check for.\n     * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n     */\n    hasClass: function hasClass(cssClass) {\n      return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n    },\n\n    /**\n     * Sets the inner HTML for the tag.\n     * \n     * @param {String} html The inner HTML to set.\n     * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n     */\n    setInnerHtml: function setInnerHtml(html) {\n      this.innerHtml = html;\n      return this;\n    },\n\n    /**\n     * Retrieves the inner HTML for the tag.\n     * \n     * @return {String}\n     */\n    getInnerHtml: function getInnerHtml() {\n      return this.innerHtml || \"\";\n    },\n\n    /**\n     * Override of superclass method used to generate the HTML string for the tag.\n     * \n     * @return {String}\n     */\n    toString: function toString() {\n      var tagName = this.getTagName(),\n          attrsStr = this.buildAttrsStr();\n      attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n      return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n    },\n\n    /**\n     * Support method for {@link #toString}, returns the string space-separated key=\"value\" pairs, used to populate \n     * the stringified HtmlTag.\n     * \n     * @protected\n     * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n     */\n    buildAttrsStr: function buildAttrsStr() {\n      if (!this.attrs) return \"\"; // no `attrs` Object (map) has been set, return empty string\n\n      var attrs = this.getAttrs(),\n          attrsArr = [];\n\n      for (var prop in attrs) {\n        if (attrs.hasOwnProperty(prop)) {\n          attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n        }\n      }\n\n      return attrsArr.join(\" \");\n    }\n  });\n  /*global Autolinker */\n\n  /*jshint sub:true */\n\n  /**\n   * @protected\n   * @class Autolinker.AnchorTagBuilder\n   * @extends Object\n   * \n   * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.\n   * \n   * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may \n   * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances\n   * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:\n   * \n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( autolinker, match ) {\n   *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *             \n   *             return tag;\n   *         }\n   *     } );\n   *     \n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   */\n\n  Autolinker.AnchorTagBuilder = Autolinker.Util.extend(Object, {\n    /**\n     * @cfg {Boolean} newWindow\n     * @inheritdoc Autolinker#newWindow\n     */\n\n    /**\n     * @cfg {Number} truncate\n     * @inheritdoc Autolinker#truncate\n     */\n\n    /**\n     * @cfg {String} className\n     * @inheritdoc Autolinker#className\n     */\n\n    /**\n     * @constructor\n     * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n     */\n    constructor: function constructor(cfg) {\n      Autolinker.Util.assign(this, cfg);\n    },\n\n    /**\n     * Generates the actual anchor (&lt;a&gt;) tag to use in place of the matched URL/email/Twitter text,\n     * via its `match` object.\n     * \n     * @param {Autolinker.match.Match} match The Match instance to generate an anchor tag from.\n     * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n     */\n    build: function build(match) {\n      var tag = new Autolinker.HtmlTag({\n        tagName: 'a',\n        attrs: this.createAttrs(match.getType(), match.getAnchorHref()),\n        innerHtml: this.processAnchorText(match.getAnchorText())\n      });\n      return tag;\n    },\n\n    /**\n     * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;) tag being generated.\n     * \n     * @protected\n     * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n     * @param {String} href The href for the anchor tag.\n     * @return {Object} A key/value Object (map) of the anchor tag's attributes. \n     */\n    createAttrs: function createAttrs(matchType, anchorHref) {\n      var attrs = {\n        'href': anchorHref // we'll always have the `href` attribute\n\n      };\n      var cssClass = this.createCssClass(matchType);\n\n      if (cssClass) {\n        attrs['class'] = cssClass;\n      }\n\n      if (this.newWindow) {\n        attrs['target'] = \"_blank\";\n      }\n\n      return attrs;\n    },\n\n    /**\n     * Creates the CSS class that will be used for a given anchor tag, based on the `matchType` and the {@link #className}\n     * config.\n     * \n     * @private\n     * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n     * @return {String} The CSS class string for the link. Example return: \"myLink myLink-url\". If no {@link #className}\n     *   was configured, returns an empty string.\n     */\n    createCssClass: function createCssClass(matchType) {\n      var className = this.className;\n      if (!className) return \"\";else return className + \" \" + className + \"-\" + matchType; // ex: \"myLink myLink-url\", \"myLink myLink-email\", or \"myLink myLink-twitter\"\n    },\n\n    /**\n     * Processes the `anchorText` by truncating the text according to the {@link #truncate} config.\n     * \n     * @private\n     * @param {String} anchorText The anchor tag's text (i.e. what will be displayed).\n     * @return {String} The processed `anchorText`.\n     */\n    processAnchorText: function processAnchorText(anchorText) {\n      anchorText = this.doTruncate(anchorText);\n      return anchorText;\n    },\n\n    /**\n     * Performs the truncation of the `anchorText`, if the `anchorText` is longer than the {@link #truncate} option.\n     * Truncates the text to 2 characters fewer than the {@link #truncate} option, and adds \"..\" to the end.\n     * \n     * @private\n     * @param {String} text The anchor tag's text (i.e. what will be displayed).\n     * @return {String} The truncated anchor text.\n     */\n    doTruncate: function doTruncate(anchorText) {\n      return Autolinker.Util.ellipsis(anchorText, this.truncate || Number.POSITIVE_INFINITY);\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @private\n   * @class Autolinker.htmlParser.HtmlParser\n   * @extends Object\n   * \n   * An HTML parser implementation which simply walks an HTML string and returns an array of \n   * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\n   * \n   * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / \"walking\n   * around\" HTML tags.\n   */\n\n  Autolinker.htmlParser.HtmlParser = Autolinker.Util.extend(Object, {\n    /**\n     * @private\n     * @property {RegExp} htmlRegex\n     * \n     * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\n     * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.\n     * \n     * Capturing groups:\n     * \n     * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\n     * 2. If it is an end tag, this group will have the '/'.\n     * 3. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)\n     */\n    htmlRegex: function () {\n      var tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\n          attrNameRegex = /[^\\s\\0\"'>\\/=\\x01-\\x1F\\x7F]+/,\n          // the unicode range accounts for excluding control chars, and the delete char\n      attrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/,\n          // double quoted, single quoted, or unquoted attribute values\n      nameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?'; // optional '=[value]'\n\n      return new RegExp([// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n      '(?:', '<(!DOCTYPE)', // *** Capturing Group 1 - If it's a doctype tag\n      // Zero or more attributes following the tag name\n      '(?:', '\\\\s+', // one or more whitespace chars before an attribute\n      // Either:\n      // A. attr=\"value\", or \n      // B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n      '(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')', ')*', '>', ')', '|', // All other HTML tags (i.e. tags that are not <!DOCTYPE>)\n      '(?:', '<(/)?', // Beginning of a tag. Either '<' for a start tag, or '</' for an end tag. \n      // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\n      // *** Capturing Group 3 - The tag name\n      '(' + tagNameRegex.source + ')', // Zero or more attributes following the tag name\n      '(?:', '\\\\s+', // one or more whitespace chars before an attribute\n      nameEqualsValueRegex, // attr=\"value\" (with optional =\"value\" part)\n      ')*', '\\\\s*/?', // any trailing spaces and optional '/' before the closing '>'\n      '>', ')'].join(\"\"), 'gi');\n    }(),\n\n    /**\n     * @private\n     * @property {RegExp} htmlCharacterEntitiesRegex\n     *\n     * The regular expression that matches common HTML character entities.\n     * \n     * Ignoring &amp; as it could be part of a query string -- handling it separately.\n     */\n    htmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\n\n    /**\n     * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes} to represent\n     * the HTML structure of the input string. \n     * \n     * @param {String} html The HTML to parse.\n     * @return {Autolinker.htmlParser.HtmlNode[]}\n     */\n    parse: function parse(html) {\n      var htmlRegex = this.htmlRegex,\n          currentResult,\n          lastIndex = 0,\n          textAndEntityNodes,\n          nodes = []; // will be the result of the method\n\n      while ((currentResult = htmlRegex.exec(html)) !== null) {\n        var tagText = currentResult[0],\n            tagName = currentResult[1] || currentResult[3],\n            // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\") \n        isClosingTag = !!currentResult[2],\n            inBetweenTagsText = html.substring(lastIndex, currentResult.index); // Push TextNodes and EntityNodes for any text found between tags\n\n        if (inBetweenTagsText) {\n          textAndEntityNodes = this.parseTextAndEntityNodes(inBetweenTagsText);\n          nodes.push.apply(nodes, textAndEntityNodes);\n        } // Push the ElementNode\n\n\n        nodes.push(this.createElementNode(tagText, tagName, isClosingTag));\n        lastIndex = currentResult.index + tagText.length;\n      } // Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\n\n\n      if (lastIndex < html.length) {\n        var text = html.substring(lastIndex); // Push TextNodes and EntityNodes for any text found between tags\n\n        if (text) {\n          textAndEntityNodes = this.parseTextAndEntityNodes(text);\n          nodes.push.apply(nodes, textAndEntityNodes);\n        }\n      }\n\n      return nodes;\n    },\n\n    /**\n     * Parses text and HTML entity nodes from a given string. The input string should not have any HTML tags (elements)\n     * within it.\n     * \n     * @private\n     * @param {String} text The text to parse.\n     * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to represent the \n     *   {@link Autolinker.htmlParser.TextNode TextNodes} and {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\n     */\n    parseTextAndEntityNodes: function parseTextAndEntityNodes(text) {\n      var nodes = [],\n          textAndEntityTokens = Autolinker.Util.splitAndCapture(text, this.htmlCharacterEntitiesRegex); // split at HTML entities, but include the HTML entities in the results array\n      // Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\n      // For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the \n      //   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\n\n      for (var i = 0, len = textAndEntityTokens.length; i < len; i += 2) {\n        var textToken = textAndEntityTokens[i],\n            entityToken = textAndEntityTokens[i + 1];\n        if (textToken) nodes.push(this.createTextNode(textToken));\n        if (entityToken) nodes.push(this.createEntityNode(entityToken));\n      }\n\n      return nodes;\n    },\n\n    /**\n     * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\n     * \n     * @private\n     * @param {String} tagText The full text of the tag (element) that was matched, including its attributes.\n     * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would be passed to this method as \"img\".\n     * @param {Boolean} isClosingTag `true` if it's a closing tag, false otherwise.\n     * @return {Autolinker.htmlParser.ElementNode}\n     */\n    createElementNode: function createElementNode(tagText, tagName, isClosingTag) {\n      return new Autolinker.htmlParser.ElementNode({\n        text: tagText,\n        tagName: tagName.toLowerCase(),\n        closing: isClosingTag\n      });\n    },\n\n    /**\n     * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\n     * \n     * @private\n     * @param {String} text The text that was matched for the HTML entity (such as '&amp;nbsp;').\n     * @return {Autolinker.htmlParser.EntityNode}\n     */\n    createEntityNode: function createEntityNode(text) {\n      return new Autolinker.htmlParser.EntityNode({\n        text: text\n      });\n    },\n\n    /**\n     * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\n     * \n     * @private\n     * @param {String} text The text that was matched.\n     * @return {Autolinker.htmlParser.TextNode}\n     */\n    createTextNode: function createTextNode(text) {\n      return new Autolinker.htmlParser.TextNode({\n        text: text\n      });\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @abstract\n   * @class Autolinker.htmlParser.HtmlNode\n   * \n   * Represents an HTML node found in an input string. An HTML node is one of the following:\n   * \n   * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.\n   * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.\n   * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML\n   *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;\n   */\n\n  Autolinker.htmlParser.HtmlNode = Autolinker.Util.extend(Object, {\n    /**\n     * @cfg {String} text (required)\n     * \n     * The original text that was matched for the HtmlNode. \n     * \n     * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's\n     *   text.\n     * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.\n     * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of\n     *   the HTML entity.\n     */\n    text: \"\",\n\n    /**\n     * @constructor\n     * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n     */\n    constructor: function constructor(cfg) {\n      Autolinker.Util.assign(this, cfg);\n    },\n\n    /**\n     * Returns a string name for the type of node that this class represents.\n     * \n     * @abstract\n     * @return {String}\n     */\n    getType: Autolinker.Util.abstractMethod,\n\n    /**\n     * Retrieves the {@link #text} for the HtmlNode.\n     * \n     * @return {String}\n     */\n    getText: function getText() {\n      return this.text;\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.htmlParser.ElementNode\n   * @extends Autolinker.htmlParser.HtmlNode\n   * \n   * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n   * \n   * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n   */\n\n  Autolinker.htmlParser.ElementNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n    /**\n     * @cfg {String} tagName (required)\n     * \n     * The name of the tag that was matched.\n     */\n    tagName: '',\n\n    /**\n     * @cfg {Boolean} closing (required)\n     * \n     * `true` if the element (tag) is a closing tag, `false` if its an opening tag.\n     */\n    closing: false,\n\n    /**\n     * Returns a string name for the type of node that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'element';\n    },\n\n    /**\n     * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns \"img\".\n     * \n     * @return {String}\n     */\n    getTagName: function getTagName() {\n      return this.tagName;\n    },\n\n    /**\n     * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns\n     * `false`, while &lt;/div&gt; returns `true`.\n     * \n     * @return {Boolean}\n     */\n    isClosing: function isClosing() {\n      return this.closing;\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.htmlParser.EntityNode\n   * @extends Autolinker.htmlParser.HtmlNode\n   * \n   * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n   * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.\n   * \n   * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes \n   * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\n   * \n   * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n   */\n\n  Autolinker.htmlParser.EntityNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n    /**\n     * Returns a string name for the type of node that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'entity';\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.htmlParser.TextNode\n   * @extends Autolinker.htmlParser.HtmlNode\n   * \n   * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n   * \n   * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n   */\n\n  Autolinker.htmlParser.TextNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n    /**\n     * Returns a string name for the type of node that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'text';\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @private\n   * @class Autolinker.matchParser.MatchParser\n   * @extends Object\n   * \n   * Used by Autolinker to parse {@link #urls URLs}, {@link #emails email addresses}, and {@link #twitter Twitter handles}, \n   * given an input string of text.\n   * \n   * The MatchParser is fed a non-HTML string in order to search out URLs, email addresses and Twitter handles. Autolinker\n   * first uses the {@link HtmlParser} to \"walk around\" HTML tags, and then the text around the HTML tags is passed into\n   * the MatchParser in order to find the actual matches.\n   */\n\n  Autolinker.matchParser.MatchParser = Autolinker.Util.extend(Object, {\n    /**\n     * @cfg {Boolean} urls\n     * \n     * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n     */\n    urls: true,\n\n    /**\n     * @cfg {Boolean} email\n     * \n     * `true` if email addresses should be automatically linked, `false` if they should not be.\n     */\n    email: true,\n\n    /**\n     * @cfg {Boolean} twitter\n     * \n     * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n     */\n    twitter: true,\n\n    /**\n     * @cfg {Boolean} stripPrefix\n     * \n     * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text\n     * in {@link Autolinker.match.Url URL matches}, `false` otherwise.\n     * \n     * TODO: Handle this before a URL Match object is instantiated.\n     */\n    stripPrefix: true,\n\n    /**\n     * @private\n     * @property {RegExp} matcherRegex\n     * \n     * The regular expression that matches URLs, email addresses, and Twitter handles.\n     * \n     * This regular expression has the following capturing groups:\n     * \n     * 1. Group that is used to determine if there is a Twitter handle match (i.e. \\@someTwitterUser). Simply check for its \n     *    existence to determine if there is a Twitter handle match. The next couple of capturing groups give information \n     *    about the Twitter handle match.\n     * 2. The whitespace character before the \\@sign in a Twitter handle. This is needed because there are no lookbehinds in\n     *    JS regular expressions, and can be used to reconstruct the original string in a replace().\n     * 3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.\n     * 4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full \n     *    address. Ex: 'me@my.com'\n     * 5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.\n     *    This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor\n     * 6. Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single\n     *    word, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n     * 7. A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a \n     *    protocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match\n     *    or the // was in a string we don't want to auto-link.\n     * 8. A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a \n     *    protocol-relative match. See #6 for more info. \n     */\n    matcherRegex: function () {\n      var twitterRegex = /(^|[^\\w])@(\\w{1,15})/,\n          // For matching a twitter handle. Ex: @gregory_jacobs\n      emailRegex = /(?:[\\-;:&=\\+\\$,\\w\\.]+@)/,\n          // something@ for email addresses (a.k.a. local-part)\n      protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n          // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n      wwwRegex = /(?:www\\.)/,\n          // starting with 'www.'\n      domainNameRegex = /[A-Za-z0-9\\.\\-]*[A-Za-z0-9\\-]/,\n          // anything looking at all like a domain, non-unicode domains, not ending in a period\n      tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/,\n          // match our known top level domains (TLDs)\n      // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n      // http://blog.codinghorror.com/the-problem-with-urls/\n      urlSuffixRegex = /[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]?!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]]/;\n      return new RegExp(['(', // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace() \n      // *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and \n      // *** Capturing group $3, which matches the actual twitter handle\n      twitterRegex.source, ')', '|', '(', // *** Capturing group $4, which is used to determine an email match\n      emailRegex.source, domainNameRegex.source, tldRegex.source, ')', '|', '(', // *** Capturing group $5, which is used to match a URL\n      '(?:', // parens to cover match for protocol (optional), and domain\n      '(', // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)\n      protocolRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n      '(.?//)?', // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n      wwwRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for known a TLD url (ex: google.com)\n      '(.?//)?', // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n      domainNameRegex.source, tldRegex.source, ')', ')', '(?:' + urlSuffixRegex.source + ')?', // match for path, query string, and/or hash anchor - optional\n      ')'].join(\"\"), 'gi');\n    }(),\n\n    /**\n     * @private\n     * @property {RegExp} charBeforeProtocolRelMatchRegex\n     * \n     * The regular expression used to retrieve the character before a protocol-relative URL match.\n     * \n     * This is used in conjunction with the {@link #matcherRegex}, which needs to grab the character before a protocol-relative\n     * '//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped\n     * from the URL.\n     */\n    charBeforeProtocolRelMatchRegex: /^(.)?\\/\\//,\n\n    /**\n     * @private\n     * @property {Autolinker.MatchValidator} matchValidator\n     * \n     * The MatchValidator object, used to filter out any false positives from the {@link #matcherRegex}. See\n     * {@link Autolinker.MatchValidator} for details.\n     */\n\n    /**\n     * @constructor\n     * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n     */\n    constructor: function constructor(cfg) {\n      Autolinker.Util.assign(this, cfg);\n      this.matchValidator = new Autolinker.MatchValidator();\n    },\n\n    /**\n     * Parses the input `text` to search for URLs/emails/Twitter handles, and calls the `replaceFn`\n     * to allow replacements of the matches. Returns the `text` with matches replaced.\n     * \n     * @param {String} text The text to search and repace matches in.\n     * @param {Function} replaceFn The iterator function to handle the replacements. The function takes a\n     *   single argument, a {@link Autolinker.match.Match} object, and should return the text that should\n     *   make the replacement.\n     * @param {Object} [contextObj=window] The context object (\"scope\") to run the `replaceFn` in.\n     * @return {String}\n     */\n    replace: function replace(text, replaceFn, contextObj) {\n      var me = this; // for closure\n\n      return text.replace(this.matcherRegex, function (matchStr, $1, $2, $3, $4, $5, $6, $7, $8) {\n        var matchDescObj = me.processCandidateMatch(matchStr, $1, $2, $3, $4, $5, $6, $7, $8); // \"match description\" object\n        // Return out with no changes for match types that are disabled (url, email, twitter), or for matches that are \n        // invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\n        if (!matchDescObj) {\n          return matchStr;\n        } else {\n          // Generate replacement text for the match from the `replaceFn`\n          var replaceStr = replaceFn.call(contextObj, matchDescObj.match);\n          return matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;\n        }\n      });\n    },\n\n    /**\n     * Processes a candidate match from the {@link #matcherRegex}. \n     * \n     * Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the {@link #matchValidator}. In\n     * this case, the method returns `null`. Otherwise, a valid Object with `prefixStr`, `match`, and `suffixStr` is returned.\n     * \n     * @private\n     * @param {String} matchStr The full match that was found by the {@link #matcherRegex}.\n     * @param {String} twitterMatch The matched text of a Twitter handle, if the match is a Twitter match.\n     * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char before the @ sign in a Twitter handle match. This \n     *   is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.\n     * @param {String} twitterHandle The actual Twitter user (i.e the word after the @ sign in a Twitter match).\n     * @param {String} emailAddressMatch The matched email address for an email address match.\n     * @param {String} urlMatch The matched URL string for a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n     *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n     * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative match from a 'www' url, with the character that \n     *   comes before the '//'.\n     * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative match from a TLD (top level domain) match, with \n     *   the character that comes before the '//'.\n     *   \n     * @return {Object} A \"match description object\". This will be `null` if the match was invalid, or if a match type is disabled.\n     *   Otherwise, this will be an Object (map) with the following properties:\n     * @return {String} return.prefixStr The char(s) that should be prepended to the replacement string. These are char(s) that\n     *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n     *   the replacement stream.\n     * @return {String} return.suffixStr The char(s) that should be appended to the replacement string. These are char(s) that\n     *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n     *   the replacement stream.\n     * @return {Autolinker.match.Match} return.match The Match object that represents the match that was found.\n     */\n    processCandidateMatch: function processCandidateMatch(matchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle, emailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch) {\n      // Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will \n      // be added to `prefixStr` and `suffixStr`).\n      var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n          match,\n          // Will be an Autolinker.match.Match object\n      prefixStr = \"\",\n          // A string to use to prefix the anchor tag that is created. This is needed for the Twitter handle match\n      suffixStr = \"\"; // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.\n      // Return out with `null` for match types that are disabled (url, email, twitter), or for matches that are \n      // invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\n      if (twitterMatch && !this.twitter || emailAddressMatch && !this.email || urlMatch && !this.urls || !this.matchValidator.isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch)) {\n        return null;\n      } // Handle a closing parenthesis at the end of the match, and exclude it if there is not a matching open parenthesis\n      // in the match itself. \n\n\n      if (this.matchHasUnbalancedClosingParen(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n\n        suffixStr = \")\"; // this will be added after the generated <a> tag\n      }\n\n      if (emailAddressMatch) {\n        match = new Autolinker.match.Email({\n          matchedText: matchStr,\n          email: emailAddressMatch\n        });\n      } else if (twitterMatch) {\n        // fix up the `matchStr` if there was a preceding whitespace char, which was needed to determine the match \n        // itself (since there are no look-behinds in JS regexes)\n        if (twitterHandlePrefixWhitespaceChar) {\n          prefixStr = twitterHandlePrefixWhitespaceChar;\n          matchStr = matchStr.slice(1); // remove the prefixed whitespace char from the match\n        }\n\n        match = new Autolinker.match.Twitter({\n          matchedText: matchStr,\n          twitterHandle: twitterHandle\n        });\n      } else {\n        // url match\n        // If it's a protocol-relative '//' match, remove the character before the '//' (which the matcherRegex needed\n        // to match due to the lack of a negative look-behind in JavaScript regular expressions)\n        if (protocolRelativeMatch) {\n          var charBeforeMatch = protocolRelativeMatch.match(this.charBeforeProtocolRelMatchRegex)[1] || \"\";\n\n          if (charBeforeMatch) {\n            // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n            prefixStr = charBeforeMatch;\n            matchStr = matchStr.slice(1); // remove the prefixed char from the match\n          }\n        }\n\n        match = new Autolinker.match.Url({\n          matchedText: matchStr,\n          url: matchStr,\n          protocolUrlMatch: !!protocolUrlMatch,\n          protocolRelativeMatch: !!protocolRelativeMatch,\n          stripPrefix: this.stripPrefix\n        });\n      }\n\n      return {\n        prefixStr: prefixStr,\n        suffixStr: suffixStr,\n        match: match\n      };\n    },\n\n    /**\n     * Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed\n     * from the match itself, and appended after the generated anchor tag in {@link #processTextNode}.\n     * \n     * A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis\n     * for URLs such as \"wikipedia.com/something_(disambiguation)\", which should be auto-linked. \n     * \n     * However, an extra parenthesis *will* be included when the URL itself is wrapped in parenthesis, such as in the case of\n     * \"(wikipedia.com/something_(disambiguation))\". In this case, the last closing parenthesis should *not* be part of the URL \n     * itself, and this method will return `true`.\n     * \n     * @private\n     * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n     * @return {Boolean} `true` if there is an unbalanced closing parenthesis at the end of the `matchStr`, `false` otherwise.\n     */\n    matchHasUnbalancedClosingParen: function matchHasUnbalancedClosingParen(matchStr) {\n      var lastChar = matchStr.charAt(matchStr.length - 1);\n\n      if (lastChar === ')') {\n        var openParensMatch = matchStr.match(/\\(/g),\n            closeParensMatch = matchStr.match(/\\)/g),\n            numOpenParens = openParensMatch && openParensMatch.length || 0,\n            numCloseParens = closeParensMatch && closeParensMatch.length || 0;\n\n        if (numOpenParens < numCloseParens) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  /*global Autolinker */\n\n  /*jshint scripturl:true */\n\n  /**\n   * @private\n   * @class Autolinker.MatchValidator\n   * @extends Object\n   * \n   * Used by Autolinker to filter out false positives from the {@link Autolinker#matcherRegex}.\n   * \n   * Due to the limitations of regular expressions (including the missing feature of look-behinds in JS regular expressions),\n   * we cannot always determine the validity of a given match. This class applies a bit of additional logic to filter out any\n   * false positives that have been matched by the {@link Autolinker#matcherRegex}.\n   */\n\n  Autolinker.MatchValidator = Autolinker.Util.extend(Object, {\n    /**\n     * @private\n     * @property {RegExp} invalidProtocolRelMatchRegex\n     * \n     * The regular expression used to check a potential protocol-relative URL match, coming from the \n     * {@link Autolinker#matcherRegex}. A protocol-relative URL is, for example, \"//yahoo.com\"\n     * \n     * This regular expression checks to see if there is a word character before the '//' match in order to determine if \n     * we should actually autolink a protocol-relative URL. This is needed because there is no negative look-behind in \n     * JavaScript regular expressions. \n     * \n     * For instance, we want to autolink something like \"Go to: //google.com\", but we don't want to autolink something \n     * like \"abc//google.com\"\n     */\n    invalidProtocolRelMatchRegex: /^[\\w]\\/\\//,\n\n    /**\n     * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n     * \n     * @private\n     * @property {RegExp} hasFullProtocolRegex\n     */\n    hasFullProtocolRegex: /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//,\n\n    /**\n     * Regex to find the URI scheme, such as 'mailto:'.\n     * \n     * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n     * \n     * @private\n     * @property {RegExp} uriSchemeRegex\n     */\n    uriSchemeRegex: /^[A-Za-z][-.+A-Za-z0-9]+:/,\n\n    /**\n     * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n     * \n     * @private\n     * @property {RegExp} hasWordCharAfterProtocolRegex\n     */\n    hasWordCharAfterProtocolRegex: /:[^\\s]*?[A-Za-z]/,\n\n    /**\n     * Determines if a given match found by {@link Autolinker#processTextNode} is valid. Will return `false` for:\n     * \n     * 1) URL matches which do not have at least have one period ('.') in the domain name (effectively skipping over \n     *    matches like \"abc:def\"). However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n     * 2) URL matches which do not have at least one word character in the domain name (effectively skipping over\n     *    matches like \"git:1.0\").\n     * 3) A protocol-relative url match (a URL beginning with '//') whose previous character is a word character \n     *    (effectively skipping over strings like \"abc//google.com\")\n     * \n     * Otherwise, returns `true`.\n     * \n     * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n     *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n     * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n     *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n     *   preceding the '//'.\n     * @return {Boolean} `true` if the match given is valid and should be processed, or `false` if the match is invalid and/or \n     *   should just not be processed.\n     */\n    isValidMatch: function isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch) {\n      if (protocolUrlMatch && !this.isValidUriScheme(protocolUrlMatch) || this.urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n      this.urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) || // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n      this.isInvalidProtocolRelativeMatch(protocolRelativeMatch) // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n      ) {\n          return false;\n        }\n\n      return true;\n    },\n\n    /**\n     * Determines if the URI scheme is a valid scheme to be autolinked. Returns `false` if the scheme is \n     * 'javascript:' or 'vbscript:'\n     * \n     * @private\n     * @param {String} uriSchemeMatch The match URL string for a full URI scheme match. Ex: 'http://yahoo.com' \n     *   or 'mailto:a@a.com'.\n     * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n     */\n    isValidUriScheme: function isValidUriScheme(uriSchemeMatch) {\n      var uriScheme = uriSchemeMatch.match(this.uriSchemeRegex)[0].toLowerCase();\n      return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n    },\n\n    /**\n     * Determines if a URL match does not have either:\n     * \n     * a) a full protocol (i.e. 'http://'), or\n     * b) at least one dot ('.') in the domain name (for a non-full-protocol match).\n     * \n     * Either situation is considered an invalid URL (ex: 'git:d' does not have either the '://' part, or at least one dot\n     * in the domain name. If the match was 'git:abc.com', we would consider this valid.)\n     * \n     * @private\n     * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n     *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n     * @return {Boolean} `true` if the URL match does not have a full protocol, or at least one dot ('.') in a non-full-protocol\n     *   match.\n     */\n    urlMatchDoesNotHaveProtocolOrDot: function urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) {\n      return !!urlMatch && (!protocolUrlMatch || !this.hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n    },\n\n    /**\n     * Determines if a URL match does not have at least one word character after the protocol (i.e. in the domain name).\n     * \n     * At least one letter character must exist in the domain name after a protocol match. Ex: skip over something \n     * like \"git:1.0\"\n     * \n     * @private\n     * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n     * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to\n     *   know whether or not we have a protocol in the URL string, in order to check for a word character after the protocol\n     *   separator (':').\n     * @return {Boolean} `true` if the URL match does not have at least one word character in it after the protocol, `false`\n     *   otherwise.\n     */\n    urlMatchDoesNotHaveAtLeastOneWordChar: function urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) {\n      if (urlMatch && protocolUrlMatch) {\n        return !this.hasWordCharAfterProtocolRegex.test(urlMatch);\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Determines if a protocol-relative match is an invalid one. This method returns `true` if there is a `protocolRelativeMatch`,\n     * and that match contains a word character before the '//' (i.e. it must contain whitespace or nothing before the '//' in\n     * order to be considered valid).\n     * \n     * @private\n     * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n     *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n     *   preceding the '//'.\n     * @return {Boolean} `true` if it is an invalid protocol-relative match, `false` otherwise.\n     */\n    isInvalidProtocolRelativeMatch: function isInvalidProtocolRelativeMatch(protocolRelativeMatch) {\n      return !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test(protocolRelativeMatch);\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @abstract\n   * @class Autolinker.match.Match\n   * \n   * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a \n   * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n   * \n   * For example:\n   * \n   *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n   *     \n   *     var linkedText = Autolinker.link( input, {\n   *         replaceFn : function( autolinker, match ) {\n   *             console.log( \"href = \", match.getAnchorHref() );\n   *             console.log( \"text = \", match.getAnchorText() );\n   *         \n   *             switch( match.getType() ) {\n   *                 case 'url' : \n   *                     console.log( \"url: \", match.getUrl() );\n   *                     \n   *                 case 'email' :\n   *                     console.log( \"email: \", match.getEmail() );\n   *                     \n   *                 case 'twitter' :\n   *                     console.log( \"twitter: \", match.getTwitterHandle() );\n   *             }\n   *         }\n   *     } );\n   *     \n   * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n   */\n\n  Autolinker.match.Match = Autolinker.Util.extend(Object, {\n    /**\n     * @cfg {String} matchedText (required)\n     * \n     * The original text that was matched.\n     */\n\n    /**\n     * @constructor\n     * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n     */\n    constructor: function constructor(cfg) {\n      Autolinker.Util.assign(this, cfg);\n    },\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * \n     * @abstract\n     * @return {String}\n     */\n    getType: Autolinker.Util.abstractMethod,\n\n    /**\n     * Returns the original text that was matched.\n     * \n     * @return {String}\n     */\n    getMatchedText: function getMatchedText() {\n      return this.matchedText;\n    },\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     * \n     * @abstract\n     * @return {String}\n     */\n    getAnchorHref: Autolinker.Util.abstractMethod,\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     * \n     * @abstract\n     * @return {String}\n     */\n    getAnchorText: Autolinker.Util.abstractMethod\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.match.Email\n   * @extends Autolinker.match.Match\n   * \n   * Represents a Email match found in an input string which should be Autolinked.\n   * \n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n  Autolinker.match.Email = Autolinker.Util.extend(Autolinker.match.Match, {\n    /**\n     * @cfg {String} email (required)\n     * \n     * The email address that was matched.\n     */\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'email';\n    },\n\n    /**\n     * Returns the email address that was matched.\n     * \n     * @return {String}\n     */\n    getEmail: function getEmail() {\n      return this.email;\n    },\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorHref: function getAnchorHref() {\n      return 'mailto:' + this.email;\n    },\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorText: function getAnchorText() {\n      return this.email;\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.match.Twitter\n   * @extends Autolinker.match.Match\n   * \n   * Represents a Twitter match found in an input string which should be Autolinked.\n   * \n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n  Autolinker.match.Twitter = Autolinker.Util.extend(Autolinker.match.Match, {\n    /**\n     * @cfg {String} twitterHandle (required)\n     * \n     * The Twitter handle that was matched.\n     */\n\n    /**\n     * Returns the type of match that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'twitter';\n    },\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * \n     * @return {String}\n     */\n    getTwitterHandle: function getTwitterHandle() {\n      return this.twitterHandle;\n    },\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorHref: function getAnchorHref() {\n      return 'https://twitter.com/' + this.twitterHandle;\n    },\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorText: function getAnchorText() {\n      return '@' + this.twitterHandle;\n    }\n  });\n  /*global Autolinker */\n\n  /**\n   * @class Autolinker.match.Url\n   * @extends Autolinker.match.Match\n   * \n   * Represents a Url match found in an input string which should be Autolinked.\n   * \n   * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n   */\n\n  Autolinker.match.Url = Autolinker.Util.extend(Autolinker.match.Match, {\n    /**\n     * @cfg {String} url (required)\n     * \n     * The url that was matched.\n     */\n\n    /**\n     * @cfg {Boolean} protocolUrlMatch (required)\n     * \n     * `true` if the URL is a match which already has a protocol (i.e. 'http://'), `false` if the match was from a 'www' or\n     * known TLD match.\n     */\n\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     * \n     * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',\n     * and will be either http:// or https:// based on the protocol that the site is loaded under.\n     */\n\n    /**\n     * @cfg {Boolean} stripPrefix (required)\n     * @inheritdoc Autolinker#stripPrefix\n     */\n\n    /**\n     * @private\n     * @property {RegExp} urlPrefixRegex\n     * \n     * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n     */\n    urlPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\n\n    /**\n     * @private\n     * @property {RegExp} protocolRelativeRegex\n     * \n     * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n     * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n     */\n    protocolRelativeRegex: /^\\/\\//,\n\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     * \n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n    protocolPrepended: false,\n\n    /**\n     * Returns a string name for the type of match that this class represents.\n     * \n     * @return {String}\n     */\n    getType: function getType() {\n      return 'url';\n    },\n\n    /**\n     * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n     * match was missing a protocol.\n     * \n     * @return {String}\n     */\n    getUrl: function getUrl() {\n      var url = this.url; // if the url string doesn't begin with a protocol, assume 'http://'\n\n      if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n        url = this.url = 'http://' + url;\n        this.protocolPrepended = true;\n      }\n\n      return url;\n    },\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorHref: function getAnchorHref() {\n      var url = this.getUrl();\n      return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html \n    },\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     * \n     * @return {String}\n     */\n    getAnchorText: function getAnchorText() {\n      var anchorText = this.getUrl();\n\n      if (this.protocolRelativeMatch) {\n        // Strip off any protocol-relative '//' from the anchor text\n        anchorText = this.stripProtocolRelativePrefix(anchorText);\n      }\n\n      if (this.stripPrefix) {\n        anchorText = this.stripUrlPrefix(anchorText);\n      }\n\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n\n      return anchorText;\n    },\n    // ---------------------------------------\n    // Utility Functionality\n\n    /**\n     * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n     * \n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   url prefix (such as stripping off \"http://\")\n     * @return {String} The `anchorText`, with the prefix stripped.\n     */\n    stripUrlPrefix: function stripUrlPrefix(text) {\n      return text.replace(this.urlPrefixRegex, '');\n    },\n\n    /**\n     * Strips any protocol-relative '//' from the anchor text.\n     * \n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   protocol-relative prefix (such as stripping off \"//\")\n     * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n     */\n    stripProtocolRelativePrefix: function stripProtocolRelativePrefix(text) {\n      return text.replace(this.protocolRelativeRegex, '');\n    },\n\n    /**\n     * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n     * \n     * @private\n     * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n     *   slash ('/') that may exist.\n     * @return {String} The `anchorText`, with the trailing slash removed.\n     */\n    removeTrailingSlash: function removeTrailingSlash(anchorText) {\n      if (anchorText.charAt(anchorText.length - 1) === '/') {\n        anchorText = anchorText.slice(0, -1);\n      }\n\n      return anchorText;\n    }\n  });\n  return Autolinker;\n});","'use strict';\n/**\n * Local dependencies\n */\n\nvar Ruler = require('./ruler');\n\nvar StateBlock = require('./rules_block/state_block');\n/**\n * Parser rules\n */\n\n\nvar _rules = [['code', require('./rules_block/code')], ['fences', require('./rules_block/fences'), ['paragraph', 'blockquote', 'list']], ['blockquote', require('./rules_block/blockquote'), ['paragraph', 'blockquote', 'list']], ['hr', require('./rules_block/hr'), ['paragraph', 'blockquote', 'list']], ['list', require('./rules_block/list'), ['paragraph', 'blockquote']], ['footnote', require('./rules_block/footnote'), ['paragraph']], ['heading', require('./rules_block/heading'), ['paragraph', 'blockquote']], ['lheading', require('./rules_block/lheading')], ['htmlblock', require('./rules_block/htmlblock'), ['paragraph', 'blockquote']], ['table', require('./rules_block/table'), ['paragraph']], ['deflist', require('./rules_block/deflist'), ['paragraph']], ['paragraph', require('./rules_block/paragraph')]];\n/**\n * Block Parser class\n *\n * @api private\n */\n\nfunction ParserBlock() {\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], {\n      alt: (_rules[i][2] || []).slice()\n    });\n  }\n}\n/**\n * Generate tokens for the given input range.\n *\n * @param  {Object} `state` Has properties like `src`, `parser`, `options` etc\n * @param  {Number} `startLine`\n * @param  {Number} `endLine`\n * @api private\n */\n\n\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var rules = this.ruler.getRules('');\n  var len = rules.length;\n  var line = startLine;\n  var hasEmptyLines = false;\n  var ok, i;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n\n    if (line >= endLine) {\n      break;\n    } // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n\n\n    if (state.tShift[line] < state.blkIndent) {\n      break;\n    } // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n\n      if (ok) {\n        break;\n      }\n    } // set state.tight iff we had an empty line before current tag\n    // i.e. latest empty line should not count\n\n\n    state.tight = !hasEmptyLines; // paragraph might \"eat\" one newline after it in nested lists\n\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++; // two empty lines should stop the parser in list mode\n\n      if (line < endLine && state.parentType === 'list' && state.isEmpty(line)) {\n        break;\n      }\n\n      state.line = line;\n    }\n  }\n};\n\nvar TABS_SCAN_RE = /[\\n\\t]/g;\nvar NEWLINES_RE = /\\r[\\n\\u0085]|[\\u2424\\u2028\\u0085]/g;\nvar SPACES_RE = /\\u00a0/g;\n/**\n * Tokenize the given `str`.\n *\n * @param  {String} `str` Source string\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @param  {Array} `outTokens`\n * @api private\n */\n\nParserBlock.prototype.parse = function (str, options, env, outTokens) {\n  var state,\n      lineStart = 0,\n      lastTabPos = 0;\n\n  if (!str) {\n    return [];\n  } // Normalize spaces\n\n\n  str = str.replace(SPACES_RE, ' '); // Normalize newlines\n\n  str = str.replace(NEWLINES_RE, '\\n'); // Replace tabs with proper number of spaces (1..4)\n\n  if (str.indexOf('\\t') >= 0) {\n    str = str.replace(TABS_SCAN_RE, function (match, offset) {\n      var result;\n\n      if (str.charCodeAt(offset) === 0x0A) {\n        lineStart = offset + 1;\n        lastTabPos = 0;\n        return match;\n      }\n\n      result = '    '.slice((offset - lineStart - lastTabPos) % 4);\n      lastTabPos = offset - lineStart + 1;\n      return result;\n    });\n  }\n\n  state = new StateBlock(str, this, options, env, outTokens);\n  this.tokenize(state, state.line, state.lineMax);\n};\n/**\n * Expose `ParserBlock`\n */\n\n\nmodule.exports = ParserBlock;","// Parser state class\n'use strict';\n\nfunction StateBlock(src, parser, options, env, tokens) {\n  var ch, s, start, pos, len, indent, indent_found;\n  this.src = src; // Shortcuts to simplify nested calls\n\n  this.parser = parser;\n  this.options = options;\n  this.env = env; //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n  this.bMarks = []; // line begin offsets for fast jumps\n\n  this.eMarks = []; // line end offsets for fast jumps\n\n  this.tShift = []; // indent for each line\n  // block parser variables\n\n  this.blkIndent = 0; // required block content indent\n  // (for example, if we are in list)\n\n  this.line = 0; // line index in src\n\n  this.lineMax = 0; // lines count\n\n  this.tight = false; // loose/tight mode for lists\n\n  this.parentType = 'root'; // if `list`, block parser stops on two newlines\n\n  this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)\n\n  this.level = 0; // renderer\n\n  this.result = ''; // Create caches\n  // Generate markers.\n\n  s = this.src;\n  indent = 0;\n  indent_found = false;\n\n  for (start = pos = indent = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (ch === 0x20\n      /* space */\n      ) {\n          indent++;\n          continue;\n        } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) {\n        pos++;\n      }\n\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      indent_found = false;\n      indent = 0;\n      start = pos + 1;\n    }\n  } // Push fake entry to simplify cache bounds checks\n\n\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n\n  return from;\n}; // Skip spaces from given position.\n\n\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== 0x20\n    /* space */\n    ) {\n        break;\n      }\n  }\n\n  return pos;\n}; // Skip char codes from given position\n\n\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) {\n      break;\n    }\n  }\n\n  return pos;\n}; // Skip char codes reverse from given position - 1\n\n\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) {\n    return pos;\n  }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) {\n      return pos + 1;\n    }\n  }\n\n  return pos;\n}; // cut lines range from source.\n\n\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i,\n      first,\n      last,\n      queue,\n      shift,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  } // Opt: don't use push queue for single line;\n\n\n  if (line + 1 === end) {\n    first = this.bMarks[line] + Math.min(this.tShift[line], indent);\n    last = keepLastLF ? this.eMarks[line] + 1 : this.eMarks[line];\n    return this.src.slice(first, last);\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    shift = this.tShift[line];\n\n    if (shift > indent) {\n      shift = indent;\n    }\n\n    if (shift < 0) {\n      shift = 0;\n    }\n\n    first = this.bMarks[line] + shift;\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    queue[i] = this.src.slice(first, last);\n  }\n\n  return queue.join('');\n};\n\nmodule.exports = StateBlock;","// Code block (4 spaces padded)\n'use strict';\n\nmodule.exports = function code(state, startLine, endLine\n/*, silent*/\n) {\n  var nextLine, last;\n\n  if (state.tShift[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.tShift[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n\n    break;\n  }\n\n  state.line = nextLine;\n  state.tokens.push({\n    type: 'code',\n    content: state.getLines(startLine, last, 4 + state.blkIndent, true),\n    block: true,\n    lines: [startLine, state.line],\n    level: state.level\n  });\n  return true;\n};","// fences (``` lang, ~~~ lang)\n'use strict';\n\nmodule.exports = function fences(state, startLine, endLine, silent) {\n  var marker,\n      len,\n      params,\n      nextLine,\n      mem,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos + 3 > max) {\n    return false;\n  }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E\n  /* ~ */\n  && marker !== 0x60\n  /* ` */\n  ) {\n      return false;\n    } // scan marker length\n\n\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n  len = pos - mem;\n\n  if (len < 3) {\n    return false;\n  }\n\n  params = state.src.slice(pos, max).trim();\n\n  if (params.indexOf('`') >= 0) {\n    return false;\n  } // Since start is found, we can report success here in validation mode\n\n\n  if (silent) {\n    return true;\n  } // search end of block\n\n\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.tShift[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) {\n      continue;\n    }\n\n    if (state.tShift[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker); // closing code fence must be at least as long as the opening one\n\n    if (pos - mem < len) {\n      continue;\n    } // make sure tail has spaces only\n\n\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) {\n      continue;\n    }\n\n    haveEndMarker = true; // found!\n\n    break;\n  } // If a fence has heading spaces, they should be removed from its inner block\n\n\n  len = state.tShift[startLine];\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n  state.tokens.push({\n    type: 'fence',\n    params: params,\n    content: state.getLines(startLine + 1, nextLine, len, true),\n    lines: [startLine, state.line],\n    level: state.level\n  });\n  return true;\n};","// Block quotes\n'use strict';\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var nextLine,\n      lastLineEmpty,\n      oldTShift,\n      oldBMarks,\n      oldIndent,\n      oldParentType,\n      lines,\n      terminatorRules,\n      i,\n      l,\n      terminate,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos > max) {\n    return false;\n  } // check the block quote marker\n\n\n  if (state.src.charCodeAt(pos++) !== 0x3E\n  /* > */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  } // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n\n\n  if (silent) {\n    return true;\n  } // skip one optional space after '>'\n\n\n  if (state.src.charCodeAt(pos) === 0x20) {\n    pos++;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n  oldBMarks = [state.bMarks[startLine]];\n  state.bMarks[startLine] = pos; // check if we have an empty blockquote\n\n  pos = pos < max ? state.skipSpaces(pos) : pos;\n  lastLineEmpty = pos >= max;\n  oldTShift = [state.tShift[startLine]];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n  terminatorRules = state.parser.ruler.getRules('blockquote'); // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E\n    /* > */\n    ) {\n        // This line is inside the blockquote.\n        // skip one optional space after '>'\n        if (state.src.charCodeAt(pos) === 0x20) {\n          pos++;\n        }\n\n        oldBMarks.push(state.bMarks[nextLine]);\n        state.bMarks[nextLine] = pos;\n        pos = pos < max ? state.skipSpaces(pos) : pos;\n        lastLineEmpty = pos >= max;\n        oldTShift.push(state.tShift[nextLine]);\n        state.tShift[nextLine] = pos - state.bMarks[nextLine];\n        continue;\n      } // Case 2: line is not inside the blockquote, and the last line was empty.\n\n\n    if (lastLineEmpty) {\n      break;\n    } // Case 3: another tag found.\n\n\n    terminate = false;\n\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldTShift.push(state.tShift[nextLine]); // A negative number means that this is a paragraph continuation;\n    //\n    // Any negative number will do the job here, but it's better for it\n    // to be large enough to make any bugs obvious.\n\n    state.tShift[nextLine] = -1337;\n  }\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  state.tokens.push({\n    type: 'blockquote_open',\n    lines: lines = [startLine, 0],\n    level: state.level++\n  });\n  state.parser.tokenize(state, startLine, nextLine);\n  state.tokens.push({\n    type: 'blockquote_close',\n    level: --state.level\n  });\n  state.parentType = oldParentType;\n  lines[1] = state.line; // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n  }\n\n  state.blkIndent = oldIndent;\n  return true;\n};","// Horizontal rule\n'use strict';\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker,\n      cnt,\n      ch,\n      pos = state.bMarks[startLine],\n      max = state.eMarks[startLine];\n  pos += state.tShift[startLine];\n\n  if (pos > max) {\n    return false;\n  }\n\n  marker = state.src.charCodeAt(pos++); // Check hr marker\n\n  if (marker !== 0x2A\n  /* * */\n  && marker !== 0x2D\n  /* - */\n  && marker !== 0x5F\n  /* _ */\n  ) {\n      return false;\n    } // markers can be mixed with spaces, but there should be at least 3 one\n\n\n  cnt = 1;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch !== marker && ch !== 0x20\n    /* space */\n    ) {\n        return false;\n      }\n\n    if (ch === marker) {\n      cnt++;\n    }\n  }\n\n  if (cnt < 3) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  state.line = startLine + 1;\n  state.tokens.push({\n    type: 'hr',\n    lines: [startLine, state.line],\n    level: state.level\n  });\n  return true;\n};","// Lists\n'use strict'; // Search `[-+*][\\n ]`, returns next pos arter marker on success\n// or -1 on fail.\n\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max;\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  if (pos >= max) {\n    return -1;\n  }\n\n  marker = state.src.charCodeAt(pos++); // Check bullet\n\n  if (marker !== 0x2A\n  /* * */\n  && marker !== 0x2D\n  /* - */\n  && marker !== 0x2B\n  /* + */\n  ) {\n      return -1;\n    }\n\n  if (pos < max && state.src.charCodeAt(pos) !== 0x20) {\n    // \" 1.test \" - is not a list item\n    return -1;\n  }\n\n  return pos;\n} // Search `\\d+[.)][\\n ]`, returns next pos arter marker on success\n// or -1 on fail.\n\n\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos + 1 >= max) {\n    return -1;\n  }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30\n  /* 0 */\n  || ch > 0x39\n  /* 9 */\n  ) {\n      return -1;\n    }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) {\n      return -1;\n    }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30\n    /* 0 */\n    && ch <= 0x39\n    /* 9 */\n    ) {\n        continue;\n      } // found valid marker\n\n\n    if (ch === 0x29\n    /* ) */\n    || ch === 0x2e\n    /* . */\n    ) {\n        break;\n      }\n\n    return -1;\n  }\n\n  if (pos < max && state.src.charCodeAt(pos) !== 0x20\n  /* space */\n  ) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i,\n      l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].tight = true;\n      state.tokens[i].tight = true;\n      i += 2;\n    }\n  }\n}\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var nextLine,\n      indent,\n      oldTShift,\n      oldIndent,\n      oldTight,\n      oldParentType,\n      start,\n      posAfterMarker,\n      max,\n      indentAfterMarker,\n      markerValue,\n      markerCharCode,\n      isOrdered,\n      contentStart,\n      listTokIdx,\n      prevEmptyEnd,\n      listLines,\n      itemLines,\n      tight = true,\n      terminatorRules,\n      i,\n      l,\n      terminate; // Detect list type and position after marker\n\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n  } else {\n    return false;\n  }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  } // We should terminate list on style change. Remember first one to compare.\n\n\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1); // For validation mode we can terminate immediately\n\n  if (silent) {\n    return true;\n  } // Start list\n\n\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n    state.tokens.push({\n      type: 'ordered_list_open',\n      order: markerValue,\n      lines: listLines = [startLine, 0],\n      level: state.level++\n    });\n  } else {\n    state.tokens.push({\n      type: 'bullet_list_open',\n      lines: listLines = [startLine, 0],\n      level: state.level++\n    });\n  } //\n  // Iterate list items\n  //\n\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.parser.ruler.getRules('list');\n\n  while (nextLine < endLine) {\n    contentStart = state.skipSpaces(posAfterMarker);\n    max = state.eMarks[nextLine];\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = contentStart - posAfterMarker;\n    } // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n\n\n    if (indentAfterMarker > 4) {\n      indentAfterMarker = 1;\n    } // If indent is less than 1, assume that it's one, example:\n    //  \"-\\n  test\"\n\n\n    if (indentAfterMarker < 1) {\n      indentAfterMarker = 1;\n    } // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n\n\n    indent = posAfterMarker - state.bMarks[nextLine] + indentAfterMarker; // Run subparser & write tokens\n\n    state.tokens.push({\n      type: 'list_item_open',\n      lines: itemLines = [startLine, 0],\n      level: state.level++\n    });\n    oldIndent = state.blkIndent;\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldParentType = state.parentType;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.blkIndent = indent;\n    state.tight = true;\n    state.parentType = 'list';\n    state.parser.tokenize(state, startLine, endLine, true); // If any of list item is tight, mark list as tight\n\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    } // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n\n\n    prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n    state.blkIndent = oldIndent;\n    state.tShift[startLine] = oldTShift;\n    state.tight = oldTight;\n    state.parentType = oldParentType;\n    state.tokens.push({\n      type: 'list_item_close',\n      level: --state.level\n    });\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) {\n      break;\n    }\n\n    if (state.isEmpty(nextLine)) {\n      break;\n    } //\n    // Try to check if list is terminated or continued.\n    //\n\n\n    if (state.tShift[nextLine] < state.blkIndent) {\n      break;\n    } // fail if terminating block found\n\n\n    terminate = false;\n\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      break;\n    } // fail if list has another type\n\n\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n\n      if (posAfterMarker < 0) {\n        break;\n      }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n\n      if (posAfterMarker < 0) {\n        break;\n      }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n      break;\n    }\n  } // Finilize list\n\n\n  state.tokens.push({\n    type: isOrdered ? 'ordered_list_close' : 'bullet_list_close',\n    level: --state.level\n  });\n  listLines[1] = nextLine;\n  state.line = nextLine; // mark paragraphs tight if needed\n\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};","// Process footnote reference list\n'use strict';\n\nmodule.exports = function footnote(state, startLine, endLine, silent) {\n  var oldBMark,\n      oldTShift,\n      oldParentType,\n      pos,\n      label,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine]; // line should be at least 5 chars - \"[^x]:\"\n\n  if (start + 4 > max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.src.charCodeAt(start + 1) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  for (pos = start + 2; pos < max; pos++) {\n    if (state.src.charCodeAt(pos) === 0x20) {\n      return false;\n    }\n\n    if (state.src.charCodeAt(pos) === 0x5D\n    /* ] */\n    ) {\n        break;\n      }\n  }\n\n  if (pos === start + 2) {\n    return false;\n  } // no empty footnote labels\n\n\n  if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A\n  /* : */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return true;\n  }\n\n  pos++;\n\n  if (!state.env.footnotes) {\n    state.env.footnotes = {};\n  }\n\n  if (!state.env.footnotes.refs) {\n    state.env.footnotes.refs = {};\n  }\n\n  label = state.src.slice(start + 2, pos - 2);\n  state.env.footnotes.refs[':' + label] = -1;\n  state.tokens.push({\n    type: 'footnote_reference_open',\n    label: label,\n    level: state.level++\n  });\n  oldBMark = state.bMarks[startLine];\n  oldTShift = state.tShift[startLine];\n  oldParentType = state.parentType;\n  state.tShift[startLine] = state.skipSpaces(pos) - pos;\n  state.bMarks[startLine] = pos;\n  state.blkIndent += 4;\n  state.parentType = 'footnote';\n\n  if (state.tShift[startLine] < state.blkIndent) {\n    state.tShift[startLine] += state.blkIndent;\n    state.bMarks[startLine] -= state.blkIndent;\n  }\n\n  state.parser.tokenize(state, startLine, endLine, true);\n  state.parentType = oldParentType;\n  state.blkIndent -= 4;\n  state.tShift[startLine] = oldTShift;\n  state.bMarks[startLine] = oldBMark;\n  state.tokens.push({\n    type: 'footnote_reference_close',\n    level: --state.level\n  });\n  return true;\n};","// heading (#, ##, ...)\n'use strict';\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch,\n      level,\n      tmp,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos >= max) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23\n  /* # */\n  || pos >= max) {\n    return false;\n  } // count heading level\n\n\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n\n  while (ch === 0x23\n  /* # */\n  && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || pos < max && ch !== 0x20\n  /* space */\n  ) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  } // Let's cut tails like '    ###  ' from the end of string\n\n\n  max = state.skipCharsBack(max, 0x20, pos); // space\n\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n\n  if (tmp > pos && state.src.charCodeAt(tmp - 1) === 0x20\n  /* space */\n  ) {\n      max = tmp;\n    }\n\n  state.line = startLine + 1;\n  state.tokens.push({\n    type: 'heading_open',\n    hLevel: level,\n    lines: [startLine, state.line],\n    level: state.level\n  }); // only if header is not empty\n\n  if (pos < max) {\n    state.tokens.push({\n      type: 'inline',\n      content: state.src.slice(pos, max).trim(),\n      level: state.level + 1,\n      lines: [startLine, state.line],\n      children: []\n    });\n  }\n\n  state.tokens.push({\n    type: 'heading_close',\n    hLevel: level,\n    level: state.level\n  });\n  return true;\n};","// lheading (---, ===)\n'use strict';\n\nmodule.exports = function lheading(state, startLine, endLine\n/*, silent*/\n) {\n  var marker,\n      pos,\n      max,\n      next = startLine + 1;\n\n  if (next >= endLine) {\n    return false;\n  }\n\n  if (state.tShift[next] < state.blkIndent) {\n    return false;\n  } // Scan next line\n\n\n  if (state.tShift[next] - state.blkIndent > 3) {\n    return false;\n  }\n\n  pos = state.bMarks[next] + state.tShift[next];\n  max = state.eMarks[next];\n\n  if (pos >= max) {\n    return false;\n  }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x2D\n  /* - */\n  && marker !== 0x3D\n  /* = */\n  ) {\n      return false;\n    }\n\n  pos = state.skipChars(pos, marker);\n  pos = state.skipSpaces(pos);\n\n  if (pos < max) {\n    return false;\n  }\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  state.line = next + 1;\n  state.tokens.push({\n    type: 'heading_open',\n    hLevel: marker === 0x3D\n    /* = */\n    ? 1 : 2,\n    lines: [startLine, state.line],\n    level: state.level\n  });\n  state.tokens.push({\n    type: 'inline',\n    content: state.src.slice(pos, state.eMarks[startLine]).trim(),\n    level: state.level + 1,\n    lines: [startLine, state.line - 1],\n    children: []\n  });\n  state.tokens.push({\n    type: 'heading_close',\n    hLevel: marker === 0x3D\n    /* = */\n    ? 1 : 2,\n    level: state.level\n  });\n  return true;\n};","// HTML block\n'use strict';\n\nvar block_names = require('../common/html_blocks');\n\nvar HTML_TAG_OPEN_RE = /^<([a-zA-Z]{1,15})[\\s\\/>]/;\nvar HTML_TAG_CLOSE_RE = /^<\\/([a-zA-Z]{1,15})[\\s>]/;\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n\n  return lc >= 0x61\n  /* a */\n  && lc <= 0x7a\n  /* z */\n  ;\n}\n\nmodule.exports = function htmlblock(state, startLine, endLine, silent) {\n  var ch,\n      match,\n      nextLine,\n      pos = state.bMarks[startLine],\n      max = state.eMarks[startLine],\n      shift = state.tShift[startLine];\n  pos += shift;\n\n  if (!state.options.html) {\n    return false;\n  }\n\n  if (shift > 3 || pos + 2 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  ) {\n      return false;\n    }\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch === 0x21\n  /* ! */\n  || ch === 0x3F\n  /* ? */\n  ) {\n      // Directive start / comment start / processing instruction start\n      if (silent) {\n        return true;\n      }\n    } else if (ch === 0x2F\n  /* / */\n  || isLetter(ch)) {\n    // Probably start or end of tag\n    if (ch === 0x2F\n    /* \\ */\n    ) {\n        // closing tag\n        match = state.src.slice(pos, max).match(HTML_TAG_CLOSE_RE);\n\n        if (!match) {\n          return false;\n        }\n      } else {\n      // opening tag\n      match = state.src.slice(pos, max).match(HTML_TAG_OPEN_RE);\n\n      if (!match) {\n        return false;\n      }\n    } // Make sure tag name is valid\n\n\n    if (block_names[match[1].toLowerCase()] !== true) {\n      return false;\n    }\n\n    if (silent) {\n      return true;\n    }\n  } else {\n    return false;\n  } // If we are here - we detected HTML block.\n  // Let's roll down till empty line (block end).\n\n\n  nextLine = startLine + 1;\n\n  while (nextLine < state.lineMax && !state.isEmpty(nextLine)) {\n    nextLine++;\n  }\n\n  state.line = nextLine;\n  state.tokens.push({\n    type: 'htmlblock',\n    level: state.level,\n    lines: [startLine, state.line],\n    content: state.getLines(startLine, nextLine, 0, true)\n  });\n  return true;\n};","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n'use strict';\n\nvar html_blocks = {};\n['article', 'aside', 'button', 'blockquote', 'body', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'script', 'section', 'style', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'tr', 'thead', 'ul', 'video'].forEach(function (name) {\n  html_blocks[name] = true;\n});\nmodule.exports = html_blocks;","// GFM table, non-standard\n'use strict';\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n  return state.src.substr(pos, max - pos);\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, rows, cell, aligns, t, tableLines, tbodyLines; // should have at least three lines\n\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.tShift[nextLine] < state.blkIndent) {\n    return false;\n  } // first character of the second line should be '|' or '-'\n\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x7C\n  /* | */\n  && ch !== 0x2D\n  /* - */\n  && ch !== 0x3A\n  /* : */\n  ) {\n      return false;\n    }\n\n  lineText = getLine(state, startLine + 1);\n\n  if (!/^[-:| ]+$/.test(lineText)) {\n    return false;\n  }\n\n  rows = lineText.split('|');\n\n  if (rows <= 2) {\n    return false;\n  }\n\n  aligns = [];\n\n  for (i = 0; i < rows.length; i++) {\n    t = rows[i].trim();\n\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === rows.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n\n    if (t.charCodeAt(t.length - 1) === 0x3A\n    /* : */\n    ) {\n        aligns.push(t.charCodeAt(0) === 0x3A\n        /* : */\n        ? 'center' : 'right');\n      } else if (t.charCodeAt(0) === 0x3A\n    /* : */\n    ) {\n        aligns.push('left');\n      } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n\n  rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n\n  if (aligns.length !== rows.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  state.tokens.push({\n    type: 'table_open',\n    lines: tableLines = [startLine, 0],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'thead_open',\n    lines: [startLine, startLine + 1],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'tr_open',\n    lines: [startLine, startLine + 1],\n    level: state.level++\n  });\n\n  for (i = 0; i < rows.length; i++) {\n    state.tokens.push({\n      type: 'th_open',\n      align: aligns[i],\n      lines: [startLine, startLine + 1],\n      level: state.level++\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: rows[i].trim(),\n      lines: [startLine, startLine + 1],\n      level: state.level,\n      children: []\n    });\n    state.tokens.push({\n      type: 'th_close',\n      level: --state.level\n    });\n  }\n\n  state.tokens.push({\n    type: 'tr_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'thead_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'tbody_open',\n    lines: tbodyLines = [startLine + 2, 0],\n    level: state.level++\n  });\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n\n    if (lineText.indexOf('|') === -1) {\n      break;\n    }\n\n    rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n    state.tokens.push({\n      type: 'tr_open',\n      level: state.level++\n    });\n\n    for (i = 0; i < rows.length; i++) {\n      state.tokens.push({\n        type: 'td_open',\n        align: aligns[i],\n        level: state.level++\n      }); // 0x7c === '|'\n\n      cell = rows[i].substring(rows[i].charCodeAt(0) === 0x7c ? 1 : 0, rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length).trim();\n      state.tokens.push({\n        type: 'inline',\n        content: cell,\n        level: state.level,\n        children: []\n      });\n      state.tokens.push({\n        type: 'td_close',\n        level: --state.level\n      });\n    }\n\n    state.tokens.push({\n      type: 'tr_close',\n      level: --state.level\n    });\n  }\n\n  state.tokens.push({\n    type: 'tbody_close',\n    level: --state.level\n  });\n  state.tokens.push({\n    type: 'table_close',\n    level: --state.level\n  });\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};","// Definition lists\n'use strict'; // Search `[:~][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\n\nfunction skipMarker(state, line) {\n  var pos,\n      marker,\n      start = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  if (start >= max) {\n    return -1;\n  } // Check bullet\n\n\n  marker = state.src.charCodeAt(start++);\n\n  if (marker !== 0x7E\n  /* ~ */\n  && marker !== 0x3A\n  /* : */\n  ) {\n      return -1;\n    }\n\n  pos = state.skipSpaces(start); // require space after \":\"\n\n  if (start === pos) {\n    return -1;\n  } // no empty definitions, e.g. \"  : \"\n\n\n  if (pos >= max) {\n    return -1;\n  }\n\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i,\n      l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].tight = true;\n      state.tokens[i].tight = true;\n      i += 2;\n    }\n  }\n}\n\nmodule.exports = function deflist(state, startLine, endLine, silent) {\n  var contentStart, ddLine, dtLine, itemLines, listLines, listTokIdx, nextLine, oldIndent, oldDDIndent, oldParentType, oldTShift, oldTight, prevEmptyEnd, tight;\n\n  if (silent) {\n    // quirk: validation mode validates a dd block only, not a whole deflist\n    if (state.ddIndent < 0) {\n      return false;\n    }\n\n    return skipMarker(state, startLine) >= 0;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.isEmpty(nextLine)) {\n    if (++nextLine > endLine) {\n      return false;\n    }\n  }\n\n  if (state.tShift[nextLine] < state.blkIndent) {\n    return false;\n  }\n\n  contentStart = skipMarker(state, nextLine);\n\n  if (contentStart < 0) {\n    return false;\n  }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  } // Start list\n\n\n  listTokIdx = state.tokens.length;\n  state.tokens.push({\n    type: 'dl_open',\n    lines: listLines = [startLine, 0],\n    level: state.level++\n  }); //\n  // Iterate list items\n  //\n\n  dtLine = startLine;\n  ddLine = nextLine; // One definition list can contain multiple DTs,\n  // and one DT can be followed by multiple DDs.\n  //\n  // Thus, there is two loops here, and label is\n  // needed to break out of the second one\n  //\n\n  /*eslint no-labels:0,block-scoped-var:0*/\n\n  OUTER: for (;;) {\n    tight = true;\n    prevEmptyEnd = false;\n    state.tokens.push({\n      type: 'dt_open',\n      lines: [dtLine, dtLine],\n      level: state.level++\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim(),\n      level: state.level + 1,\n      lines: [dtLine, dtLine],\n      children: []\n    });\n    state.tokens.push({\n      type: 'dt_close',\n      level: --state.level\n    });\n\n    for (;;) {\n      state.tokens.push({\n        type: 'dd_open',\n        lines: itemLines = [nextLine, 0],\n        level: state.level++\n      });\n      oldTight = state.tight;\n      oldDDIndent = state.ddIndent;\n      oldIndent = state.blkIndent;\n      oldTShift = state.tShift[ddLine];\n      oldParentType = state.parentType;\n      state.blkIndent = state.ddIndent = state.tShift[ddLine] + 2;\n      state.tShift[ddLine] = contentStart - state.bMarks[ddLine];\n      state.tight = true;\n      state.parentType = 'deflist';\n      state.parser.tokenize(state, ddLine, endLine, true); // If any of list item is tight, mark list as tight\n\n      if (!state.tight || prevEmptyEnd) {\n        tight = false;\n      } // Item become loose if finish with empty line,\n      // but we should filter last element, because it means list finish\n\n\n      prevEmptyEnd = state.line - ddLine > 1 && state.isEmpty(state.line - 1);\n      state.tShift[ddLine] = oldTShift;\n      state.tight = oldTight;\n      state.parentType = oldParentType;\n      state.blkIndent = oldIndent;\n      state.ddIndent = oldDDIndent;\n      state.tokens.push({\n        type: 'dd_close',\n        level: --state.level\n      });\n      itemLines[1] = nextLine = state.line;\n\n      if (nextLine >= endLine) {\n        break OUTER;\n      }\n\n      if (state.tShift[nextLine] < state.blkIndent) {\n        break OUTER;\n      }\n\n      contentStart = skipMarker(state, nextLine);\n\n      if (contentStart < 0) {\n        break;\n      }\n\n      ddLine = nextLine; // go to the next loop iteration:\n      // insert DD tag and repeat checking\n    }\n\n    if (nextLine >= endLine) {\n      break;\n    }\n\n    dtLine = nextLine;\n\n    if (state.isEmpty(dtLine)) {\n      break;\n    }\n\n    if (state.tShift[dtLine] < state.blkIndent) {\n      break;\n    }\n\n    ddLine = dtLine + 1;\n\n    if (ddLine >= endLine) {\n      break;\n    }\n\n    if (state.isEmpty(ddLine)) {\n      ddLine++;\n    }\n\n    if (ddLine >= endLine) {\n      break;\n    }\n\n    if (state.tShift[ddLine] < state.blkIndent) {\n      break;\n    }\n\n    contentStart = skipMarker(state, ddLine);\n\n    if (contentStart < 0) {\n      break;\n    } // go to the next loop iteration:\n    // insert DT and DD tags and repeat checking\n\n  } // Finilize list\n\n\n  state.tokens.push({\n    type: 'dl_close',\n    level: --state.level\n  });\n  listLines[1] = nextLine;\n  state.line = nextLine; // mark paragraphs tight if needed\n\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};","// Paragraph\n'use strict';\n\nmodule.exports = function paragraph(state, startLine\n/*, endLine*/\n) {\n  var endLine,\n      content,\n      terminate,\n      i,\n      l,\n      nextLine = startLine + 1,\n      terminatorRules;\n  endLine = state.lineMax; // jump line-by-line until empty one or EOF\n\n  if (nextLine < endLine && !state.isEmpty(nextLine)) {\n    terminatorRules = state.parser.ruler.getRules('paragraph');\n\n    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n      // this would be a code block normally, but after paragraph\n      // it's considered a lazy continuation regardless of what's there\n      if (state.tShift[nextLine] - state.blkIndent > 3) {\n        continue;\n      } // Some tags can terminate paragraph without empty line.\n\n\n      terminate = false;\n\n      for (i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true;\n          break;\n        }\n      }\n\n      if (terminate) {\n        break;\n      }\n    }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  state.line = nextLine;\n\n  if (content.length) {\n    state.tokens.push({\n      type: 'paragraph_open',\n      tight: false,\n      lines: [startLine, state.line],\n      level: state.level\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: content,\n      level: state.level + 1,\n      lines: [startLine, state.line],\n      children: []\n    });\n    state.tokens.push({\n      type: 'paragraph_close',\n      tight: false,\n      level: state.level\n    });\n  }\n\n  return true;\n};","'use strict';\n/**\n * Local dependencies\n */\n\nvar Ruler = require('./ruler');\n\nvar StateInline = require('./rules_inline/state_inline');\n\nvar utils = require('./common/utils');\n/**\n * Inline Parser `rules`\n */\n\n\nvar _rules = [['text', require('./rules_inline/text')], ['newline', require('./rules_inline/newline')], ['escape', require('./rules_inline/escape')], ['backticks', require('./rules_inline/backticks')], ['del', require('./rules_inline/del')], ['ins', require('./rules_inline/ins')], ['mark', require('./rules_inline/mark')], ['emphasis', require('./rules_inline/emphasis')], ['sub', require('./rules_inline/sub')], ['sup', require('./rules_inline/sup')], ['links', require('./rules_inline/links')], ['footnote_inline', require('./rules_inline/footnote_inline')], ['footnote_ref', require('./rules_inline/footnote_ref')], ['autolink', require('./rules_inline/autolink')], ['htmltag', require('./rules_inline/htmltag')], ['entity', require('./rules_inline/entity')]];\n/**\n * Inline Parser class. Note that link validation is stricter\n * in Remarkable than what is specified by CommonMark. If you\n * want to change this you can use a custom validator.\n *\n * @api private\n */\n\nfunction ParserInline() {\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  } // Can be overridden with a custom validator\n\n\n  this.validateLink = validateLink;\n}\n/**\n * Skip a single token by running all rules in validation mode.\n * Returns `true` if any rule reports success.\n *\n * @param  {Object} `state`\n * @api privage\n */\n\n\nParserInline.prototype.skipToken = function (state) {\n  var rules = this.ruler.getRules('');\n  var len = rules.length;\n  var pos = state.pos;\n  var i, cached_pos;\n\n  if ((cached_pos = state.cacheGet(pos)) > 0) {\n    state.pos = cached_pos;\n    return;\n  }\n\n  for (i = 0; i < len; i++) {\n    if (rules[i](state, true)) {\n      state.cacheSet(pos, state.pos);\n      return;\n    }\n  }\n\n  state.pos++;\n  state.cacheSet(pos, state.pos);\n};\n/**\n * Generate tokens for the given input range.\n *\n * @param  {Object} `state`\n * @api private\n */\n\n\nParserInline.prototype.tokenize = function (state) {\n  var rules = this.ruler.getRules('');\n  var len = rules.length;\n  var end = state.posMax;\n  var ok, i;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, the rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, false);\n\n      if (ok) {\n        break;\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) {\n        break;\n      }\n\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n/**\n * Parse the given input string.\n *\n * @param  {String} `str`\n * @param  {Object} `options`\n * @param  {Object} `env`\n * @param  {Array} `outTokens`\n * @api private\n */\n\n\nParserInline.prototype.parse = function (str, options, env, outTokens) {\n  var state = new StateInline(str, this, options, env, outTokens);\n  this.tokenize(state);\n};\n/**\n * Validate the given `url` by checking for bad protocols.\n *\n * @param  {String} `url`\n * @return {Boolean}\n */\n\n\nfunction validateLink(url) {\n  var BAD_PROTOCOLS = ['vbscript', 'javascript', 'file', 'data'];\n  var str = url.trim().toLowerCase(); // Care about digital entities \"javascript&#x3A;alert(1)\"\n\n  str = utils.replaceEntities(str);\n\n  if (str.indexOf(':') !== -1 && BAD_PROTOCOLS.indexOf(str.split(':')[0]) !== -1) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Expose `ParserInline`\n */\n\n\nmodule.exports = ParserInline;","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n'use strict'; // Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A\n    /* \\n */\n    :\n    case 0x5C\n    /* \\ */\n    :\n    case 0x60\n    /* ` */\n    :\n    case 0x2A\n    /* * */\n    :\n    case 0x5F\n    /* _ */\n    :\n    case 0x5E\n    /* ^ */\n    :\n    case 0x5B\n    /* [ */\n    :\n    case 0x5D\n    /* ] */\n    :\n    case 0x21\n    /* ! */\n    :\n    case 0x26\n    /* & */\n    :\n    case 0x3C\n    /* < */\n    :\n    case 0x3E\n    /* > */\n    :\n    case 0x7B\n    /* { */\n    :\n    case 0x7D\n    /* } */\n    :\n    case 0x24\n    /* $ */\n    :\n    case 0x25\n    /* % */\n    :\n    case 0x40\n    /* @ */\n    :\n    case 0x7E\n    /* ~ */\n    :\n    case 0x2B\n    /* + */\n    :\n    case 0x3D\n    /* = */\n    :\n    case 0x3A\n    /* : */\n    :\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) {\n    return false;\n  }\n\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n\n  state.pos = pos;\n  return true;\n};","// Proceess '\\n'\n'use strict';\n\nmodule.exports = function newline(state, silent) {\n  var pmax,\n      max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A\n  /* \\n */\n  ) {\n      return false;\n    }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax; // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Strip out all trailing spaces on this line.\n        for (var i = pmax - 2; i >= 0; i--) {\n          if (state.pending.charCodeAt(i) !== 0x20) {\n            state.pending = state.pending.substring(0, i + 1);\n            break;\n          }\n        }\n\n        state.push({\n          type: 'hardbreak',\n          level: state.level\n        });\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push({\n          type: 'softbreak',\n          level: state.level\n        });\n      }\n    } else {\n      state.push({\n        type: 'softbreak',\n        level: state.level\n      });\n    }\n  }\n\n  pos++; // skip heading spaces for next line\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x20) {\n    pos++;\n  }\n\n  state.pos = pos;\n  return true;\n};","// Proceess escaped chars and hardbreaks\n'use strict';\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\n\nmodule.exports = function escape(state, silent) {\n  var ch,\n      pos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C\n  /* \\ */\n  ) {\n      return false;\n    }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) {\n        state.pending += state.src[pos];\n      }\n\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push({\n          type: 'hardbreak',\n          level: state.level\n        });\n      }\n\n      pos++; // skip leading whitespaces from next line\n\n      while (pos < max && state.src.charCodeAt(pos) === 0x20) {\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) {\n    state.pending += '\\\\';\n  }\n\n  state.pos++;\n  return true;\n};","// Parse backticks\n'use strict';\n\nmodule.exports = function backticks(state, silent) {\n  var start,\n      max,\n      marker,\n      matchStart,\n      matchEnd,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60\n  /* ` */\n  ) {\n      return false;\n    }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60\n  /* ` */\n  ) {\n    pos++;\n  }\n\n  marker = state.src.slice(start, pos);\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60\n    /* ` */\n    ) {\n      matchEnd++;\n    }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        state.push({\n          type: 'code',\n          content: state.src.slice(pos, matchStart).replace(/[ \\n]+/g, ' ').trim(),\n          block: false,\n          level: state.level\n        });\n      }\n\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) {\n    state.pending += marker;\n  }\n\n  state.pos += marker.length;\n  return true;\n};","// Process ~~deleted text~~\n'use strict';\n\nmodule.exports = function del(state, silent) {\n  var found,\n      pos,\n      stack,\n      max = state.posMax,\n      start = state.pos,\n      lastChar,\n      nextChar;\n\n  if (state.src.charCodeAt(start) !== 0x7E\n  /* ~ */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  if (start + 4 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start + 1) !== 0x7E\n  /* ~ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;\n  nextChar = state.src.charCodeAt(start + 2);\n\n  if (lastChar === 0x7E\n  /* ~ */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x7E\n  /* ~ */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x20 || nextChar === 0x0A) {\n    return false;\n  }\n\n  pos = start + 2;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x7E\n  /* ~ */\n  ) {\n    pos++;\n  }\n\n  if (pos > start + 3) {\n    // sequence of 4+ markers taking as literal, same as in a emphasis\n    state.pos += pos - start;\n\n    if (!silent) {\n      state.pending += state.src.slice(start, pos);\n    }\n\n    return true;\n  }\n\n  state.pos = start + 2;\n  stack = 1;\n\n  while (state.pos + 1 < max) {\n    if (state.src.charCodeAt(state.pos) === 0x7E\n    /* ~ */\n    ) {\n        if (state.src.charCodeAt(state.pos + 1) === 0x7E\n        /* ~ */\n        ) {\n            lastChar = state.src.charCodeAt(state.pos - 1);\n            nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;\n\n            if (nextChar !== 0x7E\n            /* ~ */\n            && lastChar !== 0x7E\n            /* ~ */\n            ) {\n                if (lastChar !== 0x20 && lastChar !== 0x0A) {\n                  // closing '~~'\n                  stack--;\n                } else if (nextChar !== 0x20 && nextChar !== 0x0A) {\n                  // opening '~~'\n                  stack++;\n                } // else {\n                //  // standalone ' ~~ ' indented with spaces\n                // }\n\n\n                if (stack <= 0) {\n                  found = true;\n                  break;\n                }\n              }\n          }\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found) {\n    // parser failed to find ending tag, so it's not valid emphasis\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + 2;\n\n  if (!silent) {\n    state.push({\n      type: 'del_open',\n      level: state.level++\n    });\n    state.parser.tokenize(state);\n    state.push({\n      type: 'del_close',\n      level: --state.level\n    });\n  }\n\n  state.pos = state.posMax + 2;\n  state.posMax = max;\n  return true;\n};","// Process ++inserted text++\n'use strict';\n\nmodule.exports = function ins(state, silent) {\n  var found,\n      pos,\n      stack,\n      max = state.posMax,\n      start = state.pos,\n      lastChar,\n      nextChar;\n\n  if (state.src.charCodeAt(start) !== 0x2B\n  /* + */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  if (start + 4 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start + 1) !== 0x2B\n  /* + */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;\n  nextChar = state.src.charCodeAt(start + 2);\n\n  if (lastChar === 0x2B\n  /* + */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x2B\n  /* + */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x20 || nextChar === 0x0A) {\n    return false;\n  }\n\n  pos = start + 2;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x2B\n  /* + */\n  ) {\n    pos++;\n  }\n\n  if (pos !== start + 2) {\n    // sequence of 3+ markers taking as literal, same as in a emphasis\n    state.pos += pos - start;\n\n    if (!silent) {\n      state.pending += state.src.slice(start, pos);\n    }\n\n    return true;\n  }\n\n  state.pos = start + 2;\n  stack = 1;\n\n  while (state.pos + 1 < max) {\n    if (state.src.charCodeAt(state.pos) === 0x2B\n    /* + */\n    ) {\n        if (state.src.charCodeAt(state.pos + 1) === 0x2B\n        /* + */\n        ) {\n            lastChar = state.src.charCodeAt(state.pos - 1);\n            nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;\n\n            if (nextChar !== 0x2B\n            /* + */\n            && lastChar !== 0x2B\n            /* + */\n            ) {\n                if (lastChar !== 0x20 && lastChar !== 0x0A) {\n                  // closing '++'\n                  stack--;\n                } else if (nextChar !== 0x20 && nextChar !== 0x0A) {\n                  // opening '++'\n                  stack++;\n                } // else {\n                //  // standalone ' ++ ' indented with spaces\n                // }\n\n\n                if (stack <= 0) {\n                  found = true;\n                  break;\n                }\n              }\n          }\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found) {\n    // parser failed to find ending tag, so it's not valid emphasis\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + 2;\n\n  if (!silent) {\n    state.push({\n      type: 'ins_open',\n      level: state.level++\n    });\n    state.parser.tokenize(state);\n    state.push({\n      type: 'ins_close',\n      level: --state.level\n    });\n  }\n\n  state.pos = state.posMax + 2;\n  state.posMax = max;\n  return true;\n};","// Process ==highlighted text==\n'use strict';\n\nmodule.exports = function del(state, silent) {\n  var found,\n      pos,\n      stack,\n      max = state.posMax,\n      start = state.pos,\n      lastChar,\n      nextChar;\n\n  if (state.src.charCodeAt(start) !== 0x3D\n  /* = */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  if (start + 4 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start + 1) !== 0x3D\n  /* = */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;\n  nextChar = state.src.charCodeAt(start + 2);\n\n  if (lastChar === 0x3D\n  /* = */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x3D\n  /* = */\n  ) {\n      return false;\n    }\n\n  if (nextChar === 0x20 || nextChar === 0x0A) {\n    return false;\n  }\n\n  pos = start + 2;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x3D\n  /* = */\n  ) {\n    pos++;\n  }\n\n  if (pos !== start + 2) {\n    // sequence of 3+ markers taking as literal, same as in a emphasis\n    state.pos += pos - start;\n\n    if (!silent) {\n      state.pending += state.src.slice(start, pos);\n    }\n\n    return true;\n  }\n\n  state.pos = start + 2;\n  stack = 1;\n\n  while (state.pos + 1 < max) {\n    if (state.src.charCodeAt(state.pos) === 0x3D\n    /* = */\n    ) {\n        if (state.src.charCodeAt(state.pos + 1) === 0x3D\n        /* = */\n        ) {\n            lastChar = state.src.charCodeAt(state.pos - 1);\n            nextChar = state.pos + 2 < max ? state.src.charCodeAt(state.pos + 2) : -1;\n\n            if (nextChar !== 0x3D\n            /* = */\n            && lastChar !== 0x3D\n            /* = */\n            ) {\n                if (lastChar !== 0x20 && lastChar !== 0x0A) {\n                  // closing '=='\n                  stack--;\n                } else if (nextChar !== 0x20 && nextChar !== 0x0A) {\n                  // opening '=='\n                  stack++;\n                } // else {\n                //  // standalone ' == ' indented with spaces\n                // }\n\n\n                if (stack <= 0) {\n                  found = true;\n                  break;\n                }\n              }\n          }\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found) {\n    // parser failed to find ending tag, so it's not valid emphasis\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + 2;\n\n  if (!silent) {\n    state.push({\n      type: 'mark_open',\n      level: state.level++\n    });\n    state.parser.tokenize(state);\n    state.push({\n      type: 'mark_close',\n      level: --state.level\n    });\n  }\n\n  state.pos = state.posMax + 2;\n  state.posMax = max;\n  return true;\n};","// Process *this* and _that_\n'use strict';\n\nfunction isAlphaNum(code) {\n  return code >= 0x30\n  /* 0 */\n  && code <= 0x39\n  /* 9 */\n  || code >= 0x41\n  /* A */\n  && code <= 0x5A\n  /* Z */\n  || code >= 0x61\n  /* a */\n  && code <= 0x7A\n  /* z */\n  ;\n} // parse sequence of emphasis markers,\n// \"start\" should point at a valid marker\n\n\nfunction scanDelims(state, start) {\n  var pos = start,\n      lastChar,\n      nextChar,\n      count,\n      can_open = true,\n      can_close = true,\n      max = state.posMax,\n      marker = state.src.charCodeAt(start);\n  lastChar = start > 0 ? state.src.charCodeAt(start - 1) : -1;\n\n  while (pos < max && state.src.charCodeAt(pos) === marker) {\n    pos++;\n  }\n\n  if (pos >= max) {\n    can_open = false;\n  }\n\n  count = pos - start;\n\n  if (count >= 4) {\n    // sequence of four or more unescaped markers can't start/end an emphasis\n    can_open = can_close = false;\n  } else {\n    nextChar = pos < max ? state.src.charCodeAt(pos) : -1; // check whitespace conditions\n\n    if (nextChar === 0x20 || nextChar === 0x0A) {\n      can_open = false;\n    }\n\n    if (lastChar === 0x20 || lastChar === 0x0A) {\n      can_close = false;\n    }\n\n    if (marker === 0x5F\n    /* _ */\n    ) {\n        // check if we aren't inside the word\n        if (isAlphaNum(lastChar)) {\n          can_open = false;\n        }\n\n        if (isAlphaNum(nextChar)) {\n          can_close = false;\n        }\n      }\n  }\n\n  return {\n    can_open: can_open,\n    can_close: can_close,\n    delims: count\n  };\n}\n\nmodule.exports = function emphasis(state, silent) {\n  var startCount,\n      count,\n      found,\n      oldCount,\n      newCount,\n      stack,\n      res,\n      max = state.posMax,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (marker !== 0x5F\n  /* _ */\n  && marker !== 0x2A\n  /* * */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  res = scanDelims(state, start);\n  startCount = res.delims;\n\n  if (!res.can_open) {\n    state.pos += startCount;\n\n    if (!silent) {\n      state.pending += state.src.slice(start, state.pos);\n    }\n\n    return true;\n  }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  state.pos = start + startCount;\n  stack = [startCount];\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === marker) {\n      res = scanDelims(state, state.pos);\n      count = res.delims;\n\n      if (res.can_close) {\n        oldCount = stack.pop();\n        newCount = count;\n\n        while (oldCount !== newCount) {\n          if (newCount < oldCount) {\n            stack.push(oldCount - newCount);\n            break;\n          } // assert(newCount > oldCount)\n\n\n          newCount -= oldCount;\n\n          if (stack.length === 0) {\n            break;\n          }\n\n          state.pos += oldCount;\n          oldCount = stack.pop();\n        }\n\n        if (stack.length === 0) {\n          startCount = oldCount;\n          found = true;\n          break;\n        }\n\n        state.pos += count;\n        continue;\n      }\n\n      if (res.can_open) {\n        stack.push(count);\n      }\n\n      state.pos += count;\n      continue;\n    }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found) {\n    // parser failed to find ending tag, so it's not valid emphasis\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + startCount;\n\n  if (!silent) {\n    if (startCount === 2 || startCount === 3) {\n      state.push({\n        type: 'strong_open',\n        level: state.level++\n      });\n    }\n\n    if (startCount === 1 || startCount === 3) {\n      state.push({\n        type: 'em_open',\n        level: state.level++\n      });\n    }\n\n    state.parser.tokenize(state);\n\n    if (startCount === 1 || startCount === 3) {\n      state.push({\n        type: 'em_close',\n        level: --state.level\n      });\n    }\n\n    if (startCount === 2 || startCount === 3) {\n      state.push({\n        type: 'strong_close',\n        level: --state.level\n      });\n    }\n  }\n\n  state.pos = state.posMax + startCount;\n  state.posMax = max;\n  return true;\n};","// Process ~subscript~\n'use strict'; // same as UNESCAPE_MD_RE plus a space\n\nvar UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\n\nmodule.exports = function sub(state, silent) {\n  var found,\n      content,\n      max = state.posMax,\n      start = state.pos;\n\n  if (state.src.charCodeAt(start) !== 0x7E\n  /* ~ */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  if (start + 2 >= max) {\n    return false;\n  }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  state.pos = start + 1;\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x7E\n    /* ~ */\n    ) {\n        found = true;\n        break;\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n    return false;\n  }\n\n  content = state.src.slice(start + 1, state.pos); // don't allow unescaped spaces/newlines inside\n\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  if (!silent) {\n    state.push({\n      type: 'sub',\n      level: state.level,\n      content: content.replace(UNESCAPE_RE, '$1')\n    });\n  }\n\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n  return true;\n};","// Process ^superscript^\n'use strict'; // same as UNESCAPE_MD_RE plus a space\n\nvar UNESCAPE_RE = /\\\\([ \\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\n\nmodule.exports = function sup(state, silent) {\n  var found,\n      content,\n      max = state.posMax,\n      start = state.pos;\n\n  if (state.src.charCodeAt(start) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (silent) {\n    return false;\n  } // don't run any pairs in validation mode\n\n\n  if (start + 2 >= max) {\n    return false;\n  }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  state.pos = start + 1;\n\n  while (state.pos < max) {\n    if (state.src.charCodeAt(state.pos) === 0x5E\n    /* ^ */\n    ) {\n        found = true;\n        break;\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (!found || start + 1 === state.pos) {\n    state.pos = start;\n    return false;\n  }\n\n  content = state.src.slice(start + 1, state.pos); // don't allow unescaped spaces/newlines inside\n\n  if (content.match(/(^|[^\\\\])(\\\\\\\\)*\\s/)) {\n    state.pos = start;\n    return false;\n  } // found!\n\n\n  state.posMax = state.pos;\n  state.pos = start + 1;\n\n  if (!silent) {\n    state.push({\n      type: 'sup',\n      level: state.level,\n      content: content.replace(UNESCAPE_RE, '$1')\n    });\n  }\n\n  state.pos = state.posMax + 1;\n  state.posMax = max;\n  return true;\n};","// Process [links](<to> \"stuff\")\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nvar parseLinkDestination = require('../helpers/parse_link_destination');\n\nvar parseLinkTitle = require('../helpers/parse_link_title');\n\nvar normalizeReference = require('../helpers/normalize_reference');\n\nmodule.exports = function links(state, silent) {\n  var labelStart,\n      labelEnd,\n      label,\n      href,\n      title,\n      pos,\n      ref,\n      code,\n      isImage = false,\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (marker === 0x21\n  /* ! */\n  ) {\n      isImage = true;\n      marker = state.src.charCodeAt(++start);\n    }\n\n  if (marker !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  labelStart = start + 1;\n  labelEnd = parseLinkLabel(state, start); // parser failed to find ']', so it's not a valid link\n\n  if (labelEnd < 0) {\n    return false;\n  }\n\n  pos = labelEnd + 1;\n\n  if (pos < max && state.src.charCodeAt(pos) === 0x28\n  /* ( */\n  ) {\n      //\n      // Inline link\n      //\n      // [link](  <href>  \"title\"  )\n      //        ^^ skipping these spaces\n      pos++;\n\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n\n        if (code !== 0x20 && code !== 0x0A) {\n          break;\n        }\n      }\n\n      if (pos >= max) {\n        return false;\n      } // [link](  <href>  \"title\"  )\n      //          ^^^^^^ parsing link destination\n\n\n      start = pos;\n\n      if (parseLinkDestination(state, pos)) {\n        href = state.linkContent;\n        pos = state.pos;\n      } else {\n        href = '';\n      } // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n\n\n      start = pos;\n\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n\n        if (code !== 0x20 && code !== 0x0A) {\n          break;\n        }\n      } // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n\n\n      if (pos < max && start !== pos && parseLinkTitle(state, pos)) {\n        title = state.linkContent;\n        pos = state.pos; // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n\n          if (code !== 0x20 && code !== 0x0A) {\n            break;\n          }\n        }\n      } else {\n        title = '';\n      }\n\n      if (pos >= max || state.src.charCodeAt(pos) !== 0x29\n      /* ) */\n      ) {\n          state.pos = oldPos;\n          return false;\n        }\n\n      pos++;\n    } else {\n    //\n    // Link reference\n    //\n    // do not allow nested reference links\n    if (state.linkLevel > 0) {\n      return false;\n    } // [foo]  [bar]\n    //      ^^ optional whitespace (can include newlines)\n\n\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n\n      if (code !== 0x20 && code !== 0x0A) {\n        break;\n      }\n    }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B\n    /* [ */\n    ) {\n        start = pos + 1;\n        pos = parseLinkLabel(state, pos);\n\n        if (pos >= 0) {\n          label = state.src.slice(start, pos++);\n        } else {\n          pos = start - 1;\n        }\n      } // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n\n\n    if (!label) {\n      if (typeof label === 'undefined') {\n        pos = labelEnd + 1;\n      }\n\n      label = state.src.slice(labelStart, labelEnd);\n    }\n\n    ref = state.env.references[normalizeReference(label)];\n\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n\n    href = ref.href;\n    title = ref.title;\n  } //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n\n\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    if (isImage) {\n      state.push({\n        type: 'image',\n        src: href,\n        title: title,\n        alt: state.src.substr(labelStart, labelEnd - labelStart),\n        level: state.level\n      });\n    } else {\n      state.push({\n        type: 'link_open',\n        href: href,\n        title: title,\n        level: state.level++\n      });\n      state.linkLevel++;\n      state.parser.tokenize(state);\n      state.linkLevel--;\n      state.push({\n        type: 'link_close',\n        level: --state.level\n      });\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};","// Process inline footnotes (^[...])\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nmodule.exports = function footnote_inline(state, silent) {\n  var labelStart,\n      labelEnd,\n      footnoteId,\n      oldLength,\n      max = state.posMax,\n      start = state.pos;\n\n  if (start + 2 >= max) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (state.src.charCodeAt(start + 1) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  labelStart = start + 2;\n  labelEnd = parseLinkLabel(state, start + 1); // parser failed to find ']', so it's not a valid note\n\n  if (labelEnd < 0) {\n    return false;\n  } // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n\n\n  if (!silent) {\n    if (!state.env.footnotes) {\n      state.env.footnotes = {};\n    }\n\n    if (!state.env.footnotes.list) {\n      state.env.footnotes.list = [];\n    }\n\n    footnoteId = state.env.footnotes.list.length;\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    state.push({\n      type: 'footnote_ref',\n      id: footnoteId,\n      level: state.level\n    });\n    state.linkLevel++;\n    oldLength = state.tokens.length;\n    state.parser.tokenize(state);\n    state.env.footnotes.list[footnoteId] = {\n      tokens: state.tokens.splice(oldLength)\n    };\n    state.linkLevel--;\n  }\n\n  state.pos = labelEnd + 1;\n  state.posMax = max;\n  return true;\n};","// Process footnote references ([^...])\n'use strict';\n\nmodule.exports = function footnote_ref(state, silent) {\n  var label,\n      pos,\n      footnoteId,\n      footnoteSubId,\n      max = state.posMax,\n      start = state.pos; // should be at least 4 chars - \"[^x]\"\n\n  if (start + 3 > max) {\n    return false;\n  }\n\n  if (!state.env.footnotes || !state.env.footnotes.refs) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(start) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  if (state.src.charCodeAt(start + 1) !== 0x5E\n  /* ^ */\n  ) {\n      return false;\n    }\n\n  if (state.level >= state.options.maxNesting) {\n    return false;\n  }\n\n  for (pos = start + 2; pos < max; pos++) {\n    if (state.src.charCodeAt(pos) === 0x20) {\n      return false;\n    }\n\n    if (state.src.charCodeAt(pos) === 0x0A) {\n      return false;\n    }\n\n    if (state.src.charCodeAt(pos) === 0x5D\n    /* ] */\n    ) {\n        break;\n      }\n  }\n\n  if (pos === start + 2) {\n    return false;\n  } // no empty footnote labels\n\n\n  if (pos >= max) {\n    return false;\n  }\n\n  pos++;\n  label = state.src.slice(start + 2, pos - 1);\n\n  if (typeof state.env.footnotes.refs[':' + label] === 'undefined') {\n    return false;\n  }\n\n  if (!silent) {\n    if (!state.env.footnotes.list) {\n      state.env.footnotes.list = [];\n    }\n\n    if (state.env.footnotes.refs[':' + label] < 0) {\n      footnoteId = state.env.footnotes.list.length;\n      state.env.footnotes.list[footnoteId] = {\n        label: label,\n        count: 0\n      };\n      state.env.footnotes.refs[':' + label] = footnoteId;\n    } else {\n      footnoteId = state.env.footnotes.refs[':' + label];\n    }\n\n    footnoteSubId = state.env.footnotes.list[footnoteId].count;\n    state.env.footnotes.list[footnoteId].count++;\n    state.push({\n      type: 'footnote_ref',\n      id: footnoteId,\n      subId: footnoteSubId,\n      level: state.level\n    });\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};","// Process autolinks '<protocol:...>'\n'use strict';\n\nvar url_schemas = require('../common/url_schemas');\n\nvar normalizeLink = require('../helpers/normalize_link');\n/*eslint max-len:0*/\n\n\nvar EMAIL_RE = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z.\\-]{1,25}):([^<>\\x00-\\x20]*)>/;\n\nmodule.exports = function autolink(state, silent) {\n  var tail,\n      linkMatch,\n      emailMatch,\n      url,\n      fullUrl,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  ) {\n      return false;\n    }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) {\n    return false;\n  }\n\n  linkMatch = tail.match(AUTOLINK_RE);\n\n  if (linkMatch) {\n    if (url_schemas.indexOf(linkMatch[1].toLowerCase()) < 0) {\n      return false;\n    }\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = normalizeLink(url);\n\n    if (!state.parser.validateLink(url)) {\n      return false;\n    }\n\n    if (!silent) {\n      state.push({\n        type: 'link_open',\n        href: fullUrl,\n        level: state.level\n      });\n      state.push({\n        type: 'text',\n        content: url,\n        level: state.level + 1\n      });\n      state.push({\n        type: 'link_close',\n        level: state.level\n      });\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  emailMatch = tail.match(EMAIL_RE);\n\n  if (emailMatch) {\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = normalizeLink('mailto:' + url);\n\n    if (!state.parser.validateLink(fullUrl)) {\n      return false;\n    }\n\n    if (!silent) {\n      state.push({\n        type: 'link_open',\n        href: fullUrl,\n        level: state.level\n      });\n      state.push({\n        type: 'text',\n        content: url,\n        level: state.level + 1\n      });\n      state.push({\n        type: 'link_close',\n        level: state.level\n      });\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};","// List of valid url schemas, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#autolinks\n'use strict';\n\nmodule.exports = ['coap', 'doi', 'javascript', 'aaa', 'aaas', 'about', 'acap', 'cap', 'cid', 'crid', 'data', 'dav', 'dict', 'dns', 'file', 'ftp', 'geo', 'go', 'gopher', 'h323', 'http', 'https', 'iax', 'icap', 'im', 'imap', 'info', 'ipp', 'iris', 'iris.beep', 'iris.xpc', 'iris.xpcs', 'iris.lwz', 'ldap', 'mailto', 'mid', 'msrp', 'msrps', 'mtqp', 'mupdate', 'news', 'nfs', 'ni', 'nih', 'nntp', 'opaquelocktoken', 'pop', 'pres', 'rtsp', 'service', 'session', 'shttp', 'sieve', 'sip', 'sips', 'sms', 'snmp', 'soap.beep', 'soap.beeps', 'tag', 'tel', 'telnet', 'tftp', 'thismessage', 'tn3270', 'tip', 'tv', 'urn', 'vemmi', 'ws', 'wss', 'xcon', 'xcon-userid', 'xmlrpc.beep', 'xmlrpc.beeps', 'xmpp', 'z39.50r', 'z39.50s', 'adiumxtra', 'afp', 'afs', 'aim', 'apt', 'attachment', 'aw', 'beshare', 'bitcoin', 'bolo', 'callto', 'chrome', 'chrome-extension', 'com-eventbrite-attendee', 'content', 'cvs', 'dlna-playsingle', 'dlna-playcontainer', 'dtn', 'dvb', 'ed2k', 'facetime', 'feed', 'finger', 'fish', 'gg', 'git', 'gizmoproject', 'gtalk', 'hcp', 'icon', 'ipn', 'irc', 'irc6', 'ircs', 'itms', 'jar', 'jms', 'keyparc', 'lastfm', 'ldaps', 'magnet', 'maps', 'market', 'message', 'mms', 'ms-help', 'msnim', 'mumble', 'mvn', 'notes', 'oid', 'palm', 'paparazzi', 'platform', 'proxy', 'psyc', 'query', 'res', 'resource', 'rmi', 'rsync', 'rtmp', 'secondlife', 'sftp', 'sgn', 'skype', 'smb', 'soldat', 'spotify', 'ssh', 'steam', 'svn', 'teamspeak', 'things', 'udp', 'unreal', 'ut2004', 'ventrilo', 'view-source', 'webcal', 'wtai', 'wyciwyg', 'xfire', 'xri', 'ymsgr'];","// Process html tags\n'use strict';\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n\n  return lc >= 0x61\n  /* a */\n  && lc <= 0x7a\n  /* z */\n  ;\n}\n\nmodule.exports = function htmltag(state, silent) {\n  var ch,\n      match,\n      max,\n      pos = state.pos;\n\n  if (!state.options.html) {\n    return false;\n  } // Check start\n\n\n  max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  || pos + 2 >= max) {\n    return false;\n  } // Quick fail on second char\n\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch !== 0x21\n  /* ! */\n  && ch !== 0x3F\n  /* ? */\n  && ch !== 0x2F\n  /* / */\n  && !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n\n  if (!match) {\n    return false;\n  }\n\n  if (!silent) {\n    state.push({\n      type: 'htmltag',\n      content: state.src.slice(pos, pos + match[0].length),\n      level: state.level\n    });\n  }\n\n  state.pos += match[0].length;\n  return true;\n};","// Regexps to match html elements\n'use strict';\n\nfunction replace(regex, options) {\n  regex = regex.source;\n  options = options || '';\n  return function self(name, val) {\n    if (!name) {\n      return new RegExp(regex, options);\n    }\n\n    val = val.source || val;\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nvar attr_name = /[a-zA-Z_:][a-zA-Z0-9:._-]*/;\nvar unquoted = /[^\"'=<>`\\x00-\\x20]+/;\nvar single_quoted = /'[^']*'/;\nvar double_quoted = /\"[^\"]*\"/;\n/*eslint no-spaced-func:0*/\n\nvar attr_value = replace(/(?:unquoted|single_quoted|double_quoted)/)('unquoted', unquoted)('single_quoted', single_quoted)('double_quoted', double_quoted)();\nvar attribute = replace(/(?:\\s+attr_name(?:\\s*=\\s*attr_value)?)/)('attr_name', attr_name)('attr_value', attr_value)();\nvar open_tag = replace(/<[A-Za-z][A-Za-z0-9]*attribute*\\s*\\/?>/)('attribute', attribute)();\nvar close_tag = /<\\/[A-Za-z][A-Za-z0-9]*\\s*>/;\nvar comment = /<!--([^-]+|[-][^-]+)*-->/;\nvar processing = /<[?].*?[?]>/;\nvar declaration = /<![A-Z]+\\s+[^>]*>/;\nvar cdata = /<!\\[CDATA\\[([^\\]]+|\\][^\\]]|\\]\\][^>])*\\]\\]>/;\nvar HTML_TAG_RE = replace(/^(?:open_tag|close_tag|comment|processing|declaration|cdata)/)('open_tag', open_tag)('close_tag', close_tag)('comment', comment)('processing', processing)('declaration', declaration)('cdata', cdata)();\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;","// Process html entity - &#123;, &#xAF;, &quot;, ...\n'use strict';\n\nvar entities = require('../common/entities');\n\nvar has = require('../common/utils').has;\n\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\n\nvar fromCodePoint = require('../common/utils').fromCodePoint;\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;\nvar NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n\nmodule.exports = function entity(state, silent) {\n  var ch,\n      code,\n      match,\n      pos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26\n  /* & */\n  ) {\n      return false;\n    }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23\n    /* # */\n    ) {\n        match = state.src.slice(pos).match(DIGITAL_RE);\n\n        if (match) {\n          if (!silent) {\n            code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n            state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n          }\n\n          state.pos += match[0].length;\n          return true;\n        }\n      } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) {\n            state.pending += entities[match[1]];\n          }\n\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) {\n    state.pending += '&';\n  }\n\n  state.pos++;\n  return true;\n};","// Remarkable default options\n'use strict';\n\nmodule.exports = {\n  options: {\n    html: false,\n    // Enable HTML tags in source\n    xhtmlOut: false,\n    // Use '/' to close single tags (<br />)\n    breaks: false,\n    // Convert '\\n' in paragraphs into <br>\n    langPrefix: 'language-',\n    // CSS language prefix for fenced blocks\n    linkify: false,\n    // autoconvert URL-like texts to links\n    linkTarget: '',\n    // set target to open link in\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.\n    quotes: '“”‘’',\n    // Highlighter function. Should return escaped HTML,\n    // or '' if input not changed\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    maxNesting: 20 // Internal protection, recursion limit\n\n  },\n  components: {\n    core: {\n      rules: ['block', 'inline', 'references', 'replacements', 'linkify', 'smartquotes', 'references', 'abbr2', 'footnote_tail']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fences', 'footnote', 'heading', 'hr', 'htmlblock', 'lheading', 'list', 'paragraph', 'table']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'del', 'emphasis', 'entity', 'escape', 'footnote_ref', 'htmltag', 'links', 'newline', 'text']\n    }\n  }\n};","// Remarkable default options\n'use strict';\n\nmodule.exports = {\n  options: {\n    html: false,\n    // Enable HTML tags in source\n    xhtmlOut: false,\n    // Use '/' to close single tags (<br />)\n    breaks: false,\n    // Convert '\\n' in paragraphs into <br>\n    langPrefix: 'language-',\n    // CSS language prefix for fenced blocks\n    linkify: false,\n    // autoconvert URL-like texts to links\n    linkTarget: '',\n    // set target to open link in\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.\n    quotes: '“”‘’',\n    // Highlighter function. Should return escaped HTML,\n    // or '' if input not changed\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    maxNesting: 20 // Internal protection, recursion limit\n\n  },\n  components: {\n    // Don't restrict core/block/inline rules\n    core: {},\n    block: {},\n    inline: {}\n  }\n};","// Commonmark default options\n'use strict';\n\nmodule.exports = {\n  options: {\n    html: true,\n    // Enable HTML tags in source\n    xhtmlOut: true,\n    // Use '/' to close single tags (<br />)\n    breaks: false,\n    // Convert '\\n' in paragraphs into <br>\n    langPrefix: 'language-',\n    // CSS language prefix for fenced blocks\n    linkify: false,\n    // autoconvert URL-like texts to links\n    linkTarget: '',\n    // set target to open link in\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.\n    quotes: '“”‘’',\n    // Highlighter function. Should return escaped HTML,\n    // or '' if input not changed\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    maxNesting: 20 // Internal protection, recursion limit\n\n  },\n  components: {\n    core: {\n      rules: ['block', 'inline', 'references', 'abbr2']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fences', 'heading', 'hr', 'htmlblock', 'lheading', 'list', 'paragraph']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'htmltag', 'links', 'newline', 'text']\n    }\n  }\n};","'use strict';\n/**\n * Utility functions\n */\n\nfunction typeOf(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction isString(obj) {\n  return typeOf(obj) === '[object String]';\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return object ? hasOwn.call(object, key) : false;\n} // Extend objects\n//\n\n\nfunction assign(obj\n/*from1, from2, from3, ...*/\n) {\n  var sources = [].slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNESCAPE_MD_RE = /\\\\([\\\\!\"#$%&'()*+,.\\/:;<=>?@[\\]^_`{|}~-])/g;\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) {\n    return str;\n  }\n\n  return str.replace(UNESCAPE_MD_RE, '$1');\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) {\n    return false;\n  } // never used\n\n\n  if (c >= 0xFDD0 && c <= 0xFDEF) {\n    return false;\n  }\n\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {\n    return false;\n  } // control codes\n\n\n  if (c >= 0x00 && c <= 0x08) {\n    return false;\n  }\n\n  if (c === 0x0B) {\n    return false;\n  }\n\n  if (c >= 0x0E && c <= 0x1F) {\n    return false;\n  }\n\n  if (c >= 0x7F && c <= 0x9F) {\n    return false;\n  } // out of range\n\n\n  if (c > 0x10FFFF) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n\n  return String.fromCharCode(c);\n}\n\nvar NAMED_ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  } else if (name.charCodeAt(0) === 0x23\n  /* # */\n  && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\nfunction replaceEntities(str) {\n  if (str.indexOf('&') < 0) {\n    return str;\n  }\n\n  return str.replace(NAMED_ENTITY_RE, replaceEntityPattern);\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n\n  return str;\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nexports.assign = assign;\nexports.isString = isString;\nexports.has = has;\nexports.unescapeMd = unescapeMd;\nexports.isValidEntityCode = isValidEntityCode;\nexports.fromCodePoint = fromCodePoint;\nexports.replaceEntities = replaceEntities;\nexports.escapeHtml = escapeHtml;","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","'use strict';\n/**\n * Ruler is a helper class for building responsibility chains from\n * parse rules. It allows:\n *\n *   - easy stack rules chains\n *   - getting main chain and named chains content (as arrays of functions)\n *\n * Helper methods, should not be used directly.\n * @api private\n */\n\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // { name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ] }\n  //\n  this.__rules__ = []; // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - digital anchor for fast filtering by charcodes.\n  //\n\n  this.__cache__ = null;\n}\n/**\n * Find the index of a rule by `name`.\n *\n * @param  {String} `name`\n * @return {Number} Index of the given `name`\n * @api private\n */\n\n\nRuler.prototype.__find__ = function (name) {\n  var len = this.__rules__.length;\n  var i = -1;\n\n  while (len--) {\n    if (this.__rules__[++i].name === name) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Build the rules lookup cache\n *\n * @api private\n */\n\n\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = ['']; // collect unique names\n\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) {\n      return;\n    }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) {\n        return;\n      }\n\n      if (chain && rule.alt.indexOf(chain) < 0) {\n        return;\n      }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n/**\n * Ruler public methods\n * ------------------------------------------------\n */\n\n/**\n * Replace rule function\n *\n * @param  {String} `name` Rule name\n * @param  {Function `fn`\n * @param  {Object} `options`\n * @api private\n */\n\n\nRuler.prototype.at = function (name, fn, options) {\n  var idx = this.__find__(name);\n\n  var opt = options || {};\n\n  if (idx === -1) {\n    throw new Error('Parser rule not found: ' + name);\n  }\n\n  this.__rules__[idx].fn = fn;\n  this.__rules__[idx].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n/**\n * Add a rule to the chain before given the `ruleName`.\n *\n * @param  {String}   `beforeName`\n * @param  {String}   `ruleName`\n * @param  {Function} `fn`\n * @param  {Object}   `options`\n * @api private\n */\n\n\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var idx = this.__find__(beforeName);\n\n  var opt = options || {};\n\n  if (idx === -1) {\n    throw new Error('Parser rule not found: ' + beforeName);\n  }\n\n  this.__rules__.splice(idx, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n/**\n * Add a rule to the chain after the given `ruleName`.\n *\n * @param  {String}   `afterName`\n * @param  {String}   `ruleName`\n * @param  {Function} `fn`\n * @param  {Object}   `options`\n * @api private\n */\n\n\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var idx = this.__find__(afterName);\n\n  var opt = options || {};\n\n  if (idx === -1) {\n    throw new Error('Parser rule not found: ' + afterName);\n  }\n\n  this.__rules__.splice(idx + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n/**\n * Add a rule to the end of chain.\n *\n * @param  {String}   `ruleName`\n * @param  {Function} `fn`\n * @param  {Object}   `options`\n * @return {String}\n */\n\n\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n/**\n * Enable a rule or list of rules.\n *\n * @param  {String|Array} `list` Name or array of rule names to enable\n * @param  {Boolean} `strict` If `true`, all non listed rules will be disabled.\n * @api private\n */\n\n\nRuler.prototype.enable = function (list, strict) {\n  list = !Array.isArray(list) ? [list] : list; // In strict mode disable all existing rules first\n\n  if (strict) {\n    this.__rules__.forEach(function (rule) {\n      rule.enabled = false;\n    });\n  } // Search by name and enable\n\n\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n\n    this.__rules__[idx].enabled = true;\n  }, this);\n  this.__cache__ = null;\n};\n/**\n * Disable a rule or list of rules.\n *\n * @param  {String|Array} `list` Name or array of rule names to disable\n * @api private\n */\n\n\nRuler.prototype.disable = function (list) {\n  list = !Array.isArray(list) ? [list] : list; // Search by name and disable\n\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n\n    this.__rules__[idx].enabled = false;\n  }, this);\n  this.__cache__ = null;\n};\n/**\n * Get a rules list as an array of functions.\n *\n * @param  {String} `chainName`\n * @return {Object}\n * @api private\n */\n\n\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  return this.__cache__[chainName] || [];\n};\n/**\n * Expose `Ruler`\n */\n\n\nmodule.exports = Ruler;","'use strict';\n/**\n * Parse link labels\n *\n * This function assumes that first character (`[`) already matches;\n * returns the end of the label.\n *\n * @param  {Object} state\n * @param  {Number} start\n * @api private\n */\n\nmodule.exports = function parseLinkLabel(state, start) {\n  var level,\n      found,\n      marker,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos,\n      oldFlag = state.isInLabel;\n\n  if (state.isInLabel) {\n    return -1;\n  }\n\n  if (state.labelUnmatchedScopes) {\n    state.labelUnmatchedScopes--;\n    return -1;\n  }\n\n  state.pos = start + 1;\n  state.isInLabel = true;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n\n    if (marker === 0x5B\n    /* [ */\n    ) {\n        level++;\n      } else if (marker === 0x5D\n    /* ] */\n    ) {\n        level--;\n\n        if (level === 0) {\n          found = true;\n          break;\n        }\n      }\n\n    state.parser.skipToken(state);\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n    state.labelUnmatchedScopes = 0;\n  } else {\n    state.labelUnmatchedScopes = level - 1;\n  } // restore old state\n\n\n  state.pos = oldPos;\n  state.isInLabel = oldFlag;\n  return labelEnd;\n};"],"sourceRoot":""}