{"version":3,"sources":["App.scss","components/AppHeader/AppHeader.scss","components/NavMenu/NavMenu.scss","components/AppHeader/AppHeader.js","components/NavMenu/NavMenu.js","components/Lazy/Lazy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","AppHeader","NavMenu","_ref","onShowMenu","className","react_default","a","createElement","cx","css","md","onClick","event","preventDefault","props","ref","useRef","preventTouchMove","current","target","useEffect","document","addEventListener","passive","removeEventListener","usePreventTouchMove","onClose","children","defaultLoading","Lazy","Component","Loading","arguments","length","undefined","react","fallback","Readme","React","lazy","Promise","all","__webpack_require__","e","then","bind","AntDExample","BootstrapExample","MaterialUIExample","SemanticUIExample","VanillaExample","AppMenu","onHideMenu","onLinkClicked","documentElement","scrollTop","components_NavMenu_NavMenu","NavLink","to","exact","AppContent","Route","path","component","_useState","useState","_useState2","Object","slicedToArray","menuVisible","setMenuVisible","HashRouter","basename","process","components_AppHeader_AppHeader","App_AppMenu","App_AppContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ce18a31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_3jQ0wgPc3Hj0LizMGGPFst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"_1X_Yk9kdXjWydUczyXrz6q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavMenu\":\"_2ECyVSrwbRzkTss6vGeBm3\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { MdMenu } from 'react-icons/md';\n\nimport css from './AppHeader.scss';\n\nconst AppHeader = ({ onShowMenu, className }) => {\n    const handleShowMenu = event => {\n        event.preventDefault();\n        onShowMenu();\n    };\n    return (\n        <header className={cx('AppHeader', className, css.AppHeader)}>\n            <div className=\"title\">\n                <MdMenu\n                    className=\"show-mobile-menu only-small-screen\"\n                    onClick={handleShowMenu}\n                />\n                @loopmode/stateful\n            </div>\n            <div className=\"info\">React helper for async buttons</div>\n        </header>\n    );\n};\nAppHeader.propTypes = {\n    onShowMenu: PropTypes.func,\n    className: PropTypes.string\n};\nexport default AppHeader;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport css from './NavMenu.scss';\n\nimport { MdClose } from 'react-icons/md';\n\nfunction NavMenu(props) {\n    const ref = useRef();\n\n    const onClose = event => {\n        event.preventDefault();\n        props.onClose(event);\n    };\n\n    usePreventTouchMove(ref);\n\n    return (\n        <div ref={ref} className={cx('NavMenu', props.className, css.NavMenu)}>\n            <div className=\"hide-mobile-menu\" onClick={onClose}>\n                <MdClose />\n                <div>CLOSE MENU</div>\n            </div>\n            {props.children}\n        </div>\n    );\n}\nNavMenu.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func,\n    className: PropTypes.string\n};\n\nfunction usePreventTouchMove(ref) {\n    // prevent scrolling of the page via menu overlay\n    const preventTouchMove = event => {\n        if (ref.current) {\n            if (ref.current === event.target) {\n                event.preventDefault();\n            }\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('touchmove', preventTouchMove, {\n            passive: false\n        });\n        return () => {\n            document.removeEventListener('touchmove', preventTouchMove, {\n                passive: false\n            });\n        };\n    });\n}\n\nexport default NavMenu;\n","import React, { Suspense } from 'react';\n\nconst defaultLoading = <div>Loading...</div>;\n\nconst Lazy = (Component, Loading = defaultLoading) => {\n    return props => (\n        <Suspense fallback={Loading}>\n            <Component {...props} />\n        </Suspense>\n    );\n};\n\nexport default Lazy;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { HashRouter as Router, Route, NavLink } from 'react-router-dom';\n\nimport css from './App.scss';\n\nimport AppHeader from 'components/AppHeader';\nimport NavMenu from 'components/NavMenu';\nimport Lazy from 'components/Lazy';\n\nconst Readme = React.lazy(() =>\n    import(/* webpackChunkName: \"Readme\" */ 'markdown/Readme')\n);\nconst AntDExample = React.lazy(() =>\n    import(/* webpackChunkName: \"AntDExample\" */ 'examples/antd')\n);\nconst BootstrapExample = React.lazy(() =>\n    import(/* webpackChunkName: \"BootstrapExample\" */ 'examples/bootstrap')\n);\nconst MaterialUIExample = React.lazy(() =>\n    import(/* webpackChunkName: \"MaterialUIExample\" */ 'examples/material-ui')\n);\nconst SemanticUIExample = React.lazy(() =>\n    import(/* webpackChunkName: \"SemanticUIExample\" */ 'examples/semantic-ui')\n);\nconst VanillaExample = React.lazy(() =>\n    import(/* webpackChunkName: \"VanillaExample\" */ 'examples/vanilla')\n);\n\nconst App = () => {\n    const [menuVisible, setMenuVisible] = useState(false);\n    const showMenu = () => setMenuVisible(true);\n    const hideMenu = () => setMenuVisible(false);\n    return (\n        <Router basename={process.env.REACT_APP_BASENAME}>\n            <div className={cx('App', css.App, { menuVisible })}>\n                <AppHeader onShowMenu={showMenu} />\n                <div className=\"AppBody\">\n                    <AppMenu onHideMenu={hideMenu} />\n                    <AppContent />\n                </div>\n            </div>\n        </Router>\n    );\n};\n\nconst AppMenu = ({ onHideMenu }) => {\n    const onLinkClicked = event => {\n        document.documentElement.scrollTop = 0;\n        onHideMenu(event);\n    };\n    return (\n        <NavMenu className=\"AppMenu\" onClose={onHideMenu}>\n            <ul>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/\" exact>\n                        Overview\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/vanilla\">\n                        Vanilla example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/semantic-ui\">\n                        Semantic UI example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/antd\">\n                        AntD example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/bootstrap\">\n                        Bootstrap example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/material-ui\">\n                        Material UI example\n                    </NavLink>\n                </li>\n            </ul>\n        </NavMenu>\n    );\n};\nAppMenu.propTypes = {\n    onHideMenu: PropTypes.func\n};\n\nconst AppContent = () => (\n    <div className=\"AppContent\">\n        <Route exact path=\"/\" component={Lazy(Readme)} />\n        <Route path=\"/vanilla\" component={Lazy(VanillaExample)} />\n        <Route path=\"/semantic-ui\" component={Lazy(SemanticUIExample)} />\n        <Route path=\"/antd\" component={Lazy(AntDExample)} />\n        <Route path=\"/bootstrap\" component={Lazy(BootstrapExample)} />\n        <Route path=\"/material-ui\" component={Lazy(MaterialUIExample)} />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}