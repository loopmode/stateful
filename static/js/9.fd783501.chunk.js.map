{"version":3,"sources":["examples/bulma/button-inline-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","ButtonInlineExample","successCallback","a","Math","random","errorCallback","Error","randomCallback","className","busyDelay","onClick","errorClasses","content","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href","children"],"mappings":"0OAOMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAE7D,SAASI,IACtB,IAAMC,EAAe,uCAAG,sBAAAC,EAAA,sEAChBP,EAAqB,IAAhBQ,KAAKC,UADM,2CAAH,qDAGfC,EAAa,uCAAG,sBAAAH,EAAA,sEACdP,EAAqB,IAAhBQ,KAAKC,UADI,gCAEb,IAAIE,MAAM,WAFG,2CAAH,qDAIbC,EAAiB,WACrB,OAAOJ,KAAKC,SAAW,GAAMH,IAAoBI,KAEnD,OACE,qCACE,wDACA,uEACwC,4CADxC,oCAC+F,IAC7F,0CAFF,6CAIA,sBAAKG,UAAU,UAAf,UACE,cAAC,WAAD,CAAUC,UAAW,IAArB,SACE,wBAAQD,UAAU,SAASE,QAAST,EAApC,qCAKF,cAAC,WAAD,CAAUQ,UAAW,EAArB,SACE,wBAAQD,UAAU,SAASE,QAASL,EAApC,iCAKF,cAAC,WAAD,CAAUM,aAAa,aAAvB,SACE,wBAAQH,UAAU,SAASE,QAASL,EAApC,gCAMJ,qBAAKG,UAAU,UAAf,SACE,eAAC,WAAD,WACE,wBAAQA,UAAU,oBAAoBE,QAAST,EAA/C,sBAGA,wBAAQO,UAAU,iBAAiBE,QAASH,EAA5C,iBAGA,wBAAQC,UAAU,iBAAiBE,QAASH,EAA5C,0BAKJ,cAAC,IAAD,CAAkBK,QAAO,4/D,6GCzDxB,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgCG,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIT,QAAS,kBAAMQ,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBM,SAAUR","file":"static/js/9.fd783501.chunk.js","sourcesContent":["import { Stateful } from \"@loopmode/stateful\";\nimport raw from \"raw.macro\";\nimport React from \"react\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\n\n// You can wrap any JSX children in Stateful wrappers.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nexport default function ButtonInlineExample() {\n  const successCallback = async () => {\n    await wait(Math.random() * 2000);\n  };\n  const errorCallback = async () => {\n    await wait(Math.random() * 2000);\n    return new Error(\"failed\");\n  };\n  const randomCallback = () => {\n    return Math.random() > 0.5 ? successCallback() : errorCallback();\n  };\n  return (\n    <>\n      <h3>Inline buttons example</h3>\n      <p>\n        Here are a bunch of examples, where a <code>Stateful</code> wrapper is not part of e.g. your{\" \"}\n        <code>Button</code> component, but is instead used inline.\n      </p>\n      <div className=\"buttons\">\n        <Stateful busyDelay={500}>\n          <button className=\"button\" onClick={successCallback}>\n            Successfull operation\n          </button>\n        </Stateful>\n\n        <Stateful busyDelay={0}>\n          <button className=\"button\" onClick={errorCallback}>\n            Failing operation\n          </button>\n        </Stateful>\n\n        <Stateful errorClasses=\"is-warning\">\n          <button className=\"button\" onClick={errorCallback}>\n            Warn on error\n          </button>\n        </Stateful>\n      </div>\n\n      <div className=\"buttons\">\n        <Stateful>\n          <button className=\"button is-primary\" onClick={successCallback}>\n            Siblings\n          </button>\n          <button className=\"button is-info\" onClick={randomCallback}>\n            are\n          </button>\n          <button className=\"button is-dark\" onClick={randomCallback}>\n            grouped\n          </button>\n        </Stateful>\n      </div>\n      <ToggleCodeViewer content={raw(\"./button-inline-example.tsx\")} />\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}