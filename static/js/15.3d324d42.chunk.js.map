{"version":3,"sources":["examples/bulma/state-consumers-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","randomCallback","a","Math","random","Error","id","StateConsumersExample","handleSubmit","event","preventDefault","className","monitor","busyDelay","successDuration","errorDuration","onSubmit","Consumer","type","placeholder","IdleConsumer","PendingConsumer","exact","BusyConsumer","FinishedConsumer","SuccessConsumer","ErrorConsumer","content","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href","onClick","children"],"mappings":"2OAOMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,O,SAE7DI,I,2EAAf,sBAAAC,EAAA,sEACQN,EAAK,KADb,YAEMO,KAAKC,SAAW,IAFtB,yCAGW,IAAIC,MAAM,yBAHrB,gCAKSP,QAAQC,QAAQ,CAAEO,GAAI,KAL/B,4C,sBAQe,SAASC,IACtB,IAAMC,EAAY,uCAAG,WAAOC,GAAP,SAAAP,EAAA,6DACnBO,EAAMC,iBADa,kBAEZT,KAFY,2CAAH,sDAIlB,OACE,qCACE,qBAAKU,UAAU,YAAf,SACE,qBAAKA,UAAU,mDAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,WAAD,CACEC,QAAQ,WACRC,UAAW,IACXC,gBAAiB,IACjBC,cAAe,IAJjB,SAME,uBAAMJ,UAAU,MAAMK,SAAUR,EAAhC,UACE,sBAAKG,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAjB,mBACA,sBAAKA,UAAU,yBAAf,UACE,cAAC,WAASM,SAAV,UACE,uBAAOC,KAAK,QAAQP,UAAU,QAAQQ,YAAY,8BAGpD,sBAAMR,UAAU,wBAAhB,SACE,mBAAGA,UAAU,2BAKnB,qBAAKA,UAAU,QAAf,SACE,cAAC,WAASM,SAAV,UACE,wBAAQN,UAAU,SAASO,KAAK,SAAhC,uBAMJ,cAAC,WAASE,aAAV,UACE,qBAAKT,UAAU,QAAf,SACE,qBAAKA,UAAU,eAAf,sBAIJ,cAAC,WAASU,gBAAV,UACE,qBAAKV,UAAU,QAAf,SACE,qBAAKA,UAAU,eAAf,iCAIJ,cAAC,WAASU,gBAAV,CAA0BC,OAAK,EAA/B,SACE,qBAAKX,UAAU,QAAf,SACE,qBAAKA,UAAU,uBAAf,yBAIJ,cAAC,WAASY,aAAV,CAAuBD,OAAK,EAA5B,SACE,qBAAKX,UAAU,QAAf,SACE,qBAAKA,UAAU,uBAAf,sBAIJ,cAAC,WAASa,iBAAV,UACE,qBAAKb,UAAU,QAAf,SACE,qBAAKA,UAAU,eAAf,0BAIJ,cAAC,WAASc,gBAAV,UACE,qBAAKd,UAAU,QAAf,SACE,qBAAKA,UAAU,0BAAf,yBAIJ,cAAC,WAASe,cAAV,UACE,qBAAKf,UAAU,QAAf,SACE,qBAAKA,UAAU,yBAAf,kCAQd,cAAC,IAAD,CAAkBgB,QAAO,0rH,6GClGxB,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgCG,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIC,QAAS,kBAAMF,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBO,SAAUT","file":"static/js/15.3d324d42.chunk.js","sourcesContent":["import React from \"react\";\nimport { Stateful } from \"@loopmode/stateful\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\nimport raw from \"raw.macro\";\n\n// When you use provideContext, you can conditionally render some children only in specific states\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nasync function randomCallback() {\n  await wait(4000);\n  if (Math.random() > 0.5) {\n    return new Error(\"Something went wrong\");\n  }\n  return Promise.resolve({ id: 1 });\n}\n\nexport default function StateConsumersExample() {\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    return randomCallback();\n  };\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"columns is-5-tablet is-4-desktop is-3-widescreen\">\n          <div className=\"column is-half\">\n            <Stateful\n              monitor=\"onSubmit\"\n              busyDelay={2000}\n              successDuration={2000}\n              errorDuration={2000}\n            >\n              <form className=\"box\" onSubmit={handleSubmit}>\n                <div className=\"field\">\n                  <label className=\"label\">Email</label>\n                  <div className=\"control has-icons-left\">\n                    <Stateful.Consumer>\n                      <input type=\"email\" className=\"input\" placeholder=\"e.g. hkakehas@cisco.com\" />\n                    </Stateful.Consumer>\n\n                    <span className=\"icon is-small is-left\">\n                      <i className=\"fa fa-envelope\"></i>\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"field\">\n                  <Stateful.Consumer>\n                    <button className=\"button\" type=\"submit\">\n                      Login\n                    </button>\n                  </Stateful.Consumer>\n                </div>\n\n                <Stateful.IdleConsumer>\n                  <div className=\"field\">\n                    <div className=\"notification\">Idle</div>\n                  </div>\n                </Stateful.IdleConsumer>\n\n                <Stateful.PendingConsumer>\n                  <div className=\"field\">\n                    <div className=\"notification\">Pending or busy</div>\n                  </div>\n                </Stateful.PendingConsumer>\n\n                <Stateful.PendingConsumer exact>\n                  <div className=\"field\">\n                    <div className=\"notification is-info\">Pending</div>\n                  </div>\n                </Stateful.PendingConsumer>\n\n                <Stateful.BusyConsumer exact>\n                  <div className=\"field\">\n                    <div className=\"notification is-info\">Busy</div>\n                  </div>\n                </Stateful.BusyConsumer>\n\n                <Stateful.FinishedConsumer>\n                  <div className=\"field\">\n                    <div className=\"notification\">Finished</div>\n                  </div>\n                </Stateful.FinishedConsumer>\n\n                <Stateful.SuccessConsumer>\n                  <div className=\"field\">\n                    <div className=\"notification is-success\">Success</div>\n                  </div>\n                </Stateful.SuccessConsumer>\n\n                <Stateful.ErrorConsumer>\n                  <div className=\"field\">\n                    <div className=\"notification is-danger\">Error</div>\n                  </div>\n                </Stateful.ErrorConsumer>\n              </form>\n            </Stateful>\n          </div>\n        </div>\n      </div>\n      <ToggleCodeViewer content={raw(\"./state-consumers-example.tsx\")} />\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}