{"version":3,"sources":["App.scss","components/LoadingOverlay/LoadingOverlay.scss","components/AnimatedLogo/Logo.scss","App.js","serviceWorker.js","index.js","components/AnimatedLogo/Hex.js","components/AnimatedLogo/Logo.js","components/LoadingOverlay/LoadingOverlay.js","components/LoadingOverlay/index.js"],"names":["module","exports","App","LoadingOverlay","Logo","AppHeader","React","lazy","Promise","all","__webpack_require__","e","then","bind","AppMenu","AppContent","_React$useState","useState","_React$useState2","Object","slicedToArray","menuVisible","setMenuVisible","react_default","a","createElement","Suspense","fallback","HashRouter","basename","process","className","cx","css","onShowMenu","onHideMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","placeholder","querySelector","parentNode","removeChild","ratio","Math","sqrt","Hex","_ref","_ref$size","size","hexPoints","x","y","points","i","push","sin","PI","cos","map","p","concat","join","width","height","style","position","left","Rotator","children","_ref2","_ref2$animated","animated","_ref2$scale","scale","transform","Logo_Rotator","AnimatedLogo_Hex","components_AnimatedLogo_Logo","d","__webpack_exports__","components_LoadingOverlay_LoadingOverlay"],"mappings":"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","file":"static/js/main.d759cc78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_3jQ0wgPc3Hj0LizMGGPFst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingOverlay\":\"_1bsLSxnrI7nxMEd4qgJXTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"_2oQX3DbzsNO2mr84MVOq-O\"};","import React from 'react';\nimport cx from 'classnames';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport css from './App.scss';\n\nimport LoadingOverlay from 'components/LoadingOverlay';\n\nconst AppHeader = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppHeader' */ 'components/AppHeader')\n);\nconst AppMenu = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppMenu' */ 'components/AppMenu')\n);\nconst AppContent = React.lazy(() =>\n    import(/* webpackChunkName: 'components/AppContent' */ 'components/AppContent')\n);\n\nconst App = () => {\n    // the menu is hidden on mobile via CSS, and we force-open it when menu icon is clicked\n    const [menuVisible, setMenuVisible] = React.useState(false);\n    const showMenu = () => setMenuVisible(true);\n    const hideMenu = () => setMenuVisible(false);\n\n    return (\n        <React.Suspense fallback={<LoadingOverlay />}>\n            <Router basename={process.env.REACT_APP_BASENAME}>\n                <div className={cx('App', css.App)}>\n                    <AppHeader onShowMenu={showMenu} />\n                    <div className=\"App--body\">\n                        <AppMenu\n                            onHideMenu={hideMenu}\n                            menuVisible={menuVisible}\n                        />\n                        <AppContent />\n                    </div>\n                </div>\n            </Router>\n        </React.Suspense>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst placeholder = document.querySelector('.content-placeholder');\nif (placeholder) {\n    placeholder.parentNode.removeChild(placeholder);\n}\n","import React from 'react';\n\nimport cx from 'classnames';\n\nconst ratio = Math.sqrt(3) / 2;\n\nconst Hex = ({ className, size = 100 }) => {\n    function hexPoints(size) {\n        let x = size;\n        let y = size;\n\n        const points = [];\n\n        for (let i = 0; i < 7; i++) {\n            points.push({\n                x: x + size * Math.sin((i * 2 * Math.PI) / 6),\n                y: y + size * Math.cos((i * 2 * Math.PI) / 6)\n            });\n        }\n\n        return points.map(p => `${p.x},${p.y}`).join(' ');\n    }\n    return (\n        <div className={cx('Hex', className)}>\n            <svg\n                width={size}\n                height={size}\n                style={{\n                    position: 'relative',\n                    left: -(size - size * ratio) * 0.5\n                }}\n            >\n                <polyline className=\"border\" points={hexPoints(size / 2)} />\n                <polyline\n                    className=\"fill\"\n                    points={hexPoints((size / 2) * 0.8)}\n                />\n            </svg>\n        </div>\n    );\n};\n\nexport default Hex;\n","import React from 'react';\n\nimport cx from 'classnames';\nimport css from './Logo.scss';\nimport Hex from './Hex';\n\nconst Rotator = ({ children, className }) => {\n    return (\n        <div className={cx('rotator', className)}>\n            <div className=\"center-outer\">\n                <div className=\"center-inner\">\n                    <div className=\"rotation rotation-outer\">\n                        <div className=\"position\">\n                            <div className=\"rotation rotation-inner\">\n                                {children}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst Logo = ({ animated = true, scale = 1 }) => (\n    <div className={cx('Logo', css.Logo)}>\n        <div className={'Logo-outer'} style={{ transform: `scale(${scale})` }}>\n            <div className={cx('Logo-inner')}>\n                <Rotator className={cx('rotator-1', { animated })}>\n                    <Hex size={50} className=\"hex\" />\n                </Rotator>\n\n                <Rotator className={cx('rotator-2', { animated })}>\n                    <Hex size={50} className=\"hex\" />\n                </Rotator>\n\n                <Rotator className={cx('rotator-3', { animated })}>\n                    <Hex size={50} className=\"hex\" />\n                </Rotator>\n            </div>\n        </div>\n    </div>\n);\nexport default Logo;\n","import React from 'react';\n\nimport cx from 'classnames';\nimport css from './LoadingOverlay.scss';\n\nimport AnimatedLogo from 'components/AnimatedLogo';\n\nconst LoadingOverlay = () => (\n    <div className={cx('LoadingOverlay', css.LoadingOverlay)}>\n        <AnimatedLogo scale={0.5} />\n    </div>\n);\nexport default LoadingOverlay;\n","export { default } from './LoadingOverlay';\n"],"sourceRoot":""}