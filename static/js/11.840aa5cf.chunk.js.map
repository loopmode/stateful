{"version":3,"sources":["examples/bulma/config-provider-example.tsx","ToggleCodeViewer.tsx"],"names":["statefulConfig","pendingProps","pendingClasses","busyDelay","busyProps","busyClasses","successClasses","successDuration","errorClasses","errorDuration","ConfigProviderExample","config","SomeComponent","content","wait","time","Promise","resolve","setTimeout","successCallback","a","Math","random","errorCallback","Error","className","onClick","errorProps","title","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href","children"],"mappings":"2OAUMA,EAAiB,CACrBC,aAAc,WACdC,eAAgB,GAEhBC,UAAW,EACXC,UAAW,WACXC,YAAa,aAEbC,eAAgB,aAChBC,gBAAiB,IAEjBC,aAAc,YACdC,cAAe,KAGF,SAASC,IACtB,OACE,eAAC,yBAAD,CAAwBC,OAAQX,EAAhC,UACE,cAACY,EAAD,IACA,cAAC,IAAD,CAAkBC,QAAO,q2DAK/B,IAAMC,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAC5E,SAASH,IACP,IAAMO,EAAe,uCAAG,sBAAAC,EAAA,sEAChBN,EAAK,IAAsB,IAAhBO,KAAKC,UADA,2CAAH,qDAGfC,EAAa,uCAAG,sBAAAH,EAAA,sEACdN,EAAK,IAAsB,IAAhBO,KAAKC,UADF,gCAEb,IAAIE,MAAM,SAFG,2CAAH,qDAKnB,OACE,sBAAKC,UAAU,UAAf,UACE,cAAC,WAAD,UACE,wBAAQA,UAAU,SAASC,QAASP,EAApC,4BAKF,cAAC,WAAD,CACEX,aAAa,aACbmB,WAAY,iBAAO,CACjBC,MAAO,4BAETnB,cAAe,IALjB,SAOE,wBAAQgB,UAAU,SAASC,QAASH,EAApC,8B,6GCxDD,SAASM,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDjB,EAIC,EAJDA,QAKA,EAAgCkB,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIT,QAAS,kBAAMQ,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBM,SAAUvB","file":"static/js/11.840aa5cf.chunk.js","sourcesContent":["import { Stateful, StatefulConfigProvider } from \"@loopmode/stateful\";\nimport raw from \"raw.macro\";\nimport React from \"react\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\n\n// You can render a StatefulConfigProvider at high level (e.g. wrapping your app)\n// and provide default configuration for all nested Stateful wrappers.\n// You can still use props on individual components to override those defaults.\n// This way, you can create a configuration for your specific UI framework.\n\nconst statefulConfig = {\n  pendingProps: \"disabled\",\n  pendingClasses: \"\",\n\n  busyDelay: 0,\n  busyProps: \"disabled\",\n  busyClasses: \"is-loading\",\n  //\n  successClasses: \"is-success\",\n  successDuration: 2000,\n  //\n  errorClasses: \"is-danger\",\n  errorDuration: 2000,\n};\n\nexport default function ConfigProviderExample() {\n  return (\n    <StatefulConfigProvider config={statefulConfig}>\n      <SomeComponent />\n      <ToggleCodeViewer content={raw(\"./config-provider-example.tsx\")} />\n    </StatefulConfigProvider>\n  );\n}\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\nfunction SomeComponent() {\n  const successCallback = async () => {\n    await wait(200 + Math.random() * 800);\n  };\n  const errorCallback = async () => {\n    await wait(200 + Math.random() * 800);\n    return new Error(\"Nope\");\n  };\n\n  return (\n    <div className=\"buttons\">\n      <Stateful>\n        <button className=\"button\" onClick={successCallback}>\n          Will succeed\n        </button>\n      </Stateful>\n\n      <Stateful\n        errorClasses=\"is-warning\"\n        errorProps={() => ({\n          title: \"Something went wrong...\",\n        })}\n        errorDuration={10000}\n      >\n        <button className=\"button\" onClick={errorCallback}>\n          Will fail\n        </button>\n      </Stateful>\n    </div>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}