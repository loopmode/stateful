{"version":3,"sources":["App.scss","components/AppHeader/AppHeader.scss","components/AppHeader/icon.svg","components/AppMenu/AppMenu.scss","components/AppHeader/AppHeader.js","components/AppMenu/AppMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","AppHeader","__webpack_require__","p","AppMenu","_ref","onShowMenu","className","react_default","a","createElement","cx","css","md","onClick","event","preventDefault","Link","to","document","documentElement","scrollTop","src","Logo","alt","props","ref","useRef","onHideMenu","menuVisible","handleTouch","current","contains","target","useEffect","addEventListener","removeEventListener","hideOnOuterTouch","preventTouchMove","passive","children","Readme","React","lazy","Promise","all","e","then","bind","AntDExample","BootstrapExample","MaterialUIExample","SemanticUIExample","VanillaExample","Navigation","onLinkClicked","components_AppMenu_AppMenu","NavLink","exact","Content","Route","path","component","Lazy","Component","Suspense","fallback","_React$useState","useState","_React$useState2","Object","slicedToArray","showMenu","HashRouter","basename","process","components_AppHeader_AppHeader","App_Navigation","App_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fb0a4fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_3jQ0wgPc3Hj0LizMGGPFst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"_1X_Yk9kdXjWydUczyXrz6q\"};","module.exports = __webpack_public_path__ + \"static/media/icon.dc916f92.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppMenu\":\"_293c8NTi-0kpt1FD3P9o00\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { Link } from 'react-router-dom';\n\nimport { MdMenu } from 'react-icons/md';\n\nimport css from './AppHeader.scss';\n\nimport Logo from './icon.svg';\n\nconst AppHeader = ({ onShowMenu, className }) => {\n    const handleShowMenu = event => {\n        event.preventDefault();\n        onShowMenu();\n    };\n    return (\n        <header className={cx('AppHeader', className, css.AppHeader)}>\n            <div className=\"contents\">\n                <div className=\"title\">\n                    <MdMenu\n                        className=\"show-mobile-menu only-small-screen\"\n                        onClick={handleShowMenu}\n                    />\n                    @loopmode/stateful\n                </div>\n                <div className=\"info\">React helper for async buttons</div>\n            </div>\n            <Link\n                to=\"/\"\n                className=\"logo-link\"\n                onClick={() => (document.documentElement.scrollTop = 0)}\n            >\n                <img className=\"logo\" src={Logo} alt=\"logo\" />\n            </Link>\n        </header>\n    );\n};\nAppHeader.propTypes = {\n    onShowMenu: PropTypes.func,\n    className: PropTypes.string\n};\nexport default AppHeader;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport css from './AppMenu.scss';\n\nimport { MdClose } from 'react-icons/md';\n\nexport const Item = props => <li className=\"AppMenu-item\" {...props} />;\n\nfunction AppMenu(props) {\n    const ref = useRef();\n\n    hideOnOuterTouch(ref, props);\n    preventTouchMove(ref);\n\n    return (\n        <div ref={ref} className={cx('AppMenu', props.className, css.AppMenu)}>\n            <header className=\"AppMenu--mobile-header\">\n                <button\n                    className=\"AppMenu--mobile-close\"\n                    onClick={event => {\n                        event.preventDefault();\n                        props.onHideMenu(event);\n                    }}\n                >\n                    <MdClose />\n                    CLOSE MENU\n                </button>\n            </header>\n\n            <div className=\"AppMenu--contents\">{props.children}</div>\n        </div>\n    );\n}\nAppMenu.propTypes = {\n    children: PropTypes.node,\n    menuVisible: PropTypes.bool,\n    onHideMenu: PropTypes.func,\n    className: PropTypes.string\n};\n\nfunction hideOnOuterTouch(ref, { onHideMenu, menuVisible }) {\n    const handleTouch = event => {\n        if (menuVisible && ref.current && !ref.current.contains(event.target)) {\n            event.preventDefault();\n            onHideMenu();\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('touchstart', handleTouch);\n        return () => document.removeEventListener('touchstart', handleTouch);\n    });\n}\n\nfunction preventTouchMove(ref) {\n    // prevent scrolling of the page via menu overlay\n    const preventTouchMove = event => {\n        if (ref.current === event.target) {\n            event.preventDefault();\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('touchmove', preventTouchMove, {\n            passive: false\n        });\n        return () => {\n            document.removeEventListener('touchmove', preventTouchMove, {\n                passive: false\n            });\n        };\n    });\n}\n\nexport default AppMenu;\n","import React from 'react';\nimport cx from 'classnames';\nimport { HashRouter as Router, Route, NavLink } from 'react-router-dom';\n\nimport css from './App.scss';\n\nimport AppHeader from 'components/AppHeader';\nimport AppMenu from 'components/AppMenu';\n\nconst Readme = React.lazy(() =>\n    import(/* webpackChunkName: \"Readme\" */ 'markdown/Readme')\n);\nconst AntDExample = React.lazy(() =>\n    import(/* webpackChunkName: \"AntDExample\" */ 'examples/antd')\n);\nconst BootstrapExample = React.lazy(() =>\n    import(/* webpackChunkName: \"BootstrapExample\" */ 'examples/bootstrap')\n);\nconst MaterialUIExample = React.lazy(() =>\n    import(/* webpackChunkName: \"MaterialUIExample\" */ 'examples/material-ui')\n);\nconst SemanticUIExample = React.lazy(() =>\n    import(/* webpackChunkName: \"SemanticUIExample\" */ 'examples/semantic-ui')\n);\nconst VanillaExample = React.lazy(() =>\n    import(/* webpackChunkName: \"VanillaExample\" */ 'examples/vanilla')\n);\n\nconst App = () => {\n    const [menuVisible, showMenu] = React.useState(false);\n\n    return (\n        <Router basename={process.env.REACT_APP_BASENAME}>\n            <div className={cx('App', css.App, { menuVisible })}>\n                <AppHeader onShowMenu={() => showMenu(true)} />\n                <div className=\"App--body\">\n                    <Navigation\n                        onHideMenu={() => showMenu(false)}\n                        menuVisible={menuVisible}\n                    />\n                    <Content />\n                </div>\n            </div>\n        </Router>\n    );\n};\n\nconst Navigation = props => {\n    const onLinkClicked = event => {\n        document.documentElement.scrollTop = 0;\n        props.onHideMenu(event);\n    };\n    return (\n        <AppMenu {...props}>\n            <ul>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/\" exact>\n                        Overview\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/vanilla\">\n                        Vanilla example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/semantic-ui\">\n                        Semantic UI example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/antd\">\n                        AntD example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/bootstrap\">\n                        Bootstrap example\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink onClick={onLinkClicked} to=\"/material-ui\">\n                        Material UI example\n                    </NavLink>\n                </li>\n            </ul>\n        </AppMenu>\n    );\n};\n\nconst Content = () => (\n    <div className=\"AppContent\">\n        <Route exact path=\"/\" component={Lazy(Readme)} />\n        <Route path=\"/vanilla\" component={Lazy(VanillaExample)} />\n        <Route path=\"/semantic-ui\" component={Lazy(SemanticUIExample)} />\n        <Route path=\"/antd\" component={Lazy(AntDExample)} />\n        <Route path=\"/bootstrap\" component={Lazy(BootstrapExample)} />\n        <Route path=\"/material-ui\" component={Lazy(MaterialUIExample)} />\n    </div>\n);\n\nconst Lazy = Component => {\n    return props => (\n        <React.Suspense fallback={<div>Loading...</div>}>\n            <Component {...props} />\n        </React.Suspense>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}