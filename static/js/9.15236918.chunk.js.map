{"version":3,"sources":["examples/bulma/button-inline-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","ButtonInlineExample","successCallback","a","Math","random","errorCallback","Error","className","onClick","errorClasses","content","ToggleCodeViewer","language","React","useState","showCode","setShowCode","href","children"],"mappings":"0OAOMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAE7D,SAASI,IACtB,IAAMC,EAAe,uCAAG,sBAAAC,EAAA,sEAChBP,EAAqB,IAAhBQ,KAAKC,UADM,2CAAH,qDAGfC,EAAa,uCAAG,sBAAAH,EAAA,sEACdP,EAAqB,IAAhBQ,KAAKC,UADI,gCAEb,IAAIE,MAAM,WAFG,2CAAH,qDAOnB,OACE,qCACE,sBAAKC,UAAU,UAAf,UACE,cAAC,WAAD,UACE,wBAAQA,UAAU,SAASC,QAASP,EAApC,4BAKF,cAAC,WAAD,UACE,wBAAQM,UAAU,SAASC,QAASH,EAApC,yBAKF,cAAC,WAAD,CAAUI,aAAa,aAAvB,SACE,wBAAQF,UAAU,SAASC,QAASH,EAApC,yBAKF,eAAC,WAAD,WACE,wBAAQE,UAAU,wBAAwBC,QAASP,EAAnD,qBAGA,wBAAQM,UAAU,wBAAwBC,QA5B3B,WACrB,OAAOL,KAAKC,SAAW,GAAMH,IAAoBI,KA2B3C,2BAKJ,cAAC,IAAD,CAAkBK,QAAO,ykD,6GC/CxB,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgCG,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIT,QAAS,kBAAMQ,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWH,SAAUA,EAAiBM,SAAUR","file":"static/js/9.15236918.chunk.js","sourcesContent":["import { Stateful } from \"@loopmode/stateful\";\nimport raw from \"raw.macro\";\nimport React from \"react\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\n\n// You can wrap any JSX children in Stateful wrappers.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nexport default function ButtonInlineExample() {\n  const successCallback = async () => {\n    await wait(Math.random() * 2000);\n  };\n  const errorCallback = async () => {\n    await wait(Math.random() * 2000);\n    return new Error(\"failed\");\n  };\n  const randomCallback = () => {\n    return Math.random() > 0.5 ? successCallback() : errorCallback();\n  };\n  return (\n    <>\n      <div className=\"buttons\">\n        <Stateful>\n          <button className=\"button\" onClick={successCallback}>\n            Will succeed\n          </button>\n        </Stateful>\n\n        <Stateful>\n          <button className=\"button\" onClick={errorCallback}>\n            Will fail\n          </button>\n        </Stateful>\n\n        <Stateful errorClasses=\"is-warning\">\n          <button className=\"button\" onClick={errorCallback}>\n            Will warn\n          </button>\n        </Stateful>\n\n        <Stateful>\n          <button className=\"button button-primary\" onClick={successCallback}>\n            Grouped\n          </button>\n          <button className=\"button button-primary\" onClick={randomCallback}>\n            Grouped\n          </button>\n        </Stateful>\n      </div>\n      <ToggleCodeViewer content={raw(\"./button-inline-example.tsx\")} />\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}