(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{364:function(e,t,n){e.exports={Markdown:"_3HAAgi00lfs4qIw3St0ANt"}},47:function(e,t,n){"use strict";n.r(t),n.d(t,"loadDependencies",function(){return h}),n.d(t,"default",function(){return y});var a=n(70),s=n(71),o=n(80),r=n(72),l=n(81),p=n(82),i=n.n(p),u=n(83),c=n(0),d=n.n(c),m=n(2),f=n.n(m),h=function(){var e=Object(u.a)(i.a.mark(function e(){var t,a;return i.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.e(13).then(n.t.bind(null,109,7));case 2:return t=e.sent,e.next=5,n.e(14).then(n.t.bind(null,110,7));case 5:return e.next=7,n.e(1).then(n.t.bind(null,57,7));case 7:return e.next=9,n.e(1).then(n.t.bind(null,57,7));case 9:return e.next=11,n.e(15).then(n.t.bind(null,111,7));case 11:return a=e.sent,e.abrupt("return",{Prism:t,ReactPrism:a});case 13:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}(),b=d.a.lazy(Object(u.a)(i.a.mark(function e(){var t,n;return i.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,h();case 2:return t=e.sent,n=t.ReactPrism,e.abrupt("return",n);case 5:case"end":return e.stop()}},e)}))),y=function(e){function t(){return Object(a.a)(this,t),Object(o.a)(this,Object(r.a)(t).apply(this,arguments))}return Object(l.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){return d.a.createElement(b,{component:"pre",className:f()("Code push","language-".concat(this.props.lang.toLowerCase()))},this.props.children)}}]),t}(d.a.Component);y.defaultProps={lang:"jsx"}},50:function(e,t,n){e.exports={PrevNextLinks:"_1O7WOT8zYg7oZ7IIhDdvoR"}},53:function(e,t,n){"use strict";var a=n(79),s=n(0),o=n.n(s),r=n(146),l=n(652),p=n(50),i=n.n(p),u=n(2),c=n.n(u),d=Object(l.a)(function(e){var t=function(e,t){var n=Object(a.a)(e).findIndex(function(e){return e.hash.replace("#","")===t}),s=e[n-1],o=s&&{to:s.hash.replace("#",""),children:"\u25c0 ".concat(s.innerHTML)},r=e[n+1],l=r&&{to:r.hash.replace("#",""),children:"".concat(r.innerHTML," \u25b6")};return{prevLink:o,nextLink:l}}(document.querySelectorAll(".AppMenu a"),e.location.pathname),n=t.prevLink,s=t.nextLink;return o.a.createElement("footer",{className:c()("PrevNextLinks",i.a.PrevNextLinks)},n&&o.a.createElement(r.a,Object.assign({},n,{onClick:m})),o.a.createElement("span",{className:"spacer"}),s&&o.a.createElement(r.a,Object.assign({},s,{onClick:m})))});function m(){document.documentElement.scrollTop=0}n.d(t,"a",function(){return d})},669:function(e,t,n){"use strict";n.r(t);var a=n(0),s=n.n(a),o=n(82),r=n.n(o),l=n(83),p=n(149),i=n(311),u=n.n(i),c=n(364),d=n.n(c),m=n(2),f=n.n(m),h=function(e){var t=e.className,a=Object(p.a)(e,["className"]),o=s.a.useRef();return function(e){var t=n(47).loadDependencies,a=function(){var n=Object(l.a)(r.a.mark(function n(){var a,s;return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t();case 2:a=n.sent,s=a.Prism,e?e.current&&s.highlightAllUnder(e.current):s.highlightAll();case 5:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}();s.a.useEffect(function(){a()})}(o),s.a.createElement("div",{className:f()("Markdown",d.a.Markdown,t),ref:o},s.a.createElement(u.a,a))};var b=n(53);t.default=function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement(h,Object.assign({},e,{className:"Readme",source:"[poly]: https://github.com/loopmode/stateful/blob/master/packages/stateful/src/Stateful.js#L16-L20 'PolyType'\n[status]: https://github.com/loopmode/stateful/blob/master/packages/stateful/src/Status.js 'Status'\n[antd-example]: https://loopmode.github.io/stateful/#/antd 'AntD Example'\n[bootstrap-example]: https://loopmode.github.io/stateful/#/bootstrap 'Bootstrap Example'\n[semantic-ui-example]: https://loopmode.github.io/stateful/#/semantic-ui 'Semantic UI Example'\n[material-ui-example]: https://loopmode.github.io/stateful/#/material-ui 'Material UI Example'\n[example-vanilla]: https://loopmode.github.io/stateful/#/vanilla 'Vanilla Example'\n[antd-wrapper]: https://github.com/loopmode/stateful/blob/master/packages/stateful/src/wrappers/antd.js 'AntD Wrapper'\n[bootstrap-wrapper]: https://github.com/loopmode/stateful/blob/master/packages/stateful/src/wrappers/bootstrap.js 'Bootstrap Wrapper'\n[semantic-ui-wrapper]: https://github.com/loopmode/stateful/blob/master/packages/stateful/src/wrappers/semantic-ui.js 'Semantic UI Wrapper'\n\n# @loopmode/stateful\n\nA react component for visual indication of async state.\n\n<img src=\"https://github.com/loopmode/stateful/raw/master/stateful-success.gif\" width=\"150\" height=\"90\" title=\"pending and success example\" alt=\"success animation\" />\n<img src=\"https://github.com/loopmode/stateful/raw/master/stateful-error.gif\" width=\"150\" height=\"90\" title=\"pending and error example\" alt=\"error animation\" />\n\nWrap it around some component that has a callback. If the callback returns a promise when invoked, the wrapped component receives props that indicate the current state of the promise.\n\nSee also:\n\n-   [docs and examples](https://loopmode.github.io/stateful/)\n-   [npm page](https://www.npmjs.com/package/@loopmode/stateful)\n-   [github page](https://github.com/loopmode/stateful/tree/master/packages/stateful)\n\n_Note: This is a rewrite of `@loopmode/async-state` using hooks. Thus, it requires **react@16.8.0** or higher._\n_If you need the functionality for older react versions, check out [@loopmode/async-state](https://www.npmjs.com/package/@loopmode/async-state)_\n\n## Installation\n\nUsing npm:\n\n```bash\nnpm install --save @loopmode/stateful\n```\n\nUsing yarn:\n\n```bash\nyarn add @loopmode/stateful\n```\n\n## Usage\n\nIn the example below, we use `<Stateful>` without any props.\n\nThe default values are used, and the button\n\n-   has a `disabled` prop when clicked, until the promise is resolved or rejected\n-   has a `busy` CSS class after `busyDelay` milliseconds (default `0` - right away)\n-   has a `success` CSS class for `successDuration` milliseconds (default `1000`) when the promise is resolved\n-   has an `error` CSS class for `errorDuration` milliseconds (default `1000`) when the promise is rejected\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Stateful from '@loopmode/stateful';\n\nfunction handleClick() {\n    return fetch('https://jsonplaceholder.typicode.com/users');\n}\nconst Demo = () => (\n    <Stateful>\n        <button onClick={handleClick}>load</button>\n    </Stateful>\n);\nReactDOM.render(<Demo />, document.getElementById('root'));\n```\n\n## Supported props\n\nCommon\n\n| Prop                | Type             | Default value                     | Description                                                                                                                 |\n| ------------------- | ---------------- | --------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |\n| **_general props_** |                  |                                   |                                                                                                                             |\n| callbacks           | [PolyType][poly] | `['onClick']`                     | Names of callbacks to intercept and check for promises                                                                      |\n| hintDuration        | Number           | `1000`                            | Duration in milliseconds for both `Status.SUCCESS` and `Status.ERROR` - outweighed by `successDuration` and `errorDuration` |\n| delimiter           | String           | `' '`                             | Delimiter for splitting `PolyType` props of type `String` into multiple values                                              |\n| rejectValue         | Function         | `value => value instanceof Error` | Whether to indicate `Status.ERROR` for a promise that was actually resolved with a value                                    |\n| **_for pending_**   |                  |                                   |                                                                                                                             |\n| pendingProps        | [PolyType][poly] | `['disabled']`                    | Names of props to add for `Status.PENDING`                                                                                  |\n| pendingClasses      | [PolyType][poly] | `[]`                              | Names of CSS classes to add for `Status.PENDING`                                                                            |\n| **_for busy_**      |                  |                                   |                                                                                                                             |\n| busyProps           | [PolyType][poly] | `['disabled']`                    | Names of props to add for `Status.BUSY`                                                                                     |\n| busyClasses         | [PolyType][poly] | `[]`                              | Names of CSS classes to add for `Status.BUSY`                                                                               |\n| busyDelay           | Number           | `0`                               | Duration in milliseconds to wait after `Status.PENDING` and before `Status.BUSY`                                            |\n| **_for error_**     |                  |                                   |                                                                                                                             |\n| errorProps          | [PolyType][poly] | `[]`                              | Names of props to add for `Status.ERROR`                                                                                    |\n| errorClasses        | [PolyType][poly] | `['error']`                       | Names of CSS classes to add for `Status.ERROR`                                                                              |\n| errorDuration       | Number           | `undefined`                       | Duration in milliseconds for `Status.ERROR` - outweighs `hintDuration`                                                      |\n| **_for success_**   |                  |                                   |                                                                                                                             |\n| successProps        | [PolyType][poly] | `[]`                              | Names of props to add for `Status.SUCCESS`                                                                                  |\n| successClasses      | [PolyType][poly] | `['success']`                     | Names of CSS classes to add for `Status.SUCCESS`                                                                            |\n| successDuration     | Number           | `undefined`                       | Duration in milliseconds for `Status.SUCCESS` - outweighs `hintDuration`                                                    |\n\n### PolyType props\n\nThe values of [PolyType][poly] props may be of type String, Array or Function. Here are some examples:\n\n```jsx\nimport Stateful, { Status } from '@loopmode/stateful';\n\n// String\n<Stateful pendingProps=\"disabled\" />\n<Stateful pendingProps=\"disabled pending\" />\n<Stateful pendingProps=\"disabled,pending\" delimiter=\",\" />\n\n// Array\n<Stateful pendingProps={['disabled']} />\n<Stateful pendingProps={['disabled', 'pending']} />\n<Stateful pendingProps={myPropsArray} />\n\n// Function\n<Stateful pendingProps={() => ({ variant: 'loading' })} />\n<Stateful pendingProps={(status) => ({ isLoading: status === Status.BUSY })} />\n```\n\n## Status value\n\nWhen you provide a function to a [PolyType][poly] prop, it will be invoked with the current `status` and should return a props object.\n\n| status                   | value | Description                                                                                                                          |\n| ------------------------ | ----- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| [Status.IDLE][status]    | `0`   | The default state - no props are added to wrapped children                                                                           |\n| [Status.PENDING][status] | `1`   | A callback was invoked, and it returned a promise. Wrapped children now receive `pendingProps` and `pendingClasses`                  |\n| [Status.BUSY][status]    | `2`   | The returned promise has been pending for more than `busyDelay` milliseconds. Wrapped children receive `busyProps` and `busyClasses` |\n| [Status.SUCCESS][status] | `3`   | The returned promise was resolved. Wrapped children receive `successProps` and `successClasses` for `successDuration` milliseconds   |\n| [Status.ERROR][status]   | `4`   | The returned promise was rejected. Wrapped children receive `errorProps` and `errorClasses` for `errorDuration` milliseconds         |\n\n```jsx\nimport { Status } from '@loopmode/stateful';\n// or:\n// import * as Status from '@loopmode/stateful/lib/Status';\nconsole.log({ Status });\n```\n\n## Usage with UI libraries\n\nMost UI libraries and frameworks come prepared for these situations and provide class names or props to make a button look green or red or busy.\nWhile `@loopmode/stateful` makes it easy to write a custom wrapper for any library you use, it comes with a couple of presets for popular frameworks.\n(Suggestions and especially pull requests for more support are highly welcome!)\n\nTo use the pre-configured wrapper components, you should import them specifically from `lib/wrapper`.\nIdeally, you would do this only once for the local `Stateful` component of a project, configure it there, and import that one across your codebase.\n\n| name        | examples                       | implementation                                 | usage                                                                 |\n| ----------- | ------------------------------ | ---------------------------------------------- | --------------------------------------------------------------------- |\n| antd        | [example][antd-example]        | [wrappers/antd.js][antd-wrapper]               | `import Stateful from '@loopmode/stateful/lib/wrappers/antd';`        |\n| bootstrap   | [example][bootstrap-example]   | [wrappers/bootstrap.js][bootstrap-wrapper]     | `import Stateful from '@loopmode/stateful/lib/wrappers/bootstrap';`   |\n| semantic-ui | [example][semantic-ui-example] | [wrappers/semantic-ui.js][semantic-ui-wrapper] | `import Stateful from '@loopmode/stateful/lib/wrappers/semantic-ui';` |\n| material-ui | [example][material-ui-example] | -                                              | -                                                                     |\n\n### Recommended usage\n\nYou might be able to use one of the pre-configured library wrappers, but chances are you'll need your own wrapper.\n\nTypically, you should create a local `components/Stateful` component, configure it once for the needs of your project:\n\n```jsx\n// src/components/Stateful/index.js\n\nimport React from 'react';\nimport DefaultStateful from '@loopmode/stateful';\n\nconst CustomStateful = props => {\n    return (\n        <DefaultStateful\n            // whatever suits your project\n            pendingProps=\"disabled\"\n            pendingClasses=\"loading\"\n            errorProps={null}\n            errorClasses=\"danger\"\n            successProps={null}\n            successClasses=\"success\"\n            busyDelay={250}\n            {...props}\n        />\n    );\n};\n\nexport default CustomStateful;\n```\n\nCheck out [the default wrappers](https://github.com/loopmode/stateful/tree/master/packages/stateful/src/wrappers) for some examples using this approach.\n",options:{html:!0}})),s.a.createElement(b.a,null))}}}]);
//# sourceMappingURL=Readme.b4d5044b.chunk.js.map