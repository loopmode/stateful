(this["webpackJsonp@stateful/examples"]=this["webpackJsonp@stateful/examples"]||[]).push([[8],{292:function(n,t,e){"use strict";e.r(t),e.d(t,"default",(function(){return h}));var r=e(56),a=e.n(r),s=e(57),o=e(11),c=e(13),u=e(14),i=(e(0),e(9)),l=e.n(i),d=e(55),p=e(1),f=["stateful"],m=function(n){return new Promise((function(t){return setTimeout(t,n)}))},b=function(n){var t=n.stateful,e=Object(c.a)(n,f);return Object(p.jsx)(u.Stateful,Object(o.a)(Object(o.a)({busyDelay:300,pendingProps:"disabled",busyClasses:"is-loading",successClasses:"is-success",errorClasses:"is-error"},t),{},{children:Object(p.jsx)("button",Object(o.a)(Object(o.a)({},e),{},{className:l()("button",e.className),children:e.children}))}))};function h(){var n=function(){var n=Object(s.a)(a.a.mark((function n(){return a.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,m(2500*Math.random());case 2:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}(),t=function(){var n=Object(s.a)(a.a.mark((function n(){return a.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,m(2500*Math.random());case 2:return n.abrupt("return",new Error("Nope"));case 3:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}();return Object(p.jsxs)(p.Fragment,{children:[Object(p.jsxs)("div",{className:"buttons",children:[Object(p.jsx)(b,{onClick:n,children:"Will succeed"}),Object(p.jsx)(b,{onClick:t,children:"Will fail"}),Object(p.jsx)(b,{onClick:function(){return Math.random()>.5?n():t()},stateful:{busyDelay:0},children:"Random fail"})]}),Object(p.jsx)(d.a,{content:'import { Stateful } from "@loopmode/stateful";\nimport React from "react";\nimport cx from "classnames";\nimport { StatefulProps } from "@loopmode/stateful/lib/types";\nimport { ToggleCodeViewer } from "../../ToggleCodeViewer";\nimport raw from "raw.macro";\n\n// Example using a custom button component.\n// If you have a custom Button component anyways, you can add a single Stateful wrapper and configure it there.\n// Later throughout your codebase, you don\'t care about importing or configuring Stateful wrappers anymore.\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nconst Button = ({\n  stateful,\n  ...props\n}: React.HTMLProps<HTMLButtonElement> & {\n  // If you care about individual settings per instance, you can pass a stateful props object along\n  stateful?: StatefulProps;\n  // latest react types workaround\n  type?: "submit" | "reset" | "button";\n}) => {\n  return (\n    <Stateful\n      busyDelay={300}\n      pendingProps="disabled"\n      busyClasses="is-loading"\n      successClasses="is-success"\n      errorClasses="is-error"\n      {...stateful}\n    >\n      <button {...props} className={cx("button", props.className)}>\n        {props.children}\n      </button>\n    </Stateful>\n  );\n};\n\nexport default function ButtonComponentExample() {\n  const handleSuccessClick = async () => {\n    await wait(Math.random() * 2500);\n  };\n  const handleErrorClick = async () => {\n    await wait(Math.random() * 2500);\n    return new Error("Nope");\n  };\n  const handleRandomClick = () => {\n    return Math.random() > 0.5 ? handleSuccessClick() : handleErrorClick();\n  };\n  return (\n    <>\n      <div className="buttons">\n        <Button onClick={handleSuccessClick}>Will succeed</Button>\n        <Button onClick={handleErrorClick}>Will fail</Button>\n        <Button onClick={handleRandomClick} stateful={{ busyDelay: 0 }}>\n          Random fail\n        </Button>\n      </div>\n\n      <ToggleCodeViewer content={raw("./button-component-example.tsx")} />\n    </>\n  );\n}\n'})]})}},55:function(n,t,e){"use strict";e.d(t,"a",(function(){return u}));var r=e(10),a=e(58),s=e(0),o=e.n(s),c=e(1);function u(n){var t=n.language,e=void 0===t?"jsx":t,s=n.content,u=o.a.useState(!1),i=Object(r.a)(u,2),l=i[0],d=i[1];return Object(c.jsxs)(c.Fragment,{children:[Object(c.jsx)("hr",{}),Object(c.jsxs)("a",{href:"#",onClick:function(){return d(!l)},children:[l?"Hide":"Show"," code"]}),l&&Object(c.jsx)(a.a,{language:e,children:s})]})}}}]);
//# sourceMappingURL=8.e4008cf6.chunk.js.map