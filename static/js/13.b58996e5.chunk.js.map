{"version":3,"sources":["examples/bulma/form-context-example.tsx","ToggleCodeViewer.tsx"],"names":["wait","time","Promise","resolve","setTimeout","dummyLogin","a","Math","random","reject","Error","id","FormContextExample","React","useState","email","password","error","setError","handleSubmit","useCallback","event","preventDefault","message","className","monitor","onSubmit","Consumer","type","placeholder","required","content","ToggleCodeViewer","language","showCode","setShowCode","href","onClick","children"],"mappings":"4PAWMA,EAAO,SAACC,GAAD,OAAkB,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,O,SAE7DI,I,2EAAf,sBAAAC,EAAA,sEACQN,EAAK,IAAsB,IAAhBO,KAAKC,UADxB,YAEMD,KAAKC,SAAW,IAFtB,yCAGWN,QAAQO,OAAO,IAAIC,MAAM,qBAHpC,gCAKSR,QAAQC,QAAQ,CAAEQ,GAAI,KAL/B,4C,sBAQe,SAASC,IACtB,MAA0BC,IAAMC,SAAc,CAC5CC,MAAO,GACPC,SAAU,KAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAIMC,EAAeN,IAAMO,YAAN,uCAAkB,WAAOC,GAAP,eAAAf,EAAA,6DACrCe,EAAMC,iBAD+B,SAGnCJ,EAAS,IAH0B,SAI7Bb,IAJ6B,8DAM7BG,EAASD,KAAKC,SACpBU,EAAS,CACPH,MAAOP,EAAS,GAAM,KAAMe,QAAU,GACtCP,SAAUR,EAAS,GAAM,KAAMe,QAAU,KATR,iFAAlB,sDAalB,IAEH,OACE,mCACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,mDAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,WAAD,CAAUC,QAAQ,WAAlB,SACE,uBAAMD,UAAU,MAAME,SAAUP,EAAhC,UACE,sBAAKK,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAjB,mBACA,sBAAKA,UAAU,yBAAf,UACE,cAAC,WAASG,SAAV,UACE,uBAAOC,KAAK,QAAQJ,UAAU,QAAQK,YAAY,8BAEpD,sBAAML,UAAU,wBAAhB,SACE,mBAAGA,UAAU,qBAEdP,EAAMF,OAAS,mBAAGS,UAAU,iBAAb,SAA+BP,EAAMF,cAGzD,sBAAKS,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAjB,sBACA,sBAAKA,UAAU,yBAAf,UACE,cAAC,WAASG,SAAV,UACE,uBAAOC,KAAK,WAAWJ,UAAU,QAAQK,YAAY,YAAYC,UAAQ,MAE3E,sBAAMN,UAAU,wBAAhB,SACE,mBAAGA,UAAU,iBAEdP,EAAMD,UAAY,mBAAGQ,UAAU,iBAAb,SAA+BP,EAAMD,iBAG5D,qBAAKQ,UAAU,QAAf,SACE,wBAAOA,UAAU,WAAjB,UACE,cAAC,WAASG,SAAV,UACE,uBAAOC,KAAK,eACO,IAHvB,mBAOF,qBAAKJ,UAAU,QAAf,SACE,cAAC,WAASG,SAAV,UACE,wBAAQH,UAAU,SAASI,KAAK,SAAhC,gCASZ,uBACA,sBAAKJ,UAAU,UAAf,UACE,8CACA,+BACE,gFACA,2EAEF,oLAIA,wHAIF,cAAC,IAAD,CAAkBO,QAAO,20I,6GCvG1B,SAASC,EAAT,GAMH,IAAD,IALDC,gBAKC,MALU,MAKV,EAJDF,EAIC,EAJDA,QAKA,EAAgClB,IAAMC,UAAS,GAA/C,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,OACE,qCACE,uBAEA,oBAAGC,KAAK,IAAIC,QAAS,kBAAMF,GAAaD,IAAxC,UAAoDA,EAAW,OAAS,OAAxE,WACCA,GAAY,cAAC,IAAD,CAAWD,SAAUA,EAAiBK,SAAUP","file":"static/js/13.b58996e5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Stateful } from \"@loopmode/stateful\";\nimport { ToggleCodeViewer } from \"../../ToggleCodeViewer\";\nimport raw from \"raw.macro\";\n\n// The Stateful wrapper can be used on form elements as well, by using `monitor=\"onSubmit\"`\n// however, your submit button will be deeply nested, and only the wrapped form element will receive stateful props\n// in order to display success or error state on your submit button, you can use the context features\n// - in the wrapper, do not disable the provideContext prop\n// - deeply nested, you can use Stateful.Consumer to pick up the statefull props and add them to its children\n\nconst wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n\nasync function dummyLogin() {\n  await wait(200 + Math.random() * 800);\n  if (Math.random() > 0.5) {\n    return Promise.reject(new Error(\"Incorrect value\"));\n  }\n  return Promise.resolve({ id: 1 });\n}\n\nexport default function FormContextExample() {\n  const [error, setError] = React.useState<any>({\n    email: \"\",\n    password: \"\",\n  });\n  const handleSubmit = React.useCallback(async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    try {\n      setError({});\n      await dummyLogin();\n    } catch (error) {\n      const random = Math.random();\n      setError({\n        email: random > 0.5 ? error.message : \"\",\n        password: random < 0.5 ? error.message : \"\",\n      });\n      return error;\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"columns is-5-tablet is-4-desktop is-3-widescreen\">\n          <div className=\"column is-half\">\n            <Stateful monitor=\"onSubmit\">\n              <form className=\"box\" onSubmit={handleSubmit}>\n                <div className=\"field\">\n                  <label className=\"label\">Email</label>\n                  <div className=\"control has-icons-left\">\n                    <Stateful.Consumer>\n                      <input type=\"email\" className=\"input\" placeholder=\"e.g. hkakehas@cisco.com\" />\n                    </Stateful.Consumer>\n                    <span className=\"icon is-small is-left\">\n                      <i className=\"fa fa-envelope\"></i>\n                    </span>\n                    {error.email && <p className=\"help is-danger\">{error.email}</p>}\n                  </div>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">Password</label>\n                  <div className=\"control has-icons-left\">\n                    <Stateful.Consumer>\n                      <input type=\"password\" className=\"input\" placeholder=\"*********\" required />\n                    </Stateful.Consumer>\n                    <span className=\"icon is-small is-left\">\n                      <i className=\"fa fa-lock\"></i>\n                    </span>\n                    {error.password && <p className=\"help is-danger\">{error.password}</p>}\n                  </div>\n                </div>\n                <div className=\"field\">\n                  <label className=\"checkbox\">\n                    <Stateful.Consumer>\n                      <input type=\"checkbox\" />\n                    </Stateful.Consumer>{\" \"}\n                    Remember me\n                  </label>\n                </div>\n                <div className=\"field\">\n                  <Stateful.Consumer>\n                    <button className=\"button\" type=\"submit\">\n                      Login\n                    </button>\n                  </Stateful.Consumer>\n                </div>\n              </form>\n            </Stateful>\n          </div>\n        </div>\n        <hr />\n        <div className=\"content\">\n          <h3>Form example</h3>\n          <ul>\n            <li>Disable inputs and submit button while pending</li>\n            <li>Display error/success on submit button</li>\n          </ul>\n          <p>\n            While we wrap a form element and monitor its state, we want to add the resulting props\n            not to the form itself, but to some of its children instead.\n          </p>\n          <p>\n            That's why we use Stateful.Consumer around nested inout fields and the submit button\n          </p>\n        </div>\n        <ToggleCodeViewer content={raw(\"./form-context-example.tsx\")} />\n      </div>\n    </>\n  );\n}\n","import Codeblock from \"@codeblock/react\";\nimport React from \"react\";\n\nexport function ToggleCodeViewer({\n  language = \"jsx\",\n  content,\n}: {\n  language?: string;\n  content: string;\n}) {\n  const [showCode, setShowCode] = React.useState(false);\n  return (\n    <>\n      <hr />\n      {/* eslint-disable-next-line */}\n      <a href=\"#\" onClick={() => setShowCode(!showCode)}>{showCode ? \"Hide\" : \"Show\"} code</a>\n      {showCode && <Codeblock language={language as any} children={content} />}\n    </>\n  );\n}\n"],"sourceRoot":""}